{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to hypercoast","text":"<p>A Python package for visualizing and analyzing hyperspectral data in coastal regions</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://hypercoast.org</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Searching for NASA hyperspectral data interactively</li> <li>Interactive visualization and analysis of hyperspectral data, such as AVIRIS, DESIS, EMIT, PACE, NEON AOP</li> <li>Interactive visualization of NASA ECOSTRESS data</li> <li>Interactive visualization of PACE chlorophyll-a data</li> <li>Interactive extraction and visualization of spectral signatures</li> <li>Changing band combinations and colormaps interactively</li> <li>Visualizing hyperspectral data in 3D</li> <li>Visualizing ERA5 temperature data in 3D</li> <li>Interactive slicing and thresholding of hyperspectral data in 3D</li> <li>Saving spectral signatures as CSV files</li> </ul>"},{"location":"#demos","title":"Demos","text":"<ul> <li>Visualizing hyperspectral data in 3D (notebook)</li> </ul> <ul> <li>Interactive slicing of hyperspectral data in 3D (notebook)</li> </ul> <ul> <li>Interactive thresholding of hyperspectral data in 3D (notebook)</li> </ul> <ul> <li>Visualizing ERA5 temperature data in 3D (notebook)</li> </ul> <ul> <li>Changing band combinations and colormaps interactively (notebook)</li> </ul> <ul> <li>Visualizing NASA AVIRIS hyperspectral data interactively (notebook)</li> </ul> <ul> <li>Visualizing DESIS hyperspectral data interactively (notebook)</li> </ul> <ul> <li>Visualizing NASA EMIT hyperspectral data interactively (notebook)</li> </ul> <ul> <li>Visualizing NASA PACE hyperspectral data interactively (notebook)</li> </ul> <ul> <li>Visualizing NEON AOP hyperspectral data interactively (notebook)</li> </ul> <ul> <li>Interactive visualization of PACE chlorophyll-a data (notebook)</li> </ul>"},{"location":"#acknowledgement","title":"Acknowledgement","text":"<p>This projects draws inspiration and adapts source code from the nasa/EMIT-Data-Resources repository. Credit goes to the original authors.</p>"},{"location":"aviris/","title":"aviris module","text":"<p>This module contains functions to read and process NASA AVIRIS hyperspectral data. More info about the data can be found at https://aviris.jpl.nasa.gov. The source code is adapted from https://bit.ly/4bRCgqs. Credit goes to the original authors.</p>"},{"location":"aviris/#hypercoast.aviris.aviris_to_image","title":"<code>aviris_to_image(dataset, wavelengths=None, method='nearest', output=None, **kwargs)</code>","text":"<p>Converts an AVIRIS dataset to an image.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Union[xr.Dataset, str]</code> <p>The dataset containing the AVIRIS data or the file path to the dataset.</p> required <code>wavelengths</code> <code>np.ndarray</code> <p>The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for data interpolation. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>output</code> <code>str</code> <p>The file path where the image will be saved. If None, the image will be returned as a PIL Image object. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to be passed to <code>leafmap.array_to_image</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[rasterio.Dataset]</code> <p>The image converted from the dataset. If     <code>output</code> is provided, the image will be saved to the specified file     and the function will return None.</p> Source code in <code>hypercoast/aviris.py</code> <pre><code>def aviris_to_image(\n    dataset: Union[xr.Dataset, str],\n    wavelengths: Optional[np.ndarray] = None,\n    method: str = \"nearest\",\n    output: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"\n    Converts an AVIRIS dataset to an image.\n\n    Args:\n        dataset (Union[xr.Dataset, str]): The dataset containing the AVIRIS data\n            or the file path to the dataset.\n        wavelengths (np.ndarray, optional): The specific wavelengths to select. If None, all\n            wavelengths are selected. Defaults to None.\n        method (str, optional): The method to use for data interpolation.\n            Defaults to \"nearest\".\n        output (str, optional): The file path where the image will be saved. If\n            None, the image will be returned as a PIL Image object. Defaults to None.\n        **kwargs (Any): Additional keyword arguments to be passed to\n            `leafmap.array_to_image`.\n\n    Returns:\n        Optional[rasterio.Dataset]: The image converted from the dataset. If\n            `output` is provided, the image will be saved to the specified file\n            and the function will return None.\n    \"\"\"\n    from leafmap import array_to_image\n\n    if isinstance(dataset, str):\n        dataset = read_aviris(dataset, method=method)\n\n    if wavelengths is not None:\n        dataset = dataset.sel(wavelength=wavelengths, method=method)\n\n    return array_to_image(\n        dataset[\"reflectance\"],\n        output=output,\n        transpose=False,\n        dtype=np.float32,\n        **kwargs,\n    )\n</code></pre>"},{"location":"aviris/#hypercoast.aviris.extract_aviris","title":"<code>extract_aviris(dataset, lat, lon, offset=2.0)</code>","text":"<p>Extracts AVIRIS data from a given xarray Dataset.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>xarray.Dataset</code> <p>The dataset containing the AVIRIS data.</p> required <code>lat</code> <code>float</code> <p>The latitude of the point to extract.</p> required <code>lon</code> <code>float</code> <p>The longitude of the point to extract.</p> required <code>offset</code> <code>float</code> <p>The offset from the point to extract. Defaults to 2.0.</p> <code>2.0</code> <p>Returns:</p> Type Description <code>xarray.DataArray</code> <p>The extracted data.</p> Source code in <code>hypercoast/aviris.py</code> <pre><code>def extract_aviris(\n    dataset: xr.Dataset, lat: float, lon: float, offset: float = 2.0\n) -&gt; xr.DataArray:\n    \"\"\"\n    Extracts AVIRIS data from a given xarray Dataset.\n\n    Args:\n        dataset (xarray.Dataset): The dataset containing the AVIRIS data.\n        lat (float): The latitude of the point to extract.\n        lon (float): The longitude of the point to extract.\n        offset (float, optional): The offset from the point to extract. Defaults to 2.0.\n\n    Returns:\n        xarray.DataArray: The extracted data.\n    \"\"\"\n\n    crs = dataset.attrs[\"crs\"]\n\n    x, y = convert_coords([[lat, lon]], \"epsg:4326\", crs)[0]\n\n    da = dataset[\"reflectance\"]\n\n    x_con = (da[\"xc\"] &gt; x - offset) &amp; (da[\"xc\"] &lt; x + offset)\n    y_con = (da[\"yc\"] &gt; y - offset) &amp; (da[\"yc\"] &lt; y + offset)\n\n    try:\n        data = da.where(x_con &amp; y_con, drop=True)\n        data = data.mean(dim=[\"x\", \"y\"])\n    except ValueError:\n        data = np.nan * np.ones(da.sizes[\"wavelength\"])\n\n    da = xr.DataArray(\n        data, dims=[\"wavelength\"], coords={\"wavelength\": dataset.coords[\"wavelength\"]}\n    )\n\n    return da\n</code></pre>"},{"location":"aviris/#hypercoast.aviris.read_aviris","title":"<code>read_aviris(filepath, wavelengths=None, method='nearest', **kwargs)</code>","text":"<p>Reads NASA AVIRIS hyperspectral data and returns an xarray dataset.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the AVIRIS data.</p> required <code>wavelengths</code> <code>List[float]</code> <p>The wavelengths to select. If None, all wavelengths are selected. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for selection. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the selection method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.Dataset</code> <p>The dataset containing the reflectance data.</p> Source code in <code>hypercoast/aviris.py</code> <pre><code>def read_aviris(\n    filepath: str,\n    wavelengths: Optional[List[float]] = None,\n    method: str = \"nearest\",\n    **kwargs: Any,\n) -&gt; xr.Dataset:\n    \"\"\"\n    Reads NASA AVIRIS hyperspectral data and returns an xarray dataset.\n\n    Args:\n        filepath (str): The path to the AVIRIS data.\n        wavelengths (List[float], optional): The wavelengths to select. If None,\n            all wavelengths are selected. Defaults to None.\n        method (str, optional): The method to use for selection. Defaults to\n            \"nearest\".\n        **kwargs (Any): Additional arguments to pass to the selection method.\n\n    Returns:\n        xr.Dataset: The dataset containing the reflectance data.\n    \"\"\"\n\n    if filepath.endswith(\".hdr\"):\n        filepath = filepath.replace(\".hdr\", \"\")\n\n    ds = xr.open_dataset(filepath, engine=\"rasterio\")\n\n    wavelength = ds[\"wavelength\"].values.tolist()\n    wavelength = [round(num, 2) for num in wavelength]\n\n    cols = ds.x.size\n    rows = ds.y.size\n\n    rio_transform = ds.rio.transform()\n    geo_transform = list(rio_transform)[:6]\n\n    # get the raster geotransform as its component parts\n    xres, xrot, xmin, yrot, yres, ymax = geo_transform\n\n    # generate coordinate arrays\n    xarr = np.array([xmin + i * xres for i in range(0, cols)])\n    yarr = np.array([ymax + i * yres for i in range(0, rows)])\n\n    ds[\"y\"] = xr.DataArray(\n        data=yarr,\n        dims=(\"y\"),\n        name=\"y\",\n        attrs=dict(\n            units=\"m\",\n            standard_name=\"projection_y_coordinate\",\n            long_name=\"y coordinate of projection\",\n        ),\n    )\n\n    ds[\"x\"] = xr.DataArray(\n        data=xarr,\n        dims=(\"x\"),\n        name=\"x\",\n        attrs=dict(\n            units=\"m\",\n            standard_name=\"projection_x_coordinate\",\n            long_name=\"x coordinate of projection\",\n        ),\n    )\n\n    global_atts = ds.attrs\n    global_atts[\"Conventions\"] = \"CF-1.6\"\n    ds.attrs = dict(\n        units=\"unitless\",\n        _FillValue=-9999,\n        grid_mapping=\"crs\",\n        standard_name=\"reflectance\",\n        long_name=\"atmospherically corrected surface reflectance\",\n    )\n    ds.attrs.update(global_atts)\n\n    ds = ds.transpose(\"y\", \"x\", \"band\")\n    ds = ds.drop_vars([\"wavelength\"])\n    ds = ds.rename({\"band\": \"wavelength\", \"band_data\": \"reflectance\"})\n    ds.coords[\"wavelength\"] = wavelength\n    ds.attrs[\"crs\"] = ds.rio.crs.to_string()\n    ds.rio.write_transform(rio_transform)\n\n    if wavelengths is not None:\n        ds = ds.sel(wavelength=wavelengths, method=method, **kwargs)\n    return ds\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#hypercoast.common.convert_coords","title":"<code>convert_coords(coords, from_epsg, to_epsg)</code>","text":"<p>Convert a list of coordinates from one EPSG to another.</p> <p>Parameters:</p> Name Type Description Default <code>coords</code> <code>List[Tuple[float, float]]</code> <p>List of tuples containing coordinates in the format (latitude, longitude).</p> required <code>from_epsg</code> <code>str</code> <p>Source EPSG code (default is \"epsg:4326\").</p> required <code>to_epsg</code> <code>str</code> <p>Target EPSG code (default is \"epsg:32615\").</p> required <p>Returns:</p> Type Description <code>List[Tuple[float, float]]</code> <p>List of tuples containing converted coordinates in the format (x, y).</p> Source code in <code>hypercoast/common.py</code> <pre><code>def convert_coords(\n    coords: List[Tuple[float, float]], from_epsg: str, to_epsg: str\n) -&gt; List[Tuple[float, float]]:\n    \"\"\"\n    Convert a list of coordinates from one EPSG to another.\n\n    Args:\n        coords: List of tuples containing coordinates in the format (latitude, longitude).\n        from_epsg: Source EPSG code (default is \"epsg:4326\").\n        to_epsg: Target EPSG code (default is \"epsg:32615\").\n\n    Returns:\n        List of tuples containing converted coordinates in the format (x, y).\n    \"\"\"\n    import pyproj\n\n    # Define the coordinate transformation\n    transformer = pyproj.Transformer.from_crs(from_epsg, to_epsg, always_xy=True)\n\n    # Convert each coordinate\n    converted_coords = [transformer.transform(lon, lat) for lat, lon in coords]\n\n    return converted_coords\n</code></pre>"},{"location":"common/#hypercoast.common.download_ecostress","title":"<code>download_ecostress(granules, out_dir=None, threads=8)</code>","text":"<p>Downloads NASA ECOSTRESS granules.</p> <p>Parameters:</p> Name Type Description Default <code>granules</code> <code>List[dict]</code> <p>The granules to download.</p> required <code>out_dir</code> <code>str</code> <p>The output directory where the granules will be downloaded. Defaults to None (current directory).</p> <code>None</code> <code>threads</code> <code>int</code> <p>The number of threads to use for downloading. Defaults to 8.</p> <code>8</code> Source code in <code>hypercoast/common.py</code> <pre><code>def download_ecostress(\n    granules: List[dict],\n    out_dir: Optional[str] = None,\n    threads: int = 8,\n) -&gt; None:\n    \"\"\"Downloads NASA ECOSTRESS granules.\n\n    Args:\n        granules (List[dict]): The granules to download.\n        out_dir (str, optional): The output directory where the granules will be\n            downloaded. Defaults to None (current directory).\n        threads (int, optional): The number of threads to use for downloading.\n            Defaults to 8.\n    \"\"\"\n\n    download_nasa_data(granules=granules, out_dir=out_dir, threads=threads)\n</code></pre>"},{"location":"common/#hypercoast.common.download_emit","title":"<code>download_emit(granules, out_dir=None, threads=8)</code>","text":"<p>Downloads NASA EMIT granules.</p> <p>Parameters:</p> Name Type Description Default <code>granules</code> <code>List[dict]</code> <p>The granules to download.</p> required <code>out_dir</code> <code>str</code> <p>The output directory where the granules will be downloaded. Defaults to None (current directory).</p> <code>None</code> <code>threads</code> <code>int</code> <p>The number of threads to use for downloading. Defaults to 8.</p> <code>8</code> Source code in <code>hypercoast/common.py</code> <pre><code>def download_emit(\n    granules: List[dict],\n    out_dir: Optional[str] = None,\n    threads: int = 8,\n) -&gt; None:\n    \"\"\"Downloads NASA EMIT granules.\n\n    Args:\n        granules (List[dict]): The granules to download.\n        out_dir (str, optional): The output directory where the granules will be\n            downloaded. Defaults to None (current directory).\n        threads (int, optional): The number of threads to use for downloading.\n            Defaults to 8.\n    \"\"\"\n\n    download_nasa_data(granules=granules, out_dir=out_dir, threads=threads)\n</code></pre>"},{"location":"common/#hypercoast.common.download_file","title":"<code>download_file(url=None, output=None, quiet=False, proxy=None, speed=None, use_cookies=True, verify=True, id=None, fuzzy=False, resume=False, unzip=True, overwrite=False, subfolder=False)</code>","text":"<p>Download a file from URL, including Google Drive shared URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Google Drive URL is also supported. Defaults to None.</p> <code>None</code> <code>output</code> <code>str</code> <p>Output filename. Default is basename of URL.</p> <code>None</code> <code>quiet</code> <code>bool</code> <p>Suppress terminal output. Default is False.</p> <code>False</code> <code>proxy</code> <code>str</code> <p>Proxy. Defaults to None.</p> <code>None</code> <code>speed</code> <code>float</code> <p>Download byte size per second (e.g., 256KB/s = 256 * 1024). Defaults to None.</p> <code>None</code> <code>use_cookies</code> <code>bool</code> <p>Flag to use cookies. Defaults to True.</p> <code>True</code> <code>verify</code> <code>bool | str</code> <p>Either a bool, in which case it controls whether the server's TLS certificate is verified, or a string, in which case it must be a path to a CA bundle to use. Default is True.. Defaults to True.</p> <code>True</code> <code>id</code> <code>str</code> <p>Google Drive's file ID. Defaults to None.</p> <code>None</code> <code>fuzzy</code> <code>bool</code> <p>Fuzzy extraction of Google Drive's file Id. Defaults to False.</p> <code>False</code> <code>resume</code> <code>bool</code> <p>Resume the download from existing tmp file if possible. Defaults to False.</p> <code>False</code> <code>unzip</code> <code>bool</code> <p>Unzip the file. Defaults to True.</p> <code>True</code> <code>overwrite</code> <code>bool</code> <p>Overwrite the file if it already exists. Defaults to False.</p> <code>False</code> <code>subfolder</code> <code>bool</code> <p>Create a subfolder with the same name as the file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The output file path.</p> Source code in <code>hypercoast/common.py</code> <pre><code>def download_file(\n    url=None,\n    output=None,\n    quiet=False,\n    proxy=None,\n    speed=None,\n    use_cookies=True,\n    verify=True,\n    id=None,\n    fuzzy=False,\n    resume=False,\n    unzip=True,\n    overwrite=False,\n    subfolder=False,\n):\n    \"\"\"Download a file from URL, including Google Drive shared URL.\n\n    Args:\n        url (str, optional): Google Drive URL is also supported. Defaults to None.\n        output (str, optional): Output filename. Default is basename of URL.\n        quiet (bool, optional): Suppress terminal output. Default is False.\n        proxy (str, optional): Proxy. Defaults to None.\n        speed (float, optional): Download byte size per second (e.g., 256KB/s = 256 * 1024). Defaults to None.\n        use_cookies (bool, optional): Flag to use cookies. Defaults to True.\n        verify (bool | str, optional): Either a bool, in which case it controls whether the server's TLS certificate is verified, or a string,\n            in which case it must be a path to a CA bundle to use. Default is True.. Defaults to True.\n        id (str, optional): Google Drive's file ID. Defaults to None.\n        fuzzy (bool, optional): Fuzzy extraction of Google Drive's file Id. Defaults to False.\n        resume (bool, optional): Resume the download from existing tmp file if possible. Defaults to False.\n        unzip (bool, optional): Unzip the file. Defaults to True.\n        overwrite (bool, optional): Overwrite the file if it already exists. Defaults to False.\n        subfolder (bool, optional): Create a subfolder with the same name as the file. Defaults to False.\n\n    Returns:\n        str: The output file path.\n    \"\"\"\n    import zipfile\n    import tarfile\n    import gdown\n\n    if output is None:\n        if isinstance(url, str) and url.startswith(\"http\"):\n            output = os.path.basename(url)\n\n    out_dir = os.path.abspath(os.path.dirname(output))\n    if not os.path.exists(out_dir):\n        os.makedirs(out_dir)\n\n    if isinstance(url, str):\n        if os.path.exists(os.path.abspath(output)) and (not overwrite):\n            print(\n                f\"{output} already exists. Skip downloading. Set overwrite=True to overwrite.\"\n            )\n            return os.path.abspath(output)\n        else:\n            url = github_raw_url(url)\n\n    if \"https://drive.google.com/file/d/\" in url:\n        fuzzy = True\n\n    output = gdown.download(\n        url, output, quiet, proxy, speed, use_cookies, verify, id, fuzzy, resume\n    )\n\n    if unzip:\n        if output.endswith(\".zip\"):\n            with zipfile.ZipFile(output, \"r\") as zip_ref:\n                if not quiet:\n                    print(\"Extracting files...\")\n                if subfolder:\n                    basename = os.path.splitext(os.path.basename(output))[0]\n\n                    output = os.path.join(out_dir, basename)\n                    if not os.path.exists(output):\n                        os.makedirs(output)\n                    zip_ref.extractall(output)\n                else:\n                    zip_ref.extractall(os.path.dirname(output))\n        elif output.endswith(\".tar.gz\") or output.endswith(\".tar\"):\n            if output.endswith(\".tar.gz\"):\n                mode = \"r:gz\"\n            else:\n                mode = \"r\"\n\n            with tarfile.open(output, mode) as tar_ref:\n                if not quiet:\n                    print(\"Extracting files...\")\n                if subfolder:\n                    basename = os.path.splitext(os.path.basename(output))[0]\n                    output = os.path.join(out_dir, basename)\n                    if not os.path.exists(output):\n                        os.makedirs(output)\n                    tar_ref.extractall(output)\n                else:\n                    tar_ref.extractall(os.path.dirname(output))\n\n    return os.path.abspath(output)\n</code></pre>"},{"location":"common/#hypercoast.common.download_nasa_data","title":"<code>download_nasa_data(granules, out_dir=None, provider=None, threads=8)</code>","text":"<p>Downloads NASA Earthdata granules.</p> <p>Parameters:</p> Name Type Description Default <code>granules</code> <code>List[dict]</code> <p>The granules to download.</p> required <code>out_dir</code> <code>str</code> <p>The output directory where the granules will be downloaded. Defaults to None (current directory).</p> <code>None</code> <code>provider</code> <code>str</code> <p>The provider of the granules.</p> <code>None</code> <code>threads</code> <code>int</code> <p>The number of threads to use for downloading. Defaults to 8.</p> <code>8</code> Source code in <code>hypercoast/common.py</code> <pre><code>def download_nasa_data(\n    granules: List[dict],\n    out_dir: Optional[str] = None,\n    provider: Optional[str] = None,\n    threads: int = 8,\n) -&gt; None:\n    \"\"\"Downloads NASA Earthdata granules.\n\n    Args:\n        granules (List[dict]): The granules to download.\n        out_dir (str, optional): The output directory where the granules will be downloaded. Defaults to None (current directory).\n        provider (str, optional): The provider of the granules.\n        threads (int, optional): The number of threads to use for downloading. Defaults to 8.\n    \"\"\"\n\n    leafmap.nasa_data_download(\n        granules=granules, out_dir=out_dir, provider=provider, threads=threads\n    )\n</code></pre>"},{"location":"common/#hypercoast.common.download_pace","title":"<code>download_pace(granules, out_dir=None, threads=8)</code>","text":"<p>Downloads NASA PACE granules.</p> <p>Parameters:</p> Name Type Description Default <code>granules</code> <code>List[dict]</code> <p>The granules to download.</p> required <code>out_dir</code> <code>str</code> <p>The output directory where the granules will be downloaded. Defaults to None (current directory).</p> <code>None</code> <code>threads</code> <code>int</code> <p>The number of threads to use for downloading. Defaults to 8.</p> <code>8</code> Source code in <code>hypercoast/common.py</code> <pre><code>def download_pace(\n    granules: List[dict],\n    out_dir: Optional[str] = None,\n    threads: int = 8,\n) -&gt; None:\n    \"\"\"Downloads NASA PACE granules.\n\n    Args:\n        granules (List[dict]): The granules to download.\n        out_dir (str, optional): The output directory where the granules will be\n            downloaded. Defaults to None (current directory).\n        threads (int, optional): The number of threads to use for downloading.\n            Defaults to 8.\n    \"\"\"\n\n    download_nasa_data(granules=granules, out_dir=out_dir, threads=threads)\n</code></pre>"},{"location":"common/#hypercoast.common.extract_date_from_filename","title":"<code>extract_date_from_filename(filename)</code>","text":"<p>Extracts a date from a filename assuming the date is in 'YYYYMMDD' format.</p> <p>This function searches the filename for a sequence of 8 digits that represent a date in 'YYYYMMDD' format. If such a sequence is found, it converts the sequence into a pandas Timestamp object. If no such sequence is found, the function returns None.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The filename from which to extract the date.</p> required <p>Returns:</p> Type Description <code>Optional[pd.Timestamp]</code> <p>A pandas Timestamp object representing the date found in the filename, or None if no date in 'YYYYMMDD' format is found.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; extract_date_from_filename(\"example_20230101.txt\")\nTimestamp('2023-01-01 00:00:00')\n</code></pre> <pre><code>&gt;&gt;&gt; extract_date_from_filename(\"no_date_in_this_filename.txt\")\nNone\n</code></pre> Source code in <code>hypercoast/common.py</code> <pre><code>def extract_date_from_filename(filename: str):\n    \"\"\"\n    Extracts a date from a filename assuming the date is in 'YYYYMMDD' format.\n\n    This function searches the filename for a sequence of 8 digits that represent a date in\n    'YYYYMMDD' format. If such a sequence is found, it converts the sequence into a pandas\n    Timestamp object. If no such sequence is found, the function returns None.\n\n    Args:\n        filename (str): The filename from which to extract the date.\n\n    Returns:\n        Optional[pd.Timestamp]: A pandas Timestamp object representing the date found in the filename,\n        or None if no date in 'YYYYMMDD' format is found.\n\n    Examples:\n        &gt;&gt;&gt; extract_date_from_filename(\"example_20230101.txt\")\n        Timestamp('2023-01-01 00:00:00')\n\n        &gt;&gt;&gt; extract_date_from_filename(\"no_date_in_this_filename.txt\")\n        None\n    \"\"\"\n    import re\n    import pandas as pd\n\n    # Assuming the date format in filename is 'YYYYMMDD'\n    date_match = re.search(r\"\\d{8}\", filename)\n    if date_match:\n        return pd.to_datetime(date_match.group(), format=\"%Y%m%d\")\n    else:\n        return None\n</code></pre>"},{"location":"common/#hypercoast.common.github_raw_url","title":"<code>github_raw_url(url)</code>","text":"<p>Get the raw URL for a GitHub file.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The GitHub URL.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The raw URL.</p> Source code in <code>hypercoast/common.py</code> <pre><code>def github_raw_url(url):\n    \"\"\"Get the raw URL for a GitHub file.\n\n    Args:\n        url (str): The GitHub URL.\n    Returns:\n        str: The raw URL.\n    \"\"\"\n    if isinstance(url, str) and url.startswith(\"https://github.com/\") and \"blob\" in url:\n        url = url.replace(\"github.com\", \"raw.githubusercontent.com\").replace(\n            \"blob/\", \"\"\n        )\n    return url\n</code></pre>"},{"location":"common/#hypercoast.common.image_cube","title":"<code>image_cube(dataset, variable='reflectance', cmap='jet', clim=(0, 0.5), title='Reflectance', rgb_bands=None, rgb_wavelengths=None, rgb_gamma=1.0, rgb_cmap=None, rgb_clim=None, rgb_args={}, widget=None, plotter_args={}, show_axes=True, grid_origin=(0, 0, 0), grid_spacing=(1, 1, 1), **kwargs)</code>","text":"<p>Creates an image cube from a dataset and plots it using PyVista.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Union[str, xr.Dataset]</code> <p>The dataset to plot. Can be a path to a NetCDF file or an xarray Dataset.</p> required <code>variable</code> <code>str</code> <p>The variable to plot. Defaults to \"reflectance\".</p> <code>'reflectance'</code> <code>cmap</code> <code>str</code> <p>The colormap to use. Defaults to \"jet\".</p> <code>'jet'</code> <code>clim</code> <code>Tuple[float, float]</code> <p>The color limits. Defaults to (0, 0.5).</p> <code>(0, 0.5)</code> <code>title</code> <code>str</code> <p>The title for the scalar bar. Defaults to \"Reflectance\".</p> <code>'Reflectance'</code> <code>rgb_bands</code> <code>Optional[List[int]]</code> <p>The bands to use for the RGB image. Defaults to None.</p> <code>None</code> <code>rgb_wavelengths</code> <code>Optional[List[float]]</code> <p>The wavelengths to use for the RGB image. Defaults to None.</p> <code>None</code> <code>rgb_gamma</code> <code>float</code> <p>The gamma correction for the RGB image. Defaults to 1.</p> <code>1.0</code> <code>rgb_cmap</code> <code>Optional[str]</code> <p>The colormap to use for the RGB image. Defaults to None.</p> <code>None</code> <code>rgb_clim</code> <code>Optional[Tuple[float, float]]</code> <p>The color limits for the RGB image. Defaults to None.</p> <code>None</code> <code>rgb_args</code> <code>Dict[str, Any]</code> <p>Additional arguments for the <code>add_mesh</code> method for the RGB image. Defaults to {}.</p> <code>{}</code> <code>widget</code> <code>Optional[str]</code> <p>The widget to use for the image cube. Can be one of the following: \"box\", \"plane\", \"slice\", \"orthogonal\", and \"threshold\". Defaults to None.</p> <code>None</code> <code>plotter_args</code> <code>Dict[str, Any]</code> <p>Additional arguments for the <code>pv.Plotter</code> constructor. Defaults to {}.</p> <code>{}</code> <code>show_axes</code> <code>bool</code> <p>Whether to show the axes. Defaults to True.</p> <code>True</code> <code>grid_origin</code> <code>Tuple[float, float, float]</code> <p>The origin of the grid. Defaults to (0, 0, 0).</p> <code>(0, 0, 0)</code> <code>grid_spacing</code> <code>Tuple[float, float, float]</code> <p>The spacing of the grid.</p> <code>(1, 1, 1)</code> <code>**kwargs</code> <code>Dict[str, Any]</code> <p>Additional arguments for the <code>add_mesh</code> method. Defaults to {}.</p> <code>{}</code> <p>Returns:</p> Type Description <code>pv.Plotter</code> <p>The PyVista Plotter with the image cube added.</p> Source code in <code>hypercoast/common.py</code> <pre><code>def image_cube(\n    dataset,\n    variable: str = \"reflectance\",\n    cmap: str = \"jet\",\n    clim: Tuple[float, float] = (0, 0.5),\n    title: str = \"Reflectance\",\n    rgb_bands: Optional[List[int]] = None,\n    rgb_wavelengths: Optional[List[float]] = None,\n    rgb_gamma: float = 1.0,\n    rgb_cmap: Optional[str] = None,\n    rgb_clim: Optional[Tuple[float, float]] = None,\n    rgb_args: Dict[str, Any] = {},\n    widget=None,\n    plotter_args: Dict[str, Any] = {},\n    show_axes: bool = True,\n    grid_origin=(0, 0, 0),\n    grid_spacing=(1, 1, 1),\n    **kwargs: Any,\n):\n    \"\"\"\n    Creates an image cube from a dataset and plots it using PyVista.\n\n    Args:\n        dataset (Union[str, xr.Dataset]): The dataset to plot. Can be a path to\n            a NetCDF file or an xarray Dataset.\n        variable (str, optional): The variable to plot. Defaults to \"reflectance\".\n        cmap (str, optional): The colormap to use. Defaults to \"jet\".\n        clim (Tuple[float, float], optional): The color limits. Defaults to (0, 0.5).\n        title (str, optional): The title for the scalar bar. Defaults to \"Reflectance\".\n        rgb_bands (Optional[List[int]], optional): The bands to use for the RGB\n            image. Defaults to None.\n        rgb_wavelengths (Optional[List[float]], optional): The wavelengths to\n            use for the RGB image. Defaults to None.\n        rgb_gamma (float, optional): The gamma correction for the RGB image.\n            Defaults to 1.\n        rgb_cmap (Optional[str], optional): The colormap to use for the RGB image.\n            Defaults to None.\n        rgb_clim (Optional[Tuple[float, float]], optional): The color limits for\n            the RGB image. Defaults to None.\n        rgb_args (Dict[str, Any], optional): Additional arguments for the\n            `add_mesh` method for the RGB image. Defaults to {}.\n        widget (Optional[str], optional): The widget to use for the image cube.\n            Can be one of the following: \"box\", \"plane\", \"slice\", \"orthogonal\",\n            and \"threshold\". Defaults to None.\n        plotter_args (Dict[str, Any], optional): Additional arguments for the\n            `pv.Plotter` constructor. Defaults to {}.\n        show_axes (bool, optional): Whether to show the axes. Defaults to True.\n        grid_origin (Tuple[float, float, float], optional): The origin of the grid.\n            Defaults to (0, 0, 0).\n        grid_spacing (Tuple[float, float, float], optional): The spacing of the grid.\n        **kwargs (Dict[str, Any], optional): Additional arguments for the\n            `add_mesh` method. Defaults to {}.\n\n    Returns:\n        pv.Plotter: The PyVista Plotter with the image cube added.\n    \"\"\"\n\n    import pyvista as pv\n    import xarray as xr\n\n    allowed_widgets = [\"box\", \"plane\", \"slice\", \"orthogonal\", \"threshold\"]\n\n    if widget is not None:\n        if widget not in allowed_widgets:\n            raise ValueError(f\"widget must be one of the following: {allowed_widgets}\")\n\n    if isinstance(dataset, str):\n        dataset = xr.open_dataset(dataset)\n\n    da = dataset[variable]  # xarray DataArray\n    values = da.to_numpy()\n\n    # Create the spatial reference for the image cube\n    grid = pv.ImageData()\n\n    # Set the grid dimensions: shape because we want to inject our values on the POINT data\n    grid.dimensions = values.shape\n\n    # Edit the spatial reference\n    grid.origin = grid_origin  # The bottom left corner of the data set\n    grid.spacing = grid_spacing  # These are the cell sizes along each axis\n\n    # Add the data values to the cell data\n    grid.point_data[\"values\"] = values.flatten(order=\"F\")  # Flatten the array\n\n    # Plot the image cube with the RGB image overlay\n    p = pv.Plotter(**plotter_args)\n\n    if \"scalar_bar_args\" not in kwargs:\n        kwargs[\"scalar_bar_args\"] = {\"title\": title}\n    else:\n        kwargs[\"scalar_bar_args\"][\"title\"] = title\n\n    if \"show_edges\" not in kwargs:\n        kwargs[\"show_edges\"] = False\n\n    if widget == \"box\":\n        p.add_mesh_clip_box(grid, cmap=cmap, clim=clim, **kwargs)\n    elif widget == \"plane\":\n        if \"normal\" not in kwargs:\n            kwargs[\"normal\"] = (0, 0, 1)\n        if \"invert\" not in kwargs:\n            kwargs[\"invert\"] = True\n        if \"normal_rotation\" not in kwargs:\n            kwargs[\"normal_rotation\"] = False\n        p.add_mesh_clip_plane(grid, cmap=cmap, clim=clim, **kwargs)\n    elif widget == \"slice\":\n        if \"normal\" not in kwargs:\n            kwargs[\"normal\"] = (0, 0, 1)\n        if \"normal_rotation\" not in kwargs:\n            kwargs[\"normal_rotation\"] = False\n        p.add_mesh_slice(grid, cmap=cmap, clim=clim, **kwargs)\n    elif widget == \"orthogonal\":\n        p.add_mesh_slice_orthogonal(grid, cmap=cmap, clim=clim, **kwargs)\n    elif widget == \"threshold\":\n        p.add_mesh_threshold(grid, cmap=cmap, clim=clim, **kwargs)\n    else:\n        p.add_mesh(grid, cmap=cmap, clim=clim, **kwargs)\n\n    if rgb_bands is not None or rgb_wavelengths is not None:\n\n        if rgb_bands is not None:\n            rgb_image = dataset.isel(wavelength=rgb_bands, method=\"nearest\")[\n                variable\n            ].to_numpy()\n        elif rgb_wavelengths is not None:\n            rgb_image = dataset.sel(wavelength=rgb_wavelengths, method=\"nearest\")[\n                variable\n            ].to_numpy()\n\n        x_dim, y_dim = rgb_image.shape[0], rgb_image.shape[1]\n        z_dim = 1\n        im = pv.ImageData(dimensions=(x_dim, y_dim, z_dim))\n\n        # Add scalar data, you may also need to flatten this\n        im.point_data[\"rgb_image\"] = (\n            rgb_image.reshape(-1, rgb_image.shape[2], order=\"F\") * rgb_gamma\n        )\n\n        grid_z_max = grid.bounds[5]\n        im.origin = (0, 0, grid_z_max)\n\n        if rgb_image.shape[2] &lt; 3:\n            if rgb_cmap is None:\n                rgb_cmap = cmap\n            if rgb_clim is None:\n                rgb_clim = clim\n\n            if \"cmap\" not in rgb_args:\n                rgb_args[\"cmap\"] = rgb_cmap\n            if \"clim\" not in rgb_args:\n                rgb_args[\"clim\"] = rgb_clim\n        else:\n            if \"rgb\" not in rgb_args:\n                rgb_args[\"rgb\"] = True\n\n        if \"show_scalar_bar\" not in rgb_args:\n            rgb_args[\"show_scalar_bar\"] = False\n        if \"show_edges\" not in rgb_args:\n            rgb_args[\"show_edges\"] = False\n\n        p.add_mesh(im, **rgb_args)\n\n    if show_axes:\n        p.show_axes()\n\n    return p\n</code></pre>"},{"location":"common/#hypercoast.common.nasa_earth_login","title":"<code>nasa_earth_login(strategy='all', persist=True, **kwargs)</code>","text":"<p>Logs in to NASA Earthdata.</p> <p>Parameters:</p> Name Type Description Default <code>strategy</code> <code>str</code> <p>The login strategy. Defaults to \"all\".</p> <code>'all'</code> <code>persist</code> <code>bool</code> <p>Whether to persist the login. Defaults to True.</p> <code>True</code> Source code in <code>hypercoast/common.py</code> <pre><code>def nasa_earth_login(strategy: str = \"all\", persist: bool = True, **kwargs) -&gt; None:\n    \"\"\"Logs in to NASA Earthdata.\n\n    Args:\n        strategy (str, optional): The login strategy. Defaults to \"all\".\n        persist (bool, optional): Whether to persist the login. Defaults to True.\n    \"\"\"\n\n    leafmap.nasa_data_login(strategy=strategy, persist=persist, **kwargs)\n</code></pre>"},{"location":"common/#hypercoast.common.netcdf_groups","title":"<code>netcdf_groups(filepath)</code>","text":"<p>Get the list of groups in a NetCDF file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the NetCDF file.</p> required <p>Returns:</p> Type Description <code>list</code> <p>A list of group names in the NetCDF file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; netcdf_groups('path/to/netcdf/file')\n['group1', 'group2', 'group3']\n</code></pre> Source code in <code>hypercoast/common.py</code> <pre><code>def netcdf_groups(filepath: str) -&gt; List[str]:\n    \"\"\"\n    Get the list of groups in a NetCDF file.\n\n    Args:\n        filepath (str): The path to the NetCDF file.\n\n    Returns:\n        list: A list of group names in the NetCDF file.\n\n    Example:\n        &gt;&gt;&gt; netcdf_groups('path/to/netcdf/file')\n        ['group1', 'group2', 'group3']\n    \"\"\"\n    import h5netcdf\n\n    with h5netcdf.File(filepath) as file:\n        groups = list(file)\n    return groups\n</code></pre>"},{"location":"common/#hypercoast.common.open_dataset","title":"<code>open_dataset(filename, engine=None, chunks=None, **kwargs)</code>","text":"<p>Opens and returns an xarray Dataset from a file.</p> <p>This function is a wrapper around <code>xarray.open_dataset</code> that allows for additional customization through keyword arguments.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the file to open.</p> required <code>engine</code> <code>Optional[str]</code> <p>Name of the engine to use for reading the file. If None, xarray's default engine is used. Examples include 'netcdf4', 'h5netcdf', 'zarr', etc.</p> <code>None</code> <code>chunks</code> <code>Optional[Dict[str, int]]</code> <p>Dictionary specifying how to chunk the dataset along each dimension. For example, <code>{'time': 1}</code> would load the dataset in single-time-step chunks. If None, the dataset is not chunked.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments passed to <code>xarray.open_dataset</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.Dataset</code> <p>The opened dataset.</p> <p>Examples:</p> <p>Open a NetCDF file without chunking:</p> <pre><code>&gt;&gt;&gt; dataset = open_dataset('path/to/file.nc')\n</code></pre> <p>Open a Zarr dataset, chunking along the 'time' dimension:</p> <pre><code>&gt;&gt;&gt; dataset = open_dataset('path/to/dataset.zarr', engine='zarr', chunks={'time': 10})\n</code></pre> Source code in <code>hypercoast/common.py</code> <pre><code>def open_dataset(\n    filename: str,\n    engine: Optional[str] = None,\n    chunks: Optional[Dict[str, int]] = None,\n    **kwargs: Any,\n) -&gt; xr.Dataset:\n    \"\"\"\n    Opens and returns an xarray Dataset from a file.\n\n    This function is a wrapper around `xarray.open_dataset` that allows for additional\n    customization through keyword arguments.\n\n    Args:\n        filename (str): Path to the file to open.\n        engine (Optional[str]): Name of the engine to use for reading the file. If None, xarray's\n            default engine is used. Examples include 'netcdf4', 'h5netcdf', 'zarr', etc.\n        chunks (Optional[Dict[str, int]]): Dictionary specifying how to chunk the dataset along each dimension.\n            For example, `{'time': 1}` would load the dataset in single-time-step chunks. If None,\n            the dataset is not chunked.\n        **kwargs: Additional keyword arguments passed to `xarray.open_dataset`.\n\n    Returns:\n        xr.Dataset: The opened dataset.\n\n    Examples:\n        Open a NetCDF file without chunking:\n        &gt;&gt;&gt; dataset = open_dataset('path/to/file.nc')\n\n        Open a Zarr dataset, chunking along the 'time' dimension:\n        &gt;&gt;&gt; dataset = open_dataset('path/to/dataset.zarr', engine='zarr', chunks={'time': 10})\n    \"\"\"\n\n    try:\n        dataset = xr.open_dataset(filename, engine=engine, chunks=chunks, **kwargs)\n    except Exception as e:\n        dataset = xr.open_dataset(filename, engine=\"h5netcdf\", chunks=chunks, **kwargs)\n\n    return dataset\n</code></pre>"},{"location":"common/#hypercoast.common.search_datasets","title":"<code>search_datasets(count=-1, **kwargs)</code>","text":"<p>Searches for datasets using the EarthAccess API with optional filters.</p> <p>This function wraps the <code>earthaccess.search_datasets</code> function, allowing for customized search queries based on a count limit and additional keyword arguments which serve as filters for the search.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The maximum number of datasets to return. A value of -1 indicates no limit. Defaults to -1.</p> <code>-1</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass as search filters to the EarthAccess API. keyword: case-insensitive and supports wildcards ? and * short_name: e.g. ATL08 doi: DOI for a dataset daac: e.g. NSIDC or PODAAC provider: particular to each DAAC, e.g. POCLOUD, LPDAAC etc. temporal: a tuple representing temporal bounds in the form (date_from, date_to) bounding_box: a tuple representing spatial bounds in the form (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat)</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> <p>A list of dictionaries, where each dictionary contains     information about a dataset found in the search.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; results = search_datasets(count=5, keyword='temperature')\n&gt;&gt;&gt; print(results)\n</code></pre> Source code in <code>hypercoast/common.py</code> <pre><code>def search_datasets(count: int = -1, **kwargs: Any) -&gt; List[Dict[str, Any]]:\n    \"\"\"\n    Searches for datasets using the EarthAccess API with optional filters.\n\n    This function wraps the `earthaccess.search_datasets` function, allowing for\n    customized search queries based on a count limit and additional keyword arguments\n    which serve as filters for the search.\n\n    Args:\n        count (int, optional): The maximum number of datasets to return. A value of -1\n            indicates no limit. Defaults to -1.\n        **kwargs (Any): Additional keyword arguments to pass as search filters to the\n            EarthAccess API.\n            keyword: case-insensitive and supports wildcards ? and *\n            short_name: e.g. ATL08\n            doi: DOI for a dataset\n            daac: e.g. NSIDC or PODAAC\n            provider: particular to each DAAC, e.g. POCLOUD, LPDAAC etc.\n            temporal: a tuple representing temporal bounds in the form (date_from, date_to)\n            bounding_box: a tuple representing spatial bounds in the form\n            (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat)\n\n\n    Returns:\n        List[Dict[str, Any]]: A list of dictionaries, where each dictionary contains\n            information about a dataset found in the search.\n\n    Example:\n        &gt;&gt;&gt; results = search_datasets(count=5, keyword='temperature')\n        &gt;&gt;&gt; print(results)\n    \"\"\"\n\n    import earthaccess\n\n    return earthaccess.search_datasets(count=count, **kwargs)\n</code></pre>"},{"location":"common/#hypercoast.common.search_ecostress","title":"<code>search_ecostress(bbox=None, temporal=None, count=-1, short_name='ECO_L2T_LSTE', output=None, crs='EPSG:4326', return_gdf=False, **kwargs)</code>","text":"<p>Searches for NASA ECOSTRESS granules.</p> <p>Parameters:</p> Name Type Description Default <code>bbox</code> <code>List[float]</code> <p>The bounding box coordinates [xmin, ymin, xmax, ymax].</p> <code>None</code> <code>temporal</code> <code>str</code> <p>The temporal extent of the data.</p> <code>None</code> <code>count</code> <code>int</code> <p>The number of granules to retrieve. Defaults to -1 (retrieve all).</p> <code>-1</code> <code>short_name</code> <code>str</code> <p>The short name of the dataset. Defaults to \"ECO_L2T_LSTE\".</p> <code>'ECO_L2T_LSTE'</code> <code>output</code> <code>str</code> <p>The output file path to save the GeoDataFrame as a file.</p> <code>None</code> <code>crs</code> <code>str</code> <p>The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".</p> <code>'EPSG:4326'</code> <code>return_gdf</code> <code>bool</code> <p>Whether to return the GeoDataFrame in addition to the granules. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Additional keyword arguments for the earthaccess.search_data() function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[List[dict], tuple]</code> <p>The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.</p> Source code in <code>hypercoast/common.py</code> <pre><code>def search_ecostress(\n    bbox: Optional[List[float]] = None,\n    temporal: Optional[str] = None,\n    count: int = -1,\n    short_name: Optional[str] = \"ECO_L2T_LSTE\",\n    output: Optional[str] = None,\n    crs: str = \"EPSG:4326\",\n    return_gdf: bool = False,\n    **kwargs,\n) -&gt; Union[List[dict], tuple]:\n    \"\"\"Searches for NASA ECOSTRESS granules.\n\n    Args:\n        bbox (List[float], optional): The bounding box coordinates [xmin, ymin, xmax, ymax].\n        temporal (str, optional): The temporal extent of the data.\n        count (int, optional): The number of granules to retrieve. Defaults to -1 (retrieve all).\n        short_name (str, optional): The short name of the dataset. Defaults to \"ECO_L2T_LSTE\".\n        output (str, optional): The output file path to save the GeoDataFrame as a file.\n        crs (str, optional): The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".\n        return_gdf (bool, optional): Whether to return the GeoDataFrame in addition to the granules. Defaults to False.\n        **kwargs: Additional keyword arguments for the earthaccess.search_data() function.\n\n    Returns:\n        Union[List[dict], tuple]: The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.\n    \"\"\"\n\n    return search_nasa_data(\n        count=count,\n        short_name=short_name,\n        bbox=bbox,\n        temporal=temporal,\n        output=output,\n        crs=crs,\n        return_gdf=return_gdf,\n        **kwargs,\n    )\n</code></pre>"},{"location":"common/#hypercoast.common.search_emit","title":"<code>search_emit(bbox=None, temporal=None, count=-1, short_name='EMITL2ARFL', output=None, crs='EPSG:4326', return_gdf=False, **kwargs)</code>","text":"<p>Searches for NASA EMIT granules.</p> <p>Parameters:</p> Name Type Description Default <code>bbox</code> <code>List[float]</code> <p>The bounding box coordinates [xmin, ymin, xmax, ymax].</p> <code>None</code> <code>temporal</code> <code>str</code> <p>The temporal extent of the data.</p> <code>None</code> <code>count</code> <code>int</code> <p>The number of granules to retrieve. Defaults to -1 (retrieve all).</p> <code>-1</code> <code>short_name</code> <code>str</code> <p>The short name of the dataset. Defaults to \"EMITL2ARFL\".</p> <code>'EMITL2ARFL'</code> <code>output</code> <code>str</code> <p>The output file path to save the GeoDataFrame as a file.</p> <code>None</code> <code>crs</code> <code>str</code> <p>The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".</p> <code>'EPSG:4326'</code> <code>return_gdf</code> <code>bool</code> <p>Whether to return the GeoDataFrame in addition to the granules. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Additional keyword arguments for the earthaccess.search_data() function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[List[dict], tuple]</code> <p>The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.</p> Source code in <code>hypercoast/common.py</code> <pre><code>def search_emit(\n    bbox: Optional[List[float]] = None,\n    temporal: Optional[str] = None,\n    count: int = -1,\n    short_name: Optional[str] = \"EMITL2ARFL\",\n    output: Optional[str] = None,\n    crs: str = \"EPSG:4326\",\n    return_gdf: bool = False,\n    **kwargs,\n) -&gt; Union[List[dict], tuple]:\n    \"\"\"Searches for NASA EMIT granules.\n\n    Args:\n        bbox (List[float], optional): The bounding box coordinates [xmin, ymin, xmax, ymax].\n        temporal (str, optional): The temporal extent of the data.\n        count (int, optional): The number of granules to retrieve. Defaults to -1 (retrieve all).\n        short_name (str, optional): The short name of the dataset. Defaults to \"EMITL2ARFL\".\n        output (str, optional): The output file path to save the GeoDataFrame as a file.\n        crs (str, optional): The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".\n        return_gdf (bool, optional): Whether to return the GeoDataFrame in addition to the granules. Defaults to False.\n        **kwargs: Additional keyword arguments for the earthaccess.search_data() function.\n\n    Returns:\n        Union[List[dict], tuple]: The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.\n    \"\"\"\n\n    return search_nasa_data(\n        count=count,\n        short_name=short_name,\n        bbox=bbox,\n        temporal=temporal,\n        output=output,\n        crs=crs,\n        return_gdf=return_gdf,\n        **kwargs,\n    )\n</code></pre>"},{"location":"common/#hypercoast.common.search_nasa_data","title":"<code>search_nasa_data(count=-1, short_name=None, bbox=None, temporal=None, version=None, doi=None, daac=None, provider=None, output=None, crs='EPSG:4326', return_gdf=False, **kwargs)</code>","text":"<p>Searches for NASA Earthdata granules.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>The number of granules to retrieve. Defaults to -1 (retrieve all).</p> <code>-1</code> <code>short_name</code> <code>str</code> <p>The short name of the dataset.</p> <code>None</code> <code>bbox</code> <code>List[float]</code> <p>The bounding box coordinates [xmin, ymin, xmax, ymax].</p> <code>None</code> <code>temporal</code> <code>str</code> <p>The temporal extent of the data.</p> <code>None</code> <code>version</code> <code>str</code> <p>The version of the dataset.</p> <code>None</code> <code>doi</code> <code>str</code> <p>The Digital Object Identifier (DOI) of the dataset.</p> <code>None</code> <code>daac</code> <code>str</code> <p>The Distributed Active Archive Center (DAAC) of the dataset.</p> <code>None</code> <code>provider</code> <code>str</code> <p>The provider of the dataset.</p> <code>None</code> <code>output</code> <code>str</code> <p>The output file path to save the GeoDataFrame as a file.</p> <code>None</code> <code>crs</code> <code>str</code> <p>The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".</p> <code>'EPSG:4326'</code> <code>return_gdf</code> <code>bool</code> <p>Whether to return the GeoDataFrame in addition to the granules. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Additional keyword arguments for the earthaccess.search_data() function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[List[dict], tuple]</code> <p>The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.</p> Source code in <code>hypercoast/common.py</code> <pre><code>def search_nasa_data(\n    count: int = -1,\n    short_name: Optional[str] = None,\n    bbox: Optional[List[float]] = None,\n    temporal: Optional[str] = None,\n    version: Optional[str] = None,\n    doi: Optional[str] = None,\n    daac: Optional[str] = None,\n    provider: Optional[str] = None,\n    output: Optional[str] = None,\n    crs: str = \"EPSG:4326\",\n    return_gdf: bool = False,\n    **kwargs,\n) -&gt; Union[List[dict], tuple]:\n    \"\"\"Searches for NASA Earthdata granules.\n\n    Args:\n        count (int, optional): The number of granules to retrieve. Defaults to -1 (retrieve all).\n        short_name (str, optional): The short name of the dataset.\n        bbox (List[float], optional): The bounding box coordinates [xmin, ymin, xmax, ymax].\n        temporal (str, optional): The temporal extent of the data.\n        version (str, optional): The version of the dataset.\n        doi (str, optional): The Digital Object Identifier (DOI) of the dataset.\n        daac (str, optional): The Distributed Active Archive Center (DAAC) of the dataset.\n        provider (str, optional): The provider of the dataset.\n        output (str, optional): The output file path to save the GeoDataFrame as a file.\n        crs (str, optional): The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".\n        return_gdf (bool, optional): Whether to return the GeoDataFrame in addition to the granules. Defaults to False.\n        **kwargs: Additional keyword arguments for the earthaccess.search_data() function.\n\n    Returns:\n        Union[List[dict], tuple]: The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.\n    \"\"\"\n\n    if isinstance(bbox, list):\n        bbox = tuple(bbox)\n\n    return leafmap.nasa_data_search(\n        count=count,\n        short_name=short_name,\n        bbox=bbox,\n        temporal=temporal,\n        version=version,\n        doi=doi,\n        daac=daac,\n        provider=provider,\n        output=output,\n        crs=crs,\n        return_gdf=return_gdf,\n        **kwargs,\n    )\n</code></pre>"},{"location":"common/#hypercoast.common.search_pace","title":"<code>search_pace(bbox=None, temporal=None, count=-1, short_name='PACE_OCI_L2_AOP_NRT', output=None, crs='EPSG:4326', return_gdf=False, **kwargs)</code>","text":"<p>Searches for NASA PACE granules.</p> <p>Parameters:</p> Name Type Description Default <code>bbox</code> <code>List[float]</code> <p>The bounding box coordinates [xmin, ymin, xmax, ymax].</p> <code>None</code> <code>temporal</code> <code>str</code> <p>The temporal extent of the data.</p> <code>None</code> <code>count</code> <code>int</code> <p>The number of granules to retrieve. Defaults to -1 (retrieve all).</p> <code>-1</code> <code>short_name</code> <code>str</code> <p>The short name of the dataset. Defaults to \"PACE_OCI_L2_AOP_NRT\".</p> <code>'PACE_OCI_L2_AOP_NRT'</code> <code>output</code> <code>str</code> <p>The output file path to save the GeoDataFrame as a file.</p> <code>None</code> <code>crs</code> <code>str</code> <p>The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".</p> <code>'EPSG:4326'</code> <code>return_gdf</code> <code>bool</code> <p>Whether to return the GeoDataFrame in addition to the granules. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Additional keyword arguments for the earthaccess.search_data() function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[List[dict], tuple]</code> <p>The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.</p> Source code in <code>hypercoast/common.py</code> <pre><code>def search_pace(\n    bbox: Optional[List[float]] = None,\n    temporal: Optional[str] = None,\n    count: int = -1,\n    short_name: Optional[str] = \"PACE_OCI_L2_AOP_NRT\",\n    output: Optional[str] = None,\n    crs: str = \"EPSG:4326\",\n    return_gdf: bool = False,\n    **kwargs,\n) -&gt; Union[List[dict], tuple]:\n    \"\"\"Searches for NASA PACE granules.\n\n    Args:\n        bbox (List[float], optional): The bounding box coordinates [xmin, ymin, xmax, ymax].\n        temporal (str, optional): The temporal extent of the data.\n        count (int, optional): The number of granules to retrieve. Defaults to -1 (retrieve all).\n        short_name (str, optional): The short name of the dataset. Defaults to \"PACE_OCI_L2_AOP_NRT\".\n        output (str, optional): The output file path to save the GeoDataFrame as a file.\n        crs (str, optional): The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".\n        return_gdf (bool, optional): Whether to return the GeoDataFrame in addition to the granules. Defaults to False.\n        **kwargs: Additional keyword arguments for the earthaccess.search_data() function.\n\n    Returns:\n        Union[List[dict], tuple]: The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.\n    \"\"\"\n\n    return search_nasa_data(\n        count=count,\n        short_name=short_name,\n        bbox=bbox,\n        temporal=temporal,\n        output=output,\n        crs=crs,\n        return_gdf=return_gdf,\n        **kwargs,\n    )\n</code></pre>"},{"location":"common/#hypercoast.common.search_pace_chla","title":"<code>search_pace_chla(bbox=None, temporal=None, count=-1, short_name='PACE_OCI_L3M_CHL_NRT', granule_name='*.DAY.*.0p1deg.*', output=None, crs='EPSG:4326', return_gdf=False, **kwargs)</code>","text":"<p>Searches for NASA PACE Chlorophyll granules.</p> <p>Parameters:</p> Name Type Description Default <code>bbox</code> <code>List[float]</code> <p>The bounding box coordinates [xmin, ymin, xmax, ymax].</p> <code>None</code> <code>temporal</code> <code>str</code> <p>The temporal extent of the data.</p> <code>None</code> <code>count</code> <code>int</code> <p>The number of granules to retrieve. Defaults to -1 (retrieve all).</p> <code>-1</code> <code>short_name</code> <code>str</code> <p>The short name of the dataset. Defaults to \"PACE_OCI_L3M_CHL_NRT\".</p> <code>'PACE_OCI_L3M_CHL_NRT'</code> <code>output</code> <code>str</code> <p>The output file path to save the GeoDataFrame as a file.</p> <code>None</code> <code>crs</code> <code>str</code> <p>The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".</p> <code>'EPSG:4326'</code> <code>return_gdf</code> <code>bool</code> <p>Whether to return the GeoDataFrame in addition to the granules. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Additional keyword arguments for the earthaccess.search_data() function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[List[dict], tuple]</code> <p>The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.</p> Source code in <code>hypercoast/common.py</code> <pre><code>def search_pace_chla(\n    bbox: Optional[List[float]] = None,\n    temporal: Optional[str] = None,\n    count: int = -1,\n    short_name: Optional[str] = \"PACE_OCI_L3M_CHL_NRT\",\n    granule_name: Optional[str] = \"*.DAY.*.0p1deg.*\",\n    output: Optional[str] = None,\n    crs: str = \"EPSG:4326\",\n    return_gdf: bool = False,\n    **kwargs,\n) -&gt; Union[List[dict], tuple]:\n    \"\"\"Searches for NASA PACE Chlorophyll granules.\n\n    Args:\n        bbox (List[float], optional): The bounding box coordinates [xmin, ymin, xmax, ymax].\n        temporal (str, optional): The temporal extent of the data.\n        count (int, optional): The number of granules to retrieve. Defaults to -1 (retrieve all).\n        short_name (str, optional): The short name of the dataset. Defaults to \"PACE_OCI_L3M_CHL_NRT\".\n        output (str, optional): The output file path to save the GeoDataFrame as a file.\n        crs (str, optional): The coordinate reference system (CRS) of the GeoDataFrame. Defaults to \"EPSG:4326\".\n        return_gdf (bool, optional): Whether to return the GeoDataFrame in addition to the granules. Defaults to False.\n        **kwargs: Additional keyword arguments for the earthaccess.search_data() function.\n\n    Returns:\n        Union[List[dict], tuple]: The retrieved granules. If return_gdf is True, also returns the resulting GeoDataFrame.\n    \"\"\"\n\n    return search_nasa_data(\n        count=count,\n        short_name=short_name,\n        bbox=bbox,\n        temporal=temporal,\n        granule_name=granule_name,\n        output=output,\n        crs=crs,\n        return_gdf=return_gdf,\n        **kwargs,\n    )\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/opengeos/HyperCoast/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>HyperCoast could always use more documentation, whether as part of the official HyperCoast docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/opengeos/HyperCoast/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up HyperCoast for local development.</p> <ol> <li> <p>Fork the HyperCoast repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/HyperCoast.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv HyperCoast\n$ cd HyperCoast/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 HyperCoast tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/opengeos/HyperCoast/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"desis/","title":"desis module","text":"<p>This Module has the functions related to working with a DESIS dataset.</p>"},{"location":"desis/#hypercoast.desis.desis_to_image","title":"<code>desis_to_image(dataset, wavelengths=None, method='nearest', output=None, **kwargs)</code>","text":"<p>Converts an DESIS dataset to an image.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>xarray.Dataset or str</code> <p>The dataset containing the DESIS data or the file path to the dataset.</p> required <code>wavelengths</code> <code>array-like</code> <p>The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for data interpolation. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>output</code> <code>str</code> <p>The file path where the image will be saved. If None, the image will be returned as a PIL Image object. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to <code>leafmap.array_to_image</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>rasterio.Dataset or None</code> <p>The image converted from the dataset. If     <code>output</code> is provided, the image will be saved to the specified file     and the function will return None.</p> Source code in <code>hypercoast/desis.py</code> <pre><code>def desis_to_image(dataset, wavelengths=None, method=\"nearest\", output=None, **kwargs):\n    \"\"\"\n    Converts an DESIS dataset to an image.\n\n    Args:\n        dataset (xarray.Dataset or str): The dataset containing the DESIS data\n            or the file path to the dataset.\n        wavelengths (array-like, optional): The specific wavelengths to select.\n            If None, all wavelengths are selected. Defaults to None.\n        method (str, optional): The method to use for data interpolation.\n            Defaults to \"nearest\".\n        output (str, optional): The file path where the image will be saved. If\n            None, the image will be returned as a PIL Image object. Defaults to None.\n        **kwargs: Additional keyword arguments to be passed to\n            `leafmap.array_to_image`.\n\n    Returns:\n        rasterio.Dataset or None: The image converted from the dataset. If\n            `output` is provided, the image will be saved to the specified file\n            and the function will return None.\n    \"\"\"\n    from leafmap import array_to_image\n\n    if isinstance(dataset, str):\n        dataset = read_desis(dataset, method=method)\n\n    if wavelengths is not None:\n        dataset = dataset.sel(wavelength=wavelengths, method=method)\n\n    return array_to_image(\n        dataset[\"reflectance\"], output=output, transpose=False, **kwargs\n    )\n</code></pre>"},{"location":"desis/#hypercoast.desis.extract_desis","title":"<code>extract_desis(ds, lat, lon)</code>","text":"<p>Extracts DESIS data from a given xarray Dataset.</p> <p>Parameters:</p> Name Type Description Default <code>ds</code> <code>xarray.Dataset</code> <p>The dataset containing the DESIS data.</p> required <code>lat</code> <code>float</code> <p>The latitude of the point to extract.</p> required <code>lon</code> <code>float</code> <p>The longitude of the point to extract.</p> required <p>Returns:</p> Type Description <code>xarray.DataArray</code> <p>The extracted data.</p> Source code in <code>hypercoast/desis.py</code> <pre><code>def extract_desis(ds, lat, lon):\n    \"\"\"\n    Extracts DESIS data from a given xarray Dataset.\n\n    Args:\n        ds (xarray.Dataset): The dataset containing the DESIS data.\n        lat (float): The latitude of the point to extract.\n        lon (float): The longitude of the point to extract.\n\n    Returns:\n        xarray.DataArray: The extracted data.\n    \"\"\"\n\n    crs = ds.attrs[\"crs\"]\n\n    x, y = convert_coords([[lat, lon]], \"epsg:4326\", crs)[0]\n\n    values = ds.sel(x=x, y=y, method=\"nearest\")[\"reflectance\"].values / 10000\n\n    da = xr.DataArray(\n        values, dims=[\"wavelength\"], coords={\"wavelength\": ds.coords[\"wavelength\"]}\n    )\n\n    return da\n</code></pre>"},{"location":"desis/#hypercoast.desis.filter_desis","title":"<code>filter_desis(dataset, lat, lon, return_plot=False, **kwargs)</code>","text":"<p>Filters a DESIS dataset based on latitude and longitude.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>xr.Dataset</code> <p>The DESIS dataset to filter.</p> required <code>lat</code> <code>float or tuple</code> <p>The latitude to filter by. If a tuple or list, it represents a range.</p> required <code>lon</code> <code>float or tuple</code> <p>The longitude to filter by. If a tuple or list, it represents a range.</p> required <p>Returns:</p> Type Description <code>xr.DataArray</code> <p>The filtered DESIS data.</p> Source code in <code>hypercoast/desis.py</code> <pre><code>def filter_desis(dataset, lat, lon, return_plot=False, **kwargs):\n    \"\"\"\n    Filters a DESIS dataset based on latitude and longitude.\n\n    Args:\n        dataset (xr.Dataset): The DESIS dataset to filter.\n        lat (float or tuple): The latitude to filter by. If a tuple or list,\n            it represents a range.\n        lon (float or tuple): The longitude to filter by. If a tuple or\n            list, it represents a range.\n\n    Returns:\n        xr.DataArray: The filtered DESIS data.\n    \"\"\"\n\n    if isinstance(lat, list) or isinstance(lat, tuple):\n        min_lat = min(lat)\n        max_lat = max(lat)\n    else:\n        min_lat = lat\n        max_lat = lat\n\n    if isinstance(lon, list) or isinstance(lon, tuple):\n        min_lon = min(lon)\n        max_lon = max(lon)\n    else:\n        min_lon = lon\n        max_lon = lon\n\n    if min_lat == max_lat and min_lon == max_lon:\n        coords = [[min_lat, min_lon]]\n    else:\n        coords = [[min_lat, min_lon], [max_lat, max_lon]]\n    coords = convert_coords(coords, \"epsg:4326\", dataset.rio.crs.to_string())\n\n    if len(coords) == 1:\n        x, y = coords[0]\n        da = dataset.sel(x=x, y=y, method=\"nearest\")[\"reflectance\"]\n    else:\n        x_min, y_min = coords[0]\n        x_max, y_max = coords[1]\n        print(x_min, y_min, x_max, y_max)\n        da = dataset.sel(x=slice(x_min, x_max), y=slice(y_min, y_max))[\"reflectance\"]\n\n    if return_plot:\n        rrs_stack = da.stack(\n            {\"pixel\": [\"latitude\", \"longitude\"]},\n            create_index=False,\n        )\n        rrs_stack.plot.line(hue=\"pixel\", **kwargs)\n    else:\n        return da\n</code></pre>"},{"location":"desis/#hypercoast.desis.read_desis","title":"<code>read_desis(filepath, wavelengths=None, method='nearest', **kwargs)</code>","text":"<p>Reads DESIS data from a given file and returns an xarray Dataset.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to the file to read.</p> required <code>wavelengths</code> <code>array-like</code> <p>Specific wavelengths to select. If None, all wavelengths are selected.</p> <code>None</code> <code>method</code> <code>str</code> <p>Method to use for selection when wavelengths is not None. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the <code>sel</code> method when bands is not None.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.Dataset</code> <p>An xarray Dataset containing the DESIS data.</p> Source code in <code>hypercoast/desis.py</code> <pre><code>def read_desis(filepath, wavelengths=None, method=\"nearest\", **kwargs):\n    \"\"\"\n    Reads DESIS data from a given file and returns an xarray Dataset.\n\n    Args:\n        filepath (str): Path to the file to read.\n        wavelengths (array-like, optional): Specific wavelengths to select. If\n            None, all wavelengths are selected.\n        method (str, optional): Method to use for selection when wavelengths is not\n            None. Defaults to \"nearest\".\n        **kwargs: Additional keyword arguments to pass to the `sel` method when\n            bands is not None.\n\n    Returns:\n        xr.Dataset: An xarray Dataset containing the DESIS data.\n    \"\"\"\n\n    url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/desis_wavelengths.csv\"\n    df = pd.read_csv(url)\n    dataset = xr.open_dataset(filepath)\n    dataset = dataset.rename(\n        {\"band\": \"wavelength\", \"band_data\": \"reflectance\"}\n    ).transpose(\"y\", \"x\", \"wavelength\")\n    dataset[\"wavelength\"] = df[\"wavelength\"].tolist()\n\n    if wavelengths is not None:\n        dataset = dataset.sel(wavelength=wavelengths, method=method, **kwargs)\n\n    dataset.attrs[\"crs\"] = dataset.rio.crs.to_string()\n\n    return dataset\n</code></pre>"},{"location":"emit/","title":"emit module","text":"<p>This Module has the functions related to working with an EMIT dataset. This includes doing things like opening and flattening the data to work in xarray, orthorectification, and visualization.</p> <p>Some source code is adapted from https://github.com/nasa/EMIT-Data-Resources. Credits to the original authors, including Erik Bolch, Alex Leigh, and others.</p>"},{"location":"emit/#hypercoast.emit.apply_glt","title":"<code>apply_glt(ds_array, glt_array, fill_value=-9999, GLT_NODATA_VALUE=0)</code>","text":"<p>Applies the GLT array to a numpy array of either 2 or 3 dimensions to orthorectify the data.</p> <p>Parameters:</p> Name Type Description Default <code>ds_array</code> <code>numpy.ndarray</code> <p>A numpy array of the desired variable.</p> required <code>glt_array</code> <code>numpy.ndarray</code> <p>A GLT array constructed from EMIT GLT data.</p> required <code>fill_value</code> <code>int</code> <p>The value to fill in the output array where the GLT array has no data. Defaults to -9999.</p> <code>-9999</code> <code>GLT_NODATA_VALUE</code> <code>int</code> <p>The value in the GLT array that indicates no data. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>numpy.ndarray</code> <p>A numpy array of orthorectified data.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def apply_glt(ds_array, glt_array, fill_value=-9999, GLT_NODATA_VALUE=0):\n    \"\"\"\n    Applies the GLT array to a numpy array of either 2 or 3 dimensions to orthorectify the data.\n\n    Args:\n        ds_array (numpy.ndarray): A numpy array of the desired variable.\n        glt_array (numpy.ndarray): A GLT array constructed from EMIT GLT data.\n        fill_value (int, optional): The value to fill in the output array where the GLT array has no data. Defaults to -9999.\n        GLT_NODATA_VALUE (int, optional): The value in the GLT array that indicates no data. Defaults to 0.\n\n    Returns:\n        numpy.ndarray: A numpy array of orthorectified data.\n    \"\"\"\n\n    # Build Output Dataset\n    if ds_array.ndim == 2:\n        ds_array = ds_array[:, :, np.newaxis]\n    out_ds = np.full(\n        (glt_array.shape[0], glt_array.shape[1], ds_array.shape[-1]),\n        fill_value,\n        dtype=np.float32,\n    )\n    valid_glt = np.all(glt_array != GLT_NODATA_VALUE, axis=-1)\n\n    # Adjust for One based Index - make a copy to prevent decrementing multiple times inside ortho_xr when applying the glt to elev\n    glt_array_copy = glt_array.copy()\n    glt_array_copy[valid_glt] -= 1\n    out_ds[valid_glt, :] = ds_array[\n        glt_array_copy[valid_glt, 1], glt_array_copy[valid_glt, 0], :\n    ]\n    return out_ds\n</code></pre>"},{"location":"emit/#hypercoast.emit.band_mask","title":"<code>band_mask(filepath)</code>","text":"<p>Unpacks the packed band mask to apply to the dataset. Can be used manually or as an input in the emit_xarray() function.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>An EMIT L2A Mask netCDF file.</p> required <p>Returns:</p> Type Description <code>numpy.ndarray</code> <p>A numpy array that can be used with the emit_xarray function to apply a band mask.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def band_mask(filepath):\n    \"\"\"\n    Unpacks the packed band mask to apply to the dataset. Can be used manually or as an input in the emit_xarray() function.\n\n    Args:\n        filepath (str): An EMIT L2A Mask netCDF file.\n\n    Returns:\n        numpy.ndarray: A numpy array that can be used with the emit_xarray function to apply a band mask.\n    \"\"\"\n    # Open Dataset\n    mask_ds = xr.open_dataset(filepath, engine=\"h5netcdf\")\n    # Open band_mask and convert to uint8\n    bmask = mask_ds.band_mask.data.astype(\"uint8\")\n    # Print Flags used\n    unpacked_bmask = np.unpackbits(bmask, axis=-1)\n    # Remove bands &gt; 285\n    unpacked_bmask = unpacked_bmask[:, :, 0:285]\n    # Check for data bands and build mask\n    return unpacked_bmask\n</code></pre>"},{"location":"emit/#hypercoast.emit.coord_vects","title":"<code>coord_vects(ds)</code>","text":"<p>This function calculates the Lat and Lon Coordinate Vectors using the GLT and Metadata from an EMIT dataset read into xarray.</p> <p>lon, lat (numpy.array): longitute and latitude array grid for the dataset</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def coord_vects(ds):\n    \"\"\"\n    This function calculates the Lat and Lon Coordinate Vectors using the GLT and Metadata from an EMIT dataset read into xarray.\n\n    Parameters:\n    ds: an xarray.Dataset containing the root variable and metadata of an EMIT dataset\n    loc: an xarray.Dataset containing the 'location' group of an EMIT dataset\n\n    Returns:\n    lon, lat (numpy.array): longitute and latitude array grid for the dataset\n\n    \"\"\"\n    # Retrieve Geotransform from Metadata\n    GT = ds.geotransform\n    # Create Array for Lat and Lon and fill\n    dim_x = ds.glt_x.shape[1]\n    dim_y = ds.glt_x.shape[0]\n    lon = np.zeros(dim_x)\n    lat = np.zeros(dim_y)\n    # Note: no rotation for EMIT Data\n    for x in np.arange(dim_x):\n        x_geo = (GT[0] + 0.5 * GT[1]) + x * GT[1]  # Adjust coordinates to pixel-center\n        lon[x] = x_geo\n    for y in np.arange(dim_y):\n        y_geo = (GT[3] + 0.5 * GT[5]) + y * GT[5]\n        lat[y] = y_geo\n    return lon, lat\n</code></pre>"},{"location":"emit/#hypercoast.emit.emit_to_image","title":"<code>emit_to_image(data, wavelengths=None, method='nearest', output=None, **kwargs)</code>","text":"<p>Converts an EMIT dataset to an image.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>xarray.Dataset or str</code> <p>The dataset containing the EMIT data or the file path to the dataset.</p> required <code>wavelengths</code> <code>array-like</code> <p>The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for data selection. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>output</code> <code>str</code> <p>The file path where the image will be saved. If None, the image will be returned as a PIL Image object. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to <code>leafmap.array_to_image</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>rasterio.Dataset or None</code> <p>The image converted from the dataset. If <code>output</code> is provided, the image will be saved to the specified file and the function will return None.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def emit_to_image(data, wavelengths=None, method=\"nearest\", output=None, **kwargs):\n    \"\"\"\n    Converts an EMIT dataset to an image.\n\n    Args:\n        data (xarray.Dataset or str): The dataset containing the EMIT data or the file path to the dataset.\n        wavelengths (array-like, optional): The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.\n        method (str, optional): The method to use for data selection. Defaults to \"nearest\".\n        output (str, optional): The file path where the image will be saved. If None, the image will be returned as a PIL Image object. Defaults to None.\n        **kwargs: Additional keyword arguments to be passed to `leafmap.array_to_image`.\n\n    Returns:\n        rasterio.Dataset or None: The image converted from the dataset. If `output` is provided, the image will be saved to the specified file and the function will return None.\n    \"\"\"\n    from leafmap import array_to_image\n\n    if isinstance(data, str):\n        data = read_emit(data, ortho=True)\n\n    ds = data[\"reflectance\"]\n\n    if wavelengths is not None:\n        ds = ds.sel(wavelength=wavelengths, method=method)\n    return array_to_image(ds, transpose=False, output=output, **kwargs)\n</code></pre>"},{"location":"emit/#hypercoast.emit.emit_to_netcdf","title":"<code>emit_to_netcdf(data, output, **kwargs)</code>","text":"<p>Transposes an EMIT dataset and saves it as a NetCDF file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>xarray.Dataset or str</code> <p>The dataset containing the EMIT data or the file path to the dataset.</p> required <code>output</code> <code>str</code> <p>The file path where the NetCDF file will be saved.</p> required <code>**kwargs</code> <p>Additional keyword arguments to be passed to <code>xarray.Dataset.to_netcdf</code>.</p> <code>{}</code> Source code in <code>hypercoast/emit.py</code> <pre><code>def emit_to_netcdf(data, output, **kwargs):\n    \"\"\"\n    Transposes an EMIT dataset and saves it as a NetCDF file.\n\n    Args:\n        data (xarray.Dataset or str): The dataset containing the EMIT data or the file path to the dataset.\n        output (str): The file path where the NetCDF file will be saved.\n        **kwargs: Additional keyword arguments to be passed to `xarray.Dataset.to_netcdf`.\n\n    \"\"\"\n    if isinstance(data, str):\n        data = read_emit(data, ortho=True)\n\n    ds_geo = data.transpose(\"wavelengths\", \"latitude\", \"longitude\")\n    ds_geo.to_netcdf(output, **kwargs)\n</code></pre>"},{"location":"emit/#hypercoast.emit.emit_xarray","title":"<code>emit_xarray(filepath, ortho=False, qmask=None, unpacked_bmask=None, wavelengths=None, method='nearest')</code>","text":"<p>Streamlines opening an EMIT dataset as an xarray.Dataset.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>A filepath to an EMIT netCDF file.</p> required <code>ortho</code> <code>bool</code> <p>Whether to orthorectify the dataset or leave in crosstrack/downtrack coordinates. Defaults to False.</p> <code>False</code> <code>qmask</code> <code>numpy.ndarray</code> <p>A numpy array output from the quality_mask function used to mask pixels based on quality flags selected in that function. Any non-orthorectified array with the proper crosstrack and downtrack dimensions can also be used. Defaults to None.</p> <code>None</code> <code>unpacked_bmask</code> <code>numpy.ndarray</code> <p>A numpy array from the band_mask function that can be used to mask band-specific pixels that have been interpolated. Defaults to None.</p> <code>None</code> <code>wavelengths</code> <code>array-like</code> <p>The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for data selection. Defaults to \"nearest\".</p> <code>'nearest'</code> <p>Returns:</p> Type Description <code>xarray.Dataset</code> <p>An xarray.Dataset constructed based on the parameters provided.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def emit_xarray(\n    filepath,\n    ortho=False,\n    qmask=None,\n    unpacked_bmask=None,\n    wavelengths=None,\n    method=\"nearest\",\n):\n    \"\"\"\n    Streamlines opening an EMIT dataset as an xarray.Dataset.\n\n    Args:\n        filepath (str): A filepath to an EMIT netCDF file.\n        ortho (bool, optional): Whether to orthorectify the dataset or leave in crosstrack/downtrack coordinates. Defaults to False.\n        qmask (numpy.ndarray, optional): A numpy array output from the quality_mask function used to mask pixels based on quality flags selected in that function. Any non-orthorectified array with the proper crosstrack and downtrack dimensions can also be used. Defaults to None.\n        unpacked_bmask (numpy.ndarray, optional): A numpy array from the band_mask function that can be used to mask band-specific pixels that have been interpolated. Defaults to None.\n        wavelengths (array-like, optional): The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.\n        method (str, optional): The method to use for data selection. Defaults to \"nearest\".\n\n    Returns:\n        xarray.Dataset: An xarray.Dataset constructed based on the parameters provided.\n    \"\"\"\n    # Grab granule filename to check product\n    import s3fs\n    from fsspec.implementations.http import HTTPFile\n\n    if type(filepath) == s3fs.core.S3File:\n        granule_id = filepath.info()[\"name\"].split(\"/\", -1)[-1].split(\".\", -1)[0]\n    elif type(filepath) == HTTPFile:\n        granule_id = filepath.path.split(\"/\", -1)[-1].split(\".\", -1)[0]\n    else:\n        granule_id = os.path.splitext(os.path.basename(filepath))[0]\n\n    # Read in Data as Xarray Datasets\n    engine, wvl_group = \"h5netcdf\", None\n\n    ds = xr.open_dataset(filepath, engine=engine)\n    loc = xr.open_dataset(filepath, engine=engine, group=\"location\")\n\n    # Check if mineral dataset and read in groups (only ds/loc for minunc)\n\n    if \"L2B_MIN_\" in granule_id:\n        wvl_group = \"mineral_metadata\"\n    elif \"L2B_MINUNC\" not in granule_id:\n        wvl_group = \"sensor_band_parameters\"\n\n    wvl = None\n\n    if wvl_group:\n        wvl = xr.open_dataset(filepath, engine=engine, group=wvl_group)\n\n    # Building Flat Dataset from Components\n    data_vars = {**ds.variables}\n\n    # Format xarray coordinates based upon emit product (no wvl for mineral uncertainty)\n    coords = {\n        \"downtrack\": ([\"downtrack\"], ds.downtrack.data),\n        \"crosstrack\": ([\"crosstrack\"], ds.crosstrack.data),\n        **loc.variables,\n    }\n\n    product_band_map = {\n        \"L2B_MIN_\": \"name\",\n        \"L2A_MASK_\": \"mask_bands\",\n        \"L1B_OBS_\": \"observation_bands\",\n        \"L2A_RFL_\": \"wavelengths\",\n        \"L1B_RAD_\": \"wavelengths\",\n        \"L2A_RFLUNCERT_\": \"wavelengths\",\n    }\n\n    # if band := product_band_map.get(next((k for k in product_band_map.keys() if k in granule_id), 'unknown'), None):\n    # coords['bands'] = wvl[band].data\n\n    if wvl:\n        coords = {**coords, **wvl.variables}\n\n    out_xr = xr.Dataset(data_vars=data_vars, coords=coords, attrs=ds.attrs)\n    out_xr.attrs[\"granule_id\"] = granule_id\n\n    if band := product_band_map.get(\n        next((k for k in product_band_map.keys() if k in granule_id), \"unknown\"), None\n    ):\n        if \"minerals\" in list(out_xr.dims):\n            out_xr = out_xr.swap_dims({\"minerals\": band})\n            out_xr = out_xr.rename({band: \"mineral_name\"})\n        else:\n            out_xr = out_xr.swap_dims({\"bands\": band})\n\n    # Apply Quality and Band Masks, set fill values to NaN\n    for var in list(ds.data_vars):\n        if qmask is not None:\n            out_xr[var].data[qmask == 1] = np.nan\n        if unpacked_bmask is not None:\n            out_xr[var].data[unpacked_bmask == 1] = np.nan\n        out_xr[var].data[out_xr[var].data == -9999] = np.nan\n\n    if ortho is True:\n        out_xr = ortho_xr(out_xr)\n        out_xr.attrs[\"Orthorectified\"] = \"True\"\n\n    if wavelengths is not None:\n        out_xr = out_xr.sel(wavelengths=wavelengths, method=method)\n\n    out_xr = out_xr.rename({\"wavelengths\": \"wavelength\"})\n    return out_xr\n</code></pre>"},{"location":"emit/#hypercoast.emit.envi_header","title":"<code>envi_header(inputpath)</code>","text":"<p>Convert a ENVI binary/header path to a header, handling extensions.</p> <p>Parameters:</p> Name Type Description Default <code>inputpath</code> <code>str</code> <p>Path to ENVI binary file.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The header file associated with the input reference. If the header file does not exist, it returns the expected header file path.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def envi_header(inputpath):\n    \"\"\"\n    Convert a ENVI binary/header path to a header, handling extensions.\n\n    Args:\n        inputpath (str): Path to ENVI binary file.\n\n    Returns:\n        str: The header file associated with the input reference. If the header file does not exist, it returns the expected header file path.\n    \"\"\"\n    if (\n        os.path.splitext(inputpath)[-1] == \".img\"\n        or os.path.splitext(inputpath)[-1] == \".dat\"\n        or os.path.splitext(inputpath)[-1] == \".raw\"\n    ):\n        # headers could be at either filename.img.hdr or filename.hdr.  Check both, return the one that exists if it\n        # does, if not return the latter (new file creation presumed).\n        hdrfile = os.path.splitext(inputpath)[0] + \".hdr\"\n        if os.path.isfile(hdrfile):\n            return hdrfile\n        elif os.path.isfile(inputpath + \".hdr\"):\n            return inputpath + \".hdr\"\n        return hdrfile\n    elif os.path.splitext(inputpath)[-1] == \".hdr\":\n        return inputpath\n    else:\n        return inputpath + \".hdr\"\n</code></pre>"},{"location":"emit/#hypercoast.emit.is_adjacent","title":"<code>is_adjacent(scene, same_orbit)</code>","text":"<p>Checks if the scene numbers from the same orbit are adjacent/sequential.</p> <p>Parameters:</p> Name Type Description Default <code>scene</code> <code>str</code> <p>The scene number to check.</p> required <code>same_orbit</code> <code>list</code> <p>A list of scene numbers from the same orbit.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the scene numbers are adjacent/sequential, False otherwise.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def is_adjacent(scene: str, same_orbit: list):\n    \"\"\"\n    Checks if the scene numbers from the same orbit are adjacent/sequential.\n\n    Args:\n        scene (str): The scene number to check.\n        same_orbit (list): A list of scene numbers from the same orbit.\n\n    Returns:\n        bool: True if the scene numbers are adjacent/sequential, False otherwise.\n    \"\"\"\n    scene_nums = [int(scene.split(\".\")[-2].split(\"_\")[-1]) for scene in same_orbit]\n    return all(b - a == 1 for a, b in zip(scene_nums[:-1], scene_nums[1:]))\n</code></pre>"},{"location":"emit/#hypercoast.emit.merge_emit","title":"<code>merge_emit(datasets, gdf)</code>","text":"<p>Merges xarray datasets formatted using emit_xarray. Note: GDF may only work with a single geometry.</p> <p>Parameters:</p> Name Type Description Default <code>datasets</code> <code>dict</code> <p>A dictionary of xarray datasets formatted using emit_xarray.</p> required <code>gdf</code> <code>gpd.GeoDataFrame</code> <p>A GeoDataFrame containing the geometry to be used for merging.</p> required <p>Returns:</p> Type Description <code>xarray.Dataset</code> <p>A merged xarray dataset.</p> <p>Exceptions:</p> Type Description <code>Exception</code> <p>If there are inconsistencies in the 1D variables across datasets.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def merge_emit(datasets: dict, gdf: gpd.GeoDataFrame):\n    \"\"\"\n    Merges xarray datasets formatted using emit_xarray. Note: GDF may only work with a single geometry.\n\n    Args:\n        datasets (dict): A dictionary of xarray datasets formatted using emit_xarray.\n        gdf (gpd.GeoDataFrame): A GeoDataFrame containing the geometry to be used for merging.\n\n    Returns:\n        xarray.Dataset: A merged xarray dataset.\n\n    Raises:\n        Exception: If there are inconsistencies in the 1D variables across datasets.\n    \"\"\"\n    from rioxarray.merge import merge_arrays\n\n    nested_data_arrays = {}\n    # loop over datasets\n    for dataset in datasets:\n        # create dictionary of arrays for each dataset\n\n        # create dictionary of 1D variables, which should be consistent across datasets\n        one_d_arrays = {}\n\n        # Dictionary of variables to merge\n        data_arrays = {}\n        # Loop over variables in dataset including elevation\n        for var in list(datasets[dataset].data_vars) + [\"elev\"]:\n            # Get 1D for this variable and add to dictionary\n            if not one_d_arrays:\n                # These should be an array describing the others (wavelengths, mask_bands, etc.)\n                one_dim = [\n                    item\n                    for item in list(datasets[dataset].coords)\n                    if item not in [\"latitude\", \"longitude\", \"spatial_ref\"]\n                    and len(datasets[dataset][item].dims) == 1\n                ]\n                # print(one_dim)\n                for od in one_dim:\n                    one_d_arrays[od] = datasets[dataset].coords[od].data\n\n                # Update format for merging - This could probably be improved\n            da = datasets[dataset][var].reset_coords(\"elev\", drop=False)\n            da = da.rename({\"latitude\": \"y\", \"longitude\": \"x\"})\n            if len(da.dims) == 3:\n                if any(item in list(da.coords) for item in one_dim):\n                    da = da.drop_vars(one_dim)\n                da = da.drop_vars(\"elev\")\n                da = da.to_array(name=var).squeeze(\"variable\", drop=True)\n                da = da.transpose(da.dims[-1], da.dims[0], da.dims[1])\n                # print(da.dims)\n            if var == \"elev\":\n                da = da.to_array(name=var).squeeze(\"variable\", drop=True)\n            data_arrays[var] = da\n            nested_data_arrays[dataset] = data_arrays\n\n            # Transpose the nested arrays dict. This is horrible to read, but works to pair up variables (ie mask) from the different granules\n    transposed_dict = {\n        inner_key: {\n            outer_key: inner_dict[inner_key]\n            for outer_key, inner_dict in nested_data_arrays.items()\n        }\n        for inner_key in nested_data_arrays[next(iter(nested_data_arrays))]\n    }\n\n    # remove some unused data\n    del nested_data_arrays, data_arrays, da\n\n    # Merge the arrays using rioxarray.merge_arrays()\n    merged = {}\n    for _var in transposed_dict:\n        merged[_var] = merge_arrays(\n            list(transposed_dict[_var].values()),\n            bounds=gdf.unary_union.bounds,\n            nodata=np.nan,\n        )\n\n    # Create a new xarray dataset from the merged arrays\n    # Create Merged Dataset\n    merged_ds = xr.Dataset(data_vars=merged, coords=one_d_arrays)\n    # Rename x and y to longitude and latitude\n    merged_ds = merged_ds.rename({\"y\": \"latitude\", \"x\": \"longitude\"})\n    del transposed_dict, merged\n    return merged_ds\n</code></pre>"},{"location":"emit/#hypercoast.emit.ortho_browse","title":"<code>ortho_browse(url, glt, spatial_ref, geotransform, white_background=True)</code>","text":"<p>Use an EMIT GLT, geotransform, and spatial ref to orthorectify a browse image. (browse images are in native resolution)</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL of the browse image.</p> required <code>glt</code> <code>numpy.ndarray</code> <p>A GLT array constructed from EMIT GLT data.</p> required <code>spatial_ref</code> <code>str</code> <p>Spatial reference system.</p> required <code>geotransform</code> <code>list</code> <p>A list of six numbers that define the affine transform between pixel coordinates and map coordinates.</p> required <code>white_background</code> <code>bool</code> <p>If True, the fill value for the orthorectified image is white (255). If False, the fill value is black (0). Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>xarray.DataArray</code> <p>An orthorectified browse image in the form of an xarray DataArray.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def ortho_browse(url, glt, spatial_ref, geotransform, white_background=True):\n    \"\"\"\n    Use an EMIT GLT, geotransform, and spatial ref to orthorectify a browse image. (browse images are in native resolution)\n\n    Args:\n        url (str): URL of the browse image.\n        glt (numpy.ndarray): A GLT array constructed from EMIT GLT data.\n        spatial_ref (str): Spatial reference system.\n        geotransform (list): A list of six numbers that define the affine transform between pixel coordinates and map coordinates.\n        white_background (bool, optional): If True, the fill value for the orthorectified image is white (255). If False, the fill value is black (0). Defaults to True.\n\n    Returns:\n        xarray.DataArray: An orthorectified browse image in the form of an xarray DataArray.\n    \"\"\"\n    from skimage import io\n\n    # Read Data\n    data = io.imread(url)\n    # Orthorectify using GLT and transpose so band is first dimension\n    if white_background == True:\n        fill = 255\n    else:\n        fill = 0\n    ortho_data = apply_glt(data, glt, fill_value=fill).transpose(2, 0, 1)\n    coords = {\n        \"y\": (\n            [\"y\"],\n            (geotransform[3] + 0.5 * geotransform[5])\n            + np.arange(glt.shape[0]) * geotransform[5],\n        ),\n        \"x\": (\n            [\"x\"],\n            (geotransform[0] + 0.5 * geotransform[1])\n            + np.arange(glt.shape[1]) * geotransform[1],\n        ),\n    }\n    ortho_data = ortho_data.astype(int)\n    ortho_data[ortho_data == -1] = 0\n    # Place in xarray.datarray\n    da = xr.DataArray(ortho_data, dims=[\"band\", \"y\", \"x\"], coords=coords)\n    da.rio.write_crs(spatial_ref, inplace=True)\n    return da\n</code></pre>"},{"location":"emit/#hypercoast.emit.ortho_xr","title":"<code>ortho_xr(ds, GLT_NODATA_VALUE=0, fill_value=-9999)</code>","text":"<p>Uses <code>apply_glt</code> to create an orthorectified xarray dataset.</p> <p>Parameters:</p> Name Type Description Default <code>ds</code> <code>xarray.Dataset</code> <p>An xarray dataset produced by emit_xarray.</p> required <code>GLT_NODATA_VALUE</code> <code>int</code> <p>No data value for the GLT tables. Defaults to 0.</p> <code>0</code> <code>fill_value</code> <code>int</code> <p>The fill value for EMIT datasets. Defaults to -9999.</p> <code>-9999</code> <p>Returns:</p> Type Description <code>xarray.Dataset</code> <p>An orthocorrected xarray dataset.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def ortho_xr(ds, GLT_NODATA_VALUE=0, fill_value=-9999):\n    \"\"\"\n    Uses `apply_glt` to create an orthorectified xarray dataset.\n\n    Args:\n        ds (xarray.Dataset): An xarray dataset produced by emit_xarray.\n        GLT_NODATA_VALUE (int, optional): No data value for the GLT tables. Defaults to 0.\n        fill_value (int, optional): The fill value for EMIT datasets. Defaults to -9999.\n\n    Returns:\n        xarray.Dataset: An orthocorrected xarray dataset.\n    \"\"\"\n    # Build glt_ds\n\n    glt_ds = np.nan_to_num(\n        np.stack([ds[\"glt_x\"].data, ds[\"glt_y\"].data], axis=-1), nan=GLT_NODATA_VALUE\n    ).astype(int)\n\n    # List Variables\n    var_list = list(ds.data_vars)\n\n    # Remove flat field from data vars - the flat field is only useful with additional information before orthorectification\n    if \"flat_field_update\" in var_list:\n        var_list.remove(\"flat_field_update\")\n\n    # Create empty dictionary for orthocorrected data vars\n    data_vars = {}\n\n    # Extract Rawspace Dataset Variable Values (Typically Reflectance)\n    for var in var_list:\n        raw_ds = ds[var].data\n        var_dims = ds[var].dims\n        # Apply GLT to dataset\n        out_ds = apply_glt(raw_ds, glt_ds, GLT_NODATA_VALUE=GLT_NODATA_VALUE)\n\n        # Mask fill values\n        out_ds[out_ds == fill_value] = np.nan\n\n        # Update variables - Only works for 2 or 3 dimensional arays\n        if raw_ds.ndim == 2:\n            out_ds = out_ds.squeeze()\n            data_vars[var] = ([\"latitude\", \"longitude\"], out_ds)\n        else:\n            data_vars[var] = ([\"latitude\", \"longitude\", var_dims[-1]], out_ds)\n\n        del raw_ds\n\n    # Calculate Lat and Lon Vectors\n    lon, lat = coord_vects(\n        ds\n    )  # Reorder this function to make sense in case of multiple variables\n\n    # Apply GLT to elevation\n    elev_ds = apply_glt(ds[\"elev\"].data, glt_ds)\n    elev_ds[elev_ds == fill_value] = np.nan\n\n    # Delete glt_ds - no longer needed\n    del glt_ds\n\n    # Create Coordinate Dictionary\n    coords = {\n        \"latitude\": ([\"latitude\"], lat),\n        \"longitude\": ([\"longitude\"], lon),\n        **ds.coords,\n    }  # unpack to add appropriate coordinates\n\n    # Remove Unnecessary Coords\n    for key in [\"downtrack\", \"crosstrack\", \"lat\", \"lon\", \"glt_x\", \"glt_y\", \"elev\"]:\n        del coords[key]\n\n    # Add Orthocorrected Elevation\n    coords[\"elev\"] = ([\"latitude\", \"longitude\"], np.squeeze(elev_ds))\n\n    # Build Output xarray Dataset and assign data_vars array attributes\n    out_xr = xr.Dataset(data_vars=data_vars, coords=coords, attrs=ds.attrs)\n\n    del out_ds\n    # Assign Attributes from Original Datasets\n    for var in var_list:\n        out_xr[var].attrs = ds[var].attrs\n    out_xr.coords[\"latitude\"].attrs = ds[\"lat\"].attrs\n    out_xr.coords[\"longitude\"].attrs = ds[\"lon\"].attrs\n    out_xr.coords[\"elev\"].attrs = ds[\"elev\"].attrs\n\n    # Add Spatial Reference in recognizable format\n    out_xr.rio.write_crs(ds.spatial_ref, inplace=True)\n\n    return out_xr\n</code></pre>"},{"location":"emit/#hypercoast.emit.plot_emit","title":"<code>plot_emit(ds, longitude=None, latitude=None, downtrack=None, crosstrack=None, remove_nans=True, x='wavelengths', y='reflectance', color='black', frame_height=400, frame_width=600, title=None, method='nearest', ortho=True, options={}, **kwargs)</code>","text":"<p>Plots a line graph of the reflectance data from a given dataset.</p> <p>Parameters:</p> Name Type Description Default <code>ds</code> <code>xarray.Dataset or str</code> <p>The dataset containing the reflectance data or the file path to the dataset.</p> required <code>longitude</code> <code>float</code> <p>The longitude coordinate to select for orthorectified data. Defaults to None.</p> <code>None</code> <code>latitude</code> <code>float</code> <p>The latitude coordinate to select for orthorectified data. Defaults to None.</p> <code>None</code> <code>downtrack</code> <code>int</code> <p>The downtrack coordinate to select for non-orthorectified data. Defaults to None.</p> <code>None</code> <code>crosstrack</code> <code>int</code> <p>The crosstrack coordinate to select for non-orthorectified data. Defaults to None.</p> <code>None</code> <code>remove_nans</code> <code>bool</code> <p>If True, replace non-good wavelengths with NaN. Defaults to True.</p> <code>True</code> <code>x</code> <code>str</code> <p>The x-axis label. Defaults to \"wavelengths\".</p> <code>'wavelengths'</code> <code>y</code> <code>str</code> <p>The y-axis label. Defaults to \"reflectance\".</p> <code>'reflectance'</code> <code>color</code> <code>str</code> <p>The color of the line. Defaults to \"black\".</p> <code>'black'</code> <code>frame_height</code> <code>int</code> <p>The height of the frame. Defaults to 400.</p> <code>400</code> <code>frame_width</code> <code>int</code> <p>The width of the frame. Defaults to 600.</p> <code>600</code> <code>title</code> <code>str</code> <p>The title of the plot. If None, a default title will be generated. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for data selection. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>ortho</code> <code>bool</code> <p>If True, the function will use longitude and latitude for data selection. Defaults to True.</p> <code>True</code> <code>options</code> <code>dict</code> <p>Additional options to be passed to <code>hvplot.line</code>. Defaults to {}.</p> <code>{}</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to <code>hvplot.line</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>hvplot.Plot</code> <p>The line plot of the reflectance data.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def plot_emit(\n    ds,\n    longitude=None,\n    latitude=None,\n    downtrack=None,\n    crosstrack=None,\n    remove_nans=True,\n    x=\"wavelengths\",\n    y=\"reflectance\",\n    color=\"black\",\n    frame_height=400,\n    frame_width=600,\n    title=None,\n    method=\"nearest\",\n    ortho=True,\n    options={},\n    **kwargs,\n):\n    \"\"\"\n    Plots a line graph of the reflectance data from a given dataset.\n\n    Args:\n        ds (xarray.Dataset or str): The dataset containing the reflectance data or the file path to the dataset.\n        longitude (float, optional): The longitude coordinate to select for orthorectified data. Defaults to None.\n        latitude (float, optional): The latitude coordinate to select for orthorectified data. Defaults to None.\n        downtrack (int, optional): The downtrack coordinate to select for non-orthorectified data. Defaults to None.\n        crosstrack (int, optional): The crosstrack coordinate to select for non-orthorectified data. Defaults to None.\n        remove_nans (bool, optional): If True, replace non-good wavelengths with NaN. Defaults to True.\n        x (str, optional): The x-axis label. Defaults to \"wavelengths\".\n        y (str, optional): The y-axis label. Defaults to \"reflectance\".\n        color (str, optional): The color of the line. Defaults to \"black\".\n        frame_height (int, optional): The height of the frame. Defaults to 400.\n        frame_width (int, optional): The width of the frame. Defaults to 600.\n        title (str, optional): The title of the plot. If None, a default title will be generated. Defaults to None.\n        method (str, optional): The method to use for data selection. Defaults to \"nearest\".\n        ortho (bool, optional): If True, the function will use longitude and latitude for data selection. Defaults to True.\n        options (dict, optional): Additional options to be passed to `hvplot.line`. Defaults to {}.\n        **kwargs: Additional keyword arguments to be passed to `hvplot.line`.\n\n    Returns:\n        hvplot.Plot: The line plot of the reflectance data.\n    \"\"\"\n\n    import hvplot.xarray\n\n    if ortho == True:\n        if longitude is None or latitude is None:\n            raise ValueError(\n                \"Longitude and Latitude must be provided for orthorectified data.\"\n            )\n    else:\n        if downtrack is None or crosstrack is None:\n            raise ValueError(\n                \"Downtrack and Crosstrack must be provided for non-orthorectified data.\"\n            )\n\n    if longitude is not None and latitude is not None:\n        ortho = True\n\n    if downtrack is not None and crosstrack is not None:\n        ortho = False\n\n    if isinstance(ds, str):\n        ds = read_emit(ds, ortho=ortho)\n\n    if remove_nans:\n        ds[\"reflectance\"].data[:, :, ds[\"good_wavelengths\"].data == 0] = np.nan\n\n    if ortho:\n        example = ds[\"reflectance\"].sel(\n            longitude=longitude, latitude=latitude, method=method\n        )\n        if title is None:\n            title = f\"Reflectance at longitude={longitude:.3f}, latitude={latitude:.3f}\"\n\n    else:\n        example = ds[\"reflectance\"].sel(\n            downtrack=downtrack, crosstrack=crosstrack, method=method\n        )\n        if title is None:\n            title = f\"Reflectance at downtrack={downtrack}, crosstrack={crosstrack}\"\n\n    line = example.hvplot.line(\n        y=y,\n        x=x,\n        color=color,\n        frame_height=frame_height,\n        frame_width=frame_width,\n        **kwargs,\n    ).opts(title=title, **options)\n    return line\n</code></pre>"},{"location":"emit/#hypercoast.emit.quality_mask","title":"<code>quality_mask(filepath, quality_bands)</code>","text":"<p>Builds a single layer mask to apply based on the bands selected from an EMIT L2A Mask file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>An EMIT L2A Mask netCDF file.</p> required <code>quality_bands</code> <code>list</code> <p>A list of bands (quality flags only) from the mask file that should be used in creation of mask.</p> required <p>Returns:</p> Type Description <code>numpy.ndarray</code> <p>A numpy array that can be used with the emit_xarray function to apply a quality mask.</p> <p>Exceptions:</p> Type Description <code>AttributeError</code> <p>If the selected flags include a data band (5 or 6) not just flag bands.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def quality_mask(filepath, quality_bands):\n    \"\"\"\n    Builds a single layer mask to apply based on the bands selected from an EMIT L2A Mask file.\n\n    Args:\n        filepath (str): An EMIT L2A Mask netCDF file.\n        quality_bands (list): A list of bands (quality flags only) from the mask file that should be used in creation of mask.\n\n    Returns:\n        numpy.ndarray: A numpy array that can be used with the emit_xarray function to apply a quality mask.\n\n    Raises:\n        AttributeError: If the selected flags include a data band (5 or 6) not just flag bands.\n    \"\"\"\n    # Open Dataset\n    mask_ds = xr.open_dataset(filepath, engine=\"h5netcdf\")\n    # Open Sensor band Group\n    mask_parameters_ds = xr.open_dataset(\n        filepath, engine=\"h5netcdf\", group=\"sensor_band_parameters\"\n    )\n    # Print Flags used\n    flags_used = mask_parameters_ds[\"mask_bands\"].data[quality_bands]\n    print(f\"Flags used: {flags_used}\")\n    # Check for data bands and build mask\n    if any(x in quality_bands for x in [5, 6]):\n        err_str = f\"Selected flags include a data band (5 or 6) not just flag bands\"\n        raise AttributeError(err_str)\n    else:\n        qmask = np.sum(mask_ds[\"mask\"][:, :, quality_bands].values, axis=-1)\n        qmask[qmask &gt; 1] = 1\n    return qmask\n</code></pre>"},{"location":"emit/#hypercoast.emit.raw_spatial_crop","title":"<code>raw_spatial_crop(ds, shape)</code>","text":"<p>Use a polygon to clip the file GLT, then a bounding box to crop the spatially raw data. Regions clipped in the GLT are set to 0 so a mask will be applied when used to orthorectify the data at a later point in a workflow.</p> <p>Parameters:</p> Name Type Description Default <code>ds</code> <code>xarray.Dataset</code> <p>Raw spatial EMIT data (non-orthorectified) opened with the <code>emit_xarray</code> function.</p> required <code>shape</code> <code>geopandas.GeoDataFrame</code> <p>A polygon opened with geopandas.</p> required <p>Returns:</p> Type Description <code>xarray.Dataset</code> <p>A clipped GLT and raw spatial data clipped to a bounding box.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def raw_spatial_crop(ds, shape):\n    \"\"\"\n    Use a polygon to clip the file GLT, then a bounding box to crop the spatially raw data. Regions clipped in the GLT are set to 0 so a mask will be applied when\n    used to orthorectify the data at a later point in a workflow.\n\n    Args:\n        ds (xarray.Dataset): Raw spatial EMIT data (non-orthorectified) opened with the `emit_xarray` function.\n        shape (geopandas.GeoDataFrame): A polygon opened with geopandas.\n\n    Returns:\n        xarray.Dataset: A clipped GLT and raw spatial data clipped to a bounding box.\n    \"\"\"\n    # Reformat the GLT\n    lon, lat = coord_vects(ds)\n    data_vars = {\n        \"glt_x\": ([\"latitude\", \"longitude\"], ds.glt_x.data),\n        \"glt_y\": ([\"latitude\", \"longitude\"], ds.glt_y.data),\n    }\n    coords = {\n        \"latitude\": ([\"latitude\"], lat),\n        \"longitude\": ([\"longitude\"], lon),\n        \"ortho_y\": ([\"latitude\"], ds.ortho_y.data),\n        \"ortho_x\": ([\"longitude\"], ds.ortho_x.data),\n    }\n    glt_ds = xr.Dataset(data_vars=data_vars, coords=coords, attrs=ds.attrs)\n    glt_ds.rio.write_crs(glt_ds.spatial_ref, inplace=True)\n\n    # Clip the emit glt\n    clipped = glt_ds.rio.clip(shape.geometry.values, shape.crs, all_touched=True)\n\n    # Pull new geotransform from clipped glt\n    clipped_gt = np.array(\n        [float(i) for i in clipped[\"spatial_ref\"].GeoTransform.split(\" \")]\n    )  # THIS GEOTRANSFORM IS OFF BY HALF A PIXEL\n\n    # Create Crosstrack and Downtrack masks for spatially raw dataset -1 is to account for 1 based index. May be a more robust way to do this exists\n    crosstrack_mask = (ds.crosstrack &gt;= np.nanmin(clipped.glt_x.data) - 1) &amp; (\n        ds.crosstrack &lt;= np.nanmax(clipped.glt_x.data) - 1\n    )\n    downtrack_mask = (ds.downtrack &gt;= np.nanmin(clipped.glt_y.data) - 1) &amp; (\n        ds.downtrack &lt;= np.nanmax(clipped.glt_y.data) - 1\n    )\n\n    # Mask Areas outside of crosstrack and downtrack covered by the shape\n    clipped_ds = ds.where((crosstrack_mask &amp; downtrack_mask), drop=True)\n    # Replace Full dataset geotransform with clipped geotransform\n    clipped_ds.attrs[\"geotransform\"] = clipped_gt\n\n    # Drop unnecessary vars from dataset\n    clipped_ds = clipped_ds.drop_vars([\"glt_x\", \"glt_y\", \"downtrack\", \"crosstrack\"])\n\n    # Re-index the GLT to the new array\n    glt_x_data = clipped.glt_x.data - np.nanmin(clipped.glt_x)\n    glt_y_data = clipped.glt_y.data - np.nanmin(clipped.glt_y)\n    clipped_ds = clipped_ds.assign_coords(\n        {\n            \"glt_x\": ([\"ortho_y\", \"ortho_x\"], np.nan_to_num(glt_x_data)),\n            \"glt_y\": ([\"ortho_y\", \"ortho_x\"], np.nan_to_num(glt_y_data)),\n        }\n    )\n    clipped_ds = clipped_ds.assign_coords(\n        {\n            \"downtrack\": (\n                [\"downtrack\"],\n                np.arange(0, clipped_ds[list(ds.data_vars.keys())[0]].shape[0]),\n            ),\n            \"crosstrack\": (\n                [\"crosstrack\"],\n                np.arange(0, clipped_ds[list(ds.data_vars.keys())[0]].shape[1]),\n            ),\n        }\n    )\n\n    return clipped_ds\n</code></pre>"},{"location":"emit/#hypercoast.emit.read_emit","title":"<code>read_emit(filepath, ortho=True, wavelengths=None, method='nearest', **kwargs)</code>","text":"<p>Opens an EMIT dataset from a file path and assigns new coordinates to it.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The file path to the EMIT dataset.</p> required <code>ortho</code> <code>bool</code> <p>If True, the function will return an orthorectified dataset. Defaults to True.</p> <code>True</code> <code>wavelengths</code> <code>array-like</code> <p>The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for data selection. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to <code>xr.open_dataset</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xarray.Dataset</code> <p>The dataset with new coordinates assigned.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def read_emit(filepath, ortho=True, wavelengths=None, method=\"nearest\", **kwargs):\n    \"\"\"\n    Opens an EMIT dataset from a file path and assigns new coordinates to it.\n\n    Args:\n        filepath (str): The file path to the EMIT dataset.\n        ortho (bool, optional): If True, the function will return an orthorectified dataset. Defaults to True.\n        wavelengths (array-like, optional): The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.\n        method (str, optional): The method to use for data selection. Defaults to \"nearest\".\n        **kwargs: Additional keyword arguments to be passed to `xr.open_dataset`.\n\n    Returns:\n        xarray.Dataset: The dataset with new coordinates assigned.\n\n    \"\"\"\n\n    if ortho == True:\n        return emit_xarray(\n            filepath, ortho=True, wavelengths=wavelengths, method=method, **kwargs\n        )\n    else:\n        ds = xr.open_dataset(filepath, **kwargs)\n        wvl = xr.open_dataset(filepath, group=\"sensor_band_parameters\")\n        loc = xr.open_dataset(filepath, group=\"location\")\n        ds = ds.assign_coords(\n            {\n                \"downtrack\": ([\"downtrack\"], ds.downtrack.data),\n                \"crosstrack\": ([\"crosstrack\"], ds.crosstrack.data),\n                **wvl.variables,\n                **loc.variables,\n            }\n        )\n        ds = ds.swap_dims({\"bands\": \"wavelengths\"})\n        del wvl\n        del loc\n\n        if wavelengths is not None:\n            ds = ds.sel(wavelengths=wavelengths, method=method)\n\n        ds = ds.rename({\"wavelengths\": \"wavelength\"})\n        return ds\n</code></pre>"},{"location":"emit/#hypercoast.emit.viz_emit","title":"<code>viz_emit(ds, wavelengths, cmap='viridis', frame_width=720, method='nearest', ortho=True, aspect='equal', tiles='ESRI', alpha=0.8, title=None, options={}, **kwargs)</code>","text":"<p>Visualizes the reflectance data from a given dataset at specific wavelengths.</p> <p>Parameters:</p> Name Type Description Default <code>ds</code> <code>xarray.Dataset or str</code> <p>The dataset containing the reflectance data or the file path to the dataset.</p> required <code>wavelengths</code> <code>array-like</code> <p>The specific wavelengths to visualize.</p> required <code>cmap</code> <code>str</code> <p>The colormap to use. Defaults to \"viridis\".</p> <code>'viridis'</code> <code>frame_width</code> <code>int</code> <p>The width of the frame. Defaults to 720.</p> <code>720</code> <code>method</code> <code>str</code> <p>The method to use for data selection. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>ortho</code> <code>bool</code> <p>If True, the function will return an orthorectified image. Defaults to True.</p> <code>True</code> <code>aspect</code> <code>str</code> <p>The aspect ratio of the plot. Defaults to \"equal\".</p> <code>'equal'</code> <code>tiles</code> <code>str</code> <p>The tile source to use for the background map. Defaults to \"ESRI\".</p> <code>'ESRI'</code> <code>alpha</code> <code>float</code> <p>The alpha value for the image. Defaults to 0.8.</p> <code>0.8</code> <code>title</code> <code>str</code> <p>The title of the plot. If None, a default title will be generated. Defaults to None.</p> <code>None</code> <code>options</code> <code>dict</code> <p>Additional options to be passed to <code>hvplot.image</code>. Defaults to {}.</p> <code>{}</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to <code>hvplot.image</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>hvplot.Plot</code> <p>The image plot of the reflectance data at the specified wavelengths.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def viz_emit(\n    ds,\n    wavelengths,\n    cmap=\"viridis\",\n    frame_width=720,\n    method=\"nearest\",\n    ortho=True,\n    aspect=\"equal\",\n    tiles=\"ESRI\",\n    alpha=0.8,\n    title=None,\n    options={},\n    **kwargs,\n):\n    \"\"\"\n    Visualizes the reflectance data from a given dataset at specific wavelengths.\n\n    Args:\n        ds (xarray.Dataset or str): The dataset containing the reflectance data or the file path to the dataset.\n        wavelengths (array-like): The specific wavelengths to visualize.\n        cmap (str, optional): The colormap to use. Defaults to \"viridis\".\n        frame_width (int, optional): The width of the frame. Defaults to 720.\n        method (str, optional): The method to use for data selection. Defaults to \"nearest\".\n        ortho (bool, optional): If True, the function will return an orthorectified image. Defaults to True.\n        aspect (str, optional): The aspect ratio of the plot. Defaults to \"equal\".\n        tiles (str, optional): The tile source to use for the background map. Defaults to \"ESRI\".\n        alpha (float, optional): The alpha value for the image. Defaults to 0.8.\n        title (str, optional): The title of the plot. If None, a default title will be generated. Defaults to None.\n        options (dict, optional): Additional options to be passed to `hvplot.image`. Defaults to {}.\n        **kwargs: Additional keyword arguments to be passed to `hvplot.image`.\n\n    Returns:\n        hvplot.Plot: The image plot of the reflectance data at the specified wavelengths.\n    \"\"\"\n    import hvplot.xarray\n\n    if isinstance(ds, str):\n        ds = read_emit(ds, ortho=ortho)\n    example = ds.sel(wavelength=wavelengths, method=method)\n\n    if title is None:\n        title = f\"Reflectance at {example.wavelengths.values:.3f} {example.wavelengths.units}\"\n\n    if ortho:\n        image = example.hvplot.image(\n            cmap=cmap,\n            geo=ortho,\n            tiles=tiles,\n            alpha=alpha,\n            frame_width=frame_width,\n            **kwargs,\n        ).opts(title=title, **options)\n    else:\n        image = example.hvplot.image(\n            cmap=cmap, aspect=aspect, alpha=alpha, frame_width=frame_width, **kwargs\n        ).opts(title=title, **options)\n\n    return image\n</code></pre>"},{"location":"emit/#hypercoast.emit.write_envi","title":"<code>write_envi(xr_ds, output_dir, overwrite=False, extension='.img', interleave='BIL', glt_file=False)</code>","text":"<p>Takes an EMIT dataset read into an xarray dataset using the emit_xarray function and writes an ENVI file and header.</p> <p>Parameters:</p> Name Type Description Default <code>xr_ds</code> <code>xarray.Dataset</code> <p>An EMIT dataset read into xarray using the emit_xarray function.</p> required <code>output_dir</code> <code>str</code> <p>Output directory.</p> required <code>overwrite</code> <code>bool</code> <p>Overwrite existing file if True. Defaults to False.</p> <code>False</code> <code>extension</code> <code>str</code> <p>The file extension for the envi formatted file, .img by default. Defaults to \".img\".</p> <code>'.img'</code> <code>interleave</code> <code>str</code> <p>The interleave option for the ENVI file. Defaults to \"BIL\".</p> <code>'BIL'</code> <code>glt_file</code> <code>bool</code> <p>Also create a GLT ENVI file for later use to reproject. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple containing:     - envi_ds (spectral.io.envi.Image): ENVI file in the output directory.     - glt_ds (spectral.io.envi.Image): GLT file in the output directory.</p> <p>Exceptions:</p> Type Description <code>Exception</code> <p>If the data is already orthorectified but a GLT file is still requested.</p> Source code in <code>hypercoast/emit.py</code> <pre><code>def write_envi(\n    xr_ds,\n    output_dir,\n    overwrite=False,\n    extension=\".img\",\n    interleave=\"BIL\",\n    glt_file=False,\n):\n    \"\"\"\n    Takes an EMIT dataset read into an xarray dataset using the emit_xarray function and writes an ENVI file and header.\n\n    Args:\n        xr_ds (xarray.Dataset): An EMIT dataset read into xarray using the emit_xarray function.\n        output_dir (str): Output directory.\n        overwrite (bool, optional): Overwrite existing file if True. Defaults to False.\n        extension (str, optional): The file extension for the envi formatted file, .img by default. Defaults to \".img\".\n        interleave (str, optional): The interleave option for the ENVI file. Defaults to \"BIL\".\n        glt_file (bool, optional): Also create a GLT ENVI file for later use to reproject. Defaults to False.\n\n    Returns:\n        tuple: A tuple containing:\n            - envi_ds (spectral.io.envi.Image): ENVI file in the output directory.\n            - glt_ds (spectral.io.envi.Image): GLT file in the output directory.\n\n    Raises:\n        Exception: If the data is already orthorectified but a GLT file is still requested.\n    \"\"\"\n    from spectral.io import envi\n\n    # Check if xr_ds has been orthorectified, raise exception if it has been but GLT is still requested\n    if (\n        \"Orthorectified\" in xr_ds.attrs.keys()\n        and xr_ds.attrs[\"Orthorectified\"] == \"True\"\n        and glt_file == True\n    ):\n        raise Exception(\"Data is already orthorectified.\")\n\n    # Typemap dictionary for ENVI files\n    envi_typemap = {\n        \"uint8\": 1,\n        \"int16\": 2,\n        \"int32\": 3,\n        \"float32\": 4,\n        \"float64\": 5,\n        \"complex64\": 6,\n        \"complex128\": 9,\n        \"uint16\": 12,\n        \"uint32\": 13,\n        \"int64\": 14,\n        \"uint64\": 15,\n    }\n\n    # Get CRS/geotransform for creation of Orthorectified ENVI file or optional GLT file\n    gt = xr_ds.attrs[\"geotransform\"]\n    mapinfo = (\n        \"{Geographic Lat/Lon, 1, 1, \"\n        + str(gt[0])\n        + \", \"\n        + str(gt[3])\n        + \", \"\n        + str(gt[1])\n        + \", \"\n        + str(gt[5] * -1)\n        + \", WGS-84, units=Degrees}\"\n    )\n\n    # This creates the coordinate system string\n    # hard-coded replacement of wkt crs could probably be improved, though should be the same for all EMIT datasets\n    csstring = '{ GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]] }'\n    # List data variables (typically reflectance/radiance)\n    var_names = list(xr_ds.data_vars)\n\n    # Loop through variable names\n    for var in var_names:\n        # Define output filename\n        output_name = os.path.join(output_dir, xr_ds.attrs[\"granule_id\"] + \"_\" + var)\n\n        nbands = 1\n        if len(xr_ds[var].data.shape) &gt; 2:\n            nbands = xr_ds[var].data.shape[2]\n\n        # Start building metadata\n        metadata = {\n            \"lines\": xr_ds[var].data.shape[0],\n            \"samples\": xr_ds[var].data.shape[1],\n            \"bands\": nbands,\n            \"interleave\": interleave,\n            \"header offset\": 0,\n            \"file type\": \"ENVI Standard\",\n            \"data type\": envi_typemap[str(xr_ds[var].data.dtype)],\n            \"byte order\": 0,\n        }\n\n        for key in list(xr_ds.attrs.keys()):\n            if key == \"summary\":\n                metadata[\"description\"] = xr_ds.attrs[key]\n            elif key not in [\"geotransform\", \"spatial_ref\"]:\n                metadata[key] = f\"{{ {xr_ds.attrs[key]} }}\"\n\n        # List all variables in dataset (including coordinate variables)\n        meta_vars = list(xr_ds.variables)\n\n        # Add band parameter information to metadata (ie wavelengths/obs etc.)\n        for m in meta_vars:\n            if m == \"wavelengths\" or m == \"radiance_wl\":\n                metadata[\"wavelength\"] = np.array(xr_ds[m].data).astype(str).tolist()\n            elif m == \"fwhm\" or m == \"radiance_fwhm\":\n                metadata[\"fwhm\"] = np.array(xr_ds[m].data).astype(str).tolist()\n            elif m == \"good_wavelengths\":\n                metadata[\"good_wavelengths\"] = (\n                    np.array(xr_ds[m].data).astype(int).tolist()\n                )\n            elif m == \"observation_bands\":\n                metadata[\"band names\"] = np.array(xr_ds[m].data).astype(str).tolist()\n            elif m == \"mask_bands\":\n                if var == \"band_mask\":\n                    metadata[\"band names\"] = [\n                        \"packed_bands_\" + bn\n                        for bn in np.arange(285 / 8).astype(str).tolist()\n                    ]\n                else:\n                    metadata[\"band names\"] = (\n                        np.array(xr_ds[m].data).astype(str).tolist()\n                    )\n            if \"wavelength\" in list(metadata.keys()) and \"band names\" not in list(\n                metadata.keys()\n            ):\n                metadata[\"band names\"] = metadata[\"wavelength\"]\n\n        # Add CRS/mapinfo if xarray dataset has been orthorectified\n        if (\n            \"Orthorectified\" in xr_ds.attrs.keys()\n            and xr_ds.attrs[\"Orthorectified\"] == \"True\"\n        ):\n            metadata[\"coordinate system string\"] = csstring\n            metadata[\"map info\"] = mapinfo\n\n        # Replace NaN values in each layer with fill_value\n        # np.nan_to_num(xr_ds[var].data, copy=False, nan=-9999)\n\n        # Write Variables as ENVI Output\n        envi_ds = envi.create_image(\n            envi_header(output_name), metadata, ext=extension, force=overwrite\n        )\n        mm = envi_ds.open_memmap(interleave=\"bip\", writable=True)\n\n        dat = xr_ds[var].data\n\n        if len(dat.shape) == 2:\n            dat = dat.reshape((dat.shape[0], dat.shape[1], 1))\n\n        mm[...] = dat\n\n    # Create GLT Metadata/File\n    if glt_file == True:\n        # Output Name\n        glt_output_name = os.path.join(\n            output_dir, xr_ds.attrs[\"granule_id\"] + \"_\" + \"glt\"\n        )\n\n        # Write GLT Metadata\n        glt_metadata = metadata\n\n        # Remove Unwanted Metadata\n        glt_metadata.pop(\"wavelength\", None)\n        glt_metadata.pop(\"fwhm\", None)\n\n        # Replace Metadata\n        glt_metadata[\"lines\"] = xr_ds[\"glt_x\"].data.shape[0]\n        glt_metadata[\"samples\"] = xr_ds[\"glt_x\"].data.shape[1]\n        glt_metadata[\"bands\"] = 2\n        glt_metadata[\"data type\"] = envi_typemap[\"int32\"]\n        glt_metadata[\"band names\"] = [\"glt_x\", \"glt_y\"]\n        glt_metadata[\"coordinate system string\"] = csstring\n        glt_metadata[\"map info\"] = mapinfo\n\n        # Write GLT Outputs as ENVI File\n        glt_ds = envi.create_image(\n            envi_header(glt_output_name), glt_metadata, ext=extension, force=overwrite\n        )\n        mmglt = glt_ds.open_memmap(interleave=\"bip\", writable=True)\n        mmglt[...] = np.stack(\n            (xr_ds[\"glt_x\"].values, xr_ds[\"glt_y\"].values), axis=-1\n        ).astype(\"int32\")\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"hypercoast/","title":"hypercoast module","text":"<p>Main module.</p>"},{"location":"hypercoast/#hypercoast.hypercoast.Map","title":"<code> Map            (Map)         </code>","text":"<p>A class that extends leafmap.Map to provide additional functionality for     hypercoast.</p> <p>Methods</p> <p>Any methods inherited from leafmap.Map.</p> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>class Map(leafmap.Map):\n    \"\"\"\n    A class that extends leafmap.Map to provide additional functionality for\n        hypercoast.\n\n    Attributes:\n        Any attributes inherited from leafmap.Map.\n\n    Methods:\n        Any methods inherited from leafmap.Map.\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"\n        Initializes a new instance of the Map class.\n\n        Args:\n            **kwargs: Arbitrary keyword arguments that are passed to the parent\n                class's constructor.\n        \"\"\"\n        super().__init__(**kwargs)\n\n    def add(self, obj, position=\"topright\", **kwargs):\n        \"\"\"Add a layer to the map.\n\n        Args:\n            **kwargs: Arbitrary keyword arguments that are passed to the parent\n                class's add_layer method.\n        \"\"\"\n\n        if isinstance(obj, str):\n            if obj == \"spectral\":\n\n                SpectralWidget(self, position=position, **kwargs)\n                self.set_plot_options(add_marker_cluster=True)\n            else:\n                super().add(obj, **kwargs)\n\n        else:\n            super().add(obj, **kwargs)\n\n    def search_emit(self, default_dataset=\"EMITL2ARFL\"):\n        \"\"\"\n        Adds a NASA Earth Data search tool to the map with a default dataset for\n            EMIT.\n\n        Args:\n            default_dataset (str, optional): The default dataset to search for.\n                Defaults to \"EMITL2ARFL\".\n        \"\"\"\n        self.add(\"nasa_earth_data\", default_dataset=default_dataset)\n\n    def search_pace(self, default_dataset=\"PACE_OCI_L2_AOP_NRT\"):\n        \"\"\"\n        Adds a NASA Earth Data search tool to the map with a default dataset for\n            PACE.\n\n        Args:\n            default_dataset (str, optional): The default dataset to search for.\n                Defaults to \"PACE_OCI_L2_AOP_NRT\".\n        \"\"\"\n        self.add(\"nasa_earth_data\", default_dataset=default_dataset)\n\n    def search_ecostress(self, default_dataset=\"ECO_L2T_LSTE\"):\n        \"\"\"\n        Adds a NASA Earth Data search tool to the map with a default dataset for\n            ECOSTRESS.\n\n        Args:\n            default_dataset (str, optional): The default dataset to search for.\n                Defaults to \"ECO_L2T_LSTE\".\n        \"\"\"\n        self.add(\"nasa_earth_data\", default_dataset=default_dataset)\n\n    def add_raster(\n        self,\n        source,\n        indexes=None,\n        colormap=None,\n        vmin=None,\n        vmax=None,\n        nodata=None,\n        attribution=None,\n        layer_name=\"Raster\",\n        zoom_to_layer=True,\n        visible=True,\n        array_args={},\n        **kwargs,\n    ):\n        \"\"\"Add a local raster dataset to the map.\n            If you are using this function in JupyterHub on a remote server\n                (e.g., Binder, Microsoft Planetary Computer) and\n            if the raster does not render properly, try installing\n                jupyter-server-proxy using `pip install jupyter-server-proxy`,\n            then running the following code before calling this function. For\n                more info, see https://bit.ly/3JbmF93.\n\n            import os\n            os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n        Args:\n            source (str): The path to the GeoTIFF file or the URL of the Cloud\n                Optimized GeoTIFF.\n            indexes (int, optional): The band(s) to use. Band indexing starts\n                at 1. Defaults to None.\n            colormap (str, optional): The name of the colormap from `matplotlib`\n                to use when plotting a single band. See\n                https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                Default is greyscale.\n            vmin (float, optional): The minimum value to use when colormapping\n                the palette when plotting a single band. Defaults to None.\n            vmax (float, optional): The maximum value to use when colormapping\n                the palette when plotting a single band. Defaults to None.\n            nodata (float, optional): The value from the band to use to interpret\n                as not valid data. Defaults to None.\n            attribution (str, optional): Attribution for the source raster. This\n                defaults to a message about it being a local file.. Defaults to None.\n            layer_name (str, optional): The layer name to use. Defaults to 'Raster'.\n            zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n                layer. Defaults to True.\n            visible (bool, optional): Whether the layer is visible. Defaults to\n                True.\n            array_args (dict, optional): Additional arguments to pass to\n                `array_to_memory_file` when reading the raster. Defaults to {}.\n        \"\"\"\n\n        import numpy as np\n\n        if nodata is None:\n            nodata = np.nan\n        super().add_raster(\n            source,\n            indexes=indexes,\n            colormap=colormap,\n            vmin=vmin,\n            vmax=vmax,\n            nodata=nodata,\n            attribution=attribution,\n            layer_name=layer_name,\n            zoom_to_layer=zoom_to_layer,\n            visible=visible,\n            array_args=array_args,\n            **kwargs,\n        )\n\n    def add_emit(\n        self,\n        source,\n        wavelengths=None,\n        indexes=None,\n        colormap=None,\n        vmin=None,\n        vmax=None,\n        nodata=np.nan,\n        attribution=None,\n        layer_name=\"EMIT\",\n        zoom_to_layer=True,\n        visible=True,\n        array_args={},\n        **kwargs,\n    ):\n        \"\"\"Add an EMIT dataset to the map.\n            If you are using this function in JupyterHub on a remote server\n                (e.g., Binder, Microsoft Planetary Computer) and\n            if the raster does not render properly, try installing\n                jupyter-server-proxy using `pip install jupyter-server-proxy`,\n            then running the following code before calling this function. For\n                more info, see https://bit.ly/3JbmF93.\n\n            import os\n            os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n        Args:\n            source (str): The path to the GeoTIFF file or the URL of the Cloud\n                Optimized GeoTIFF.\n            indexes (int, optional): The band(s) to use. Band indexing starts\n                at 1. Defaults to None.\n            colormap (str, optional): The name of the colormap from `matplotlib`\n                to use when plotting a single band.\n                    See https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                    Default is greyscale.\n            vmin (float, optional): The minimum value to use when colormapping\n                the palette when plotting a single band. Defaults to None.\n            vmax (float, optional): The maximum value to use when colormapping\n                the palette when plotting a single band. Defaults to None.\n            nodata (float, optional): The value from the band to use to\n                interpret as not valid data. Defaults to None.\n            attribution (str, optional): Attribution for the source raster. This\n                defaults to a message about it being a local file.. Defaults to None.\n            layer_name (str, optional): The layer name to use. Defaults to 'EMIT'.\n            zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n                layer. Defaults to True.\n            visible (bool, optional): Whether the layer is visible. Defaults to\n                True.\n            array_args (dict, optional): Additional arguments to pass to\n                `array_to_memory_file` when reading the raster. Defaults to {}.\n        \"\"\"\n\n        xds = None\n        if isinstance(source, str):\n\n            xds = read_emit(source)\n            source = emit_to_image(xds, wavelengths=wavelengths)\n        elif isinstance(source, xr.Dataset):\n            xds = source\n            source = emit_to_image(xds, wavelengths=wavelengths)\n\n        self.add_raster(\n            source,\n            indexes=indexes,\n            colormap=colormap,\n            vmin=vmin,\n            vmax=vmax,\n            nodata=nodata,\n            attribution=attribution,\n            layer_name=layer_name,\n            zoom_to_layer=zoom_to_layer,\n            visible=visible,\n            array_args=array_args,\n            **kwargs,\n        )\n\n        self.cog_layer_dict[layer_name][\"xds\"] = xds\n        self.cog_layer_dict[layer_name][\"hyper\"] = \"EMIT\"\n        self._update_band_names(layer_name, wavelengths)\n\n    def add_pace(\n        self,\n        source,\n        wavelengths=None,\n        indexes=None,\n        colormap=\"jet\",\n        vmin=None,\n        vmax=None,\n        nodata=np.nan,\n        attribution=None,\n        layer_name=\"PACE\",\n        zoom_to_layer=True,\n        visible=True,\n        method=\"nearest\",\n        gridded=False,\n        array_args={},\n        **kwargs,\n    ):\n        \"\"\"Add a PACE dataset to the map.\n            If you are using this function in JupyterHub on a remote server\n                (e.g., Binder, Microsoft Planetary Computer) and\n            if the raster does not render properly, try installing\n                jupyter-server-proxy using `pip install jupyter-server-proxy`,\n            then running the following code before calling this function. For\n                more info, see https://bit.ly/3JbmF93.\n\n            import os\n            os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n        Args:\n            source (str): The path to the GeoTIFF file or the URL of the Cloud\n                Optimized GeoTIFF.\n            indexes (int, optional): The band(s) to use. Band indexing starts\n                at 1. Defaults to None.\n            colormap (str, optional): The name of the colormap from `matplotlib`\n                to use when plotting a single band. See\n                    https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                    Default is greyscale.\n            vmin (float, optional): The minimum value to use when colormapping\n                the palette when plotting a single band. Defaults to None.\n            vmax (float, optional): The maximum value to use when colormapping\n                the palette when plotting a single band. Defaults to None.\n            nodata (float, optional): The value from the band to use to interpret\n                as not valid data. Defaults to None.\n            attribution (str, optional): Attribution for the source raster. This\n                defaults to a message about it being a local file.. Defaults to None.\n            layer_name (str, optional): The layer name to use. Defaults to 'EMIT'.\n            zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n                layer. Defaults to True.\n            visible (bool, optional): Whether the layer is visible. Defaults to True.\n            array_args (dict, optional): Additional arguments to pass to\n                `array_to_memory_file` when reading the raster. Defaults to {}.\n        \"\"\"\n\n        if isinstance(source, str):\n\n            source = read_pace(source)\n\n        image = pace_to_image(\n            source, wavelengths=wavelengths, method=method, gridded=gridded\n        )\n\n        if isinstance(wavelengths, list) and len(wavelengths) &gt; 1:\n            colormap = None\n\n        self.add_raster(\n            image,\n            indexes=indexes,\n            colormap=colormap,\n            vmin=vmin,\n            vmax=vmax,\n            nodata=nodata,\n            attribution=attribution,\n            layer_name=layer_name,\n            zoom_to_layer=zoom_to_layer,\n            visible=visible,\n            array_args=array_args,\n            **kwargs,\n        )\n\n        self.cog_layer_dict[layer_name][\"xds\"] = source\n        self.cog_layer_dict[layer_name][\"hyper\"] = \"PACE\"\n        self._update_band_names(layer_name, wavelengths)\n\n    def add_desis(\n        self,\n        source,\n        wavelengths=[900, 650, 525],\n        indexes=None,\n        colormap=\"jet\",\n        vmin=None,\n        vmax=None,\n        nodata=np.nan,\n        attribution=None,\n        layer_name=\"DESIS\",\n        zoom_to_layer=True,\n        visible=True,\n        method=\"nearest\",\n        array_args={},\n        **kwargs,\n    ):\n        \"\"\"Add a DESIS dataset to the map.\n            If you are using this function in JupyterHub on a remote server\n                (e.g., Binder, Microsoft Planetary Computer) and\n            if the raster does not render properly, try installing\n                jupyter-server-proxy using `pip install jupyter-server-proxy`,\n            then running the following code before calling this function. For\n                more info, see https://bit.ly/3JbmF93.\n\n            import os\n            os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n        Args:\n            source (str): The path to the GeoTIFF file or the URL of the Cloud\n                Optimized GeoTIFF.\n            indexes (int, optional): The band(s) to use. Band indexing starts\n                at 1. Defaults to None.\n            colormap (str, optional): The name of the colormap from `matplotlib`\n                to use when plotting a single band. See\n                https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                Default is 'jet'.\n            vmin (float, optional): The minimum value to use when colormapping\n                the palette when plotting a single band. Defaults to None.\n            vmax (float, optional): The maximum value to use when colormapping\n                the palette when plotting a single band. Defaults to None.\n            nodata (float, optional): The value from the band to use to interpret\n                as not valid data. Defaults to None.\n            attribution (str, optional): Attribution for the source raster. This\n                defaults to a message about it being a local file.. Defaults to None.\n            layer_name (str, optional): The layer name to use. Defaults to 'EMIT'.\n            zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n                layer. Defaults to True.\n            visible (bool, optional): Whether the layer is visible. Defaults to True.\n            array_args (dict, optional): Additional arguments to pass to\n                `array_to_memory_file` when reading the raster. Defaults to {}.\n        \"\"\"\n\n        if isinstance(source, str):\n\n            source = read_desis(source)\n\n        image = desis_to_image(source, wavelengths=wavelengths, method=method)\n\n        if isinstance(wavelengths, list) and len(wavelengths) &gt; 1:\n            colormap = None\n\n        if isinstance(wavelengths, int):\n            wavelengths = [wavelengths]\n\n        if indexes is None:\n            if isinstance(wavelengths, list) and len(wavelengths) == 1:\n                indexes = [1]\n            else:\n                indexes = [1, 2, 3]\n\n        self.add_raster(\n            image,\n            indexes=indexes,\n            colormap=colormap,\n            vmin=vmin,\n            vmax=vmax,\n            nodata=nodata,\n            attribution=attribution,\n            layer_name=layer_name,\n            zoom_to_layer=zoom_to_layer,\n            visible=visible,\n            array_args=array_args,\n            **kwargs,\n        )\n\n        self.cog_layer_dict[layer_name][\"xds\"] = source\n        self.cog_layer_dict[layer_name][\"hyper\"] = \"DESIS\"\n        self._update_band_names(layer_name, wavelengths)\n\n    def add_neon(\n        self,\n        source,\n        wavelengths=None,\n        indexes=None,\n        colormap=None,\n        vmin=0,\n        vmax=0.5,\n        nodata=np.nan,\n        attribution=None,\n        layer_name=\"NEON\",\n        zoom_to_layer=True,\n        visible=True,\n        array_args={},\n        method=\"nearest\",\n        **kwargs,\n    ):\n        \"\"\"Add an NEON AOP dataset to the map.\n            If you are using this function in JupyterHub on a remote server\n                (e.g., Binder, Microsoft Planetary Computer) and\n            if the raster does not render properly, try installing\n                jupyter-server-proxy using `pip install jupyter-server-proxy`,\n            then running the following code before calling this function. For\n                more info, see https://bit.ly/3JbmF93.\n\n            import os\n            os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n        Args:\n            source (str): The path to the NEON AOP HDF5 file.\n            indexes (int, optional): The band(s) to use. Band indexing starts\n                at 1. Defaults to None.\n            colormap (str, optional): The name of the colormap from `matplotlib`\n                to use when plotting a single band. See\n                    https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                    Default is greyscale.\n            vmin (float, optional): The minimum value to use when colormapping\n                the palette when plotting a single band. Defaults to 0.\n            vmax (float, optional): The maximum value to use when colormapping\n                the palette when plotting a single band. Defaults to 0.5.\n            nodata (float, optional): The value from the band to use to\n                interpret as not valid data. Defaults to np.nan.\n            attribution (str, optional): Attribution for the source raster. This\n                defaults to a message about it being a local file.. Defaults to None.\n            layer_name (str, optional): The layer name to use. Defaults to 'NEON'.\n            zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n                layer. Defaults to True.\n            visible (bool, optional): Whether the layer is visible. Defaults\n                to True.\n            array_args (dict, optional): Additional arguments to pass to\n                `array_to_memory_file` when reading the raster. Defaults to {}.\n            method (str, optional): The method to use for data interpolation.\n                Defaults to \"nearest\".\n        \"\"\"\n\n        xds = None\n        if isinstance(source, str):\n\n            xds = read_neon(source)\n            source = neon_to_image(xds, wavelengths=wavelengths, method=method)\n        elif isinstance(source, xr.Dataset):\n            xds = source\n            source = neon_to_image(xds, wavelengths=wavelengths, method=method)\n\n        self.add_raster(\n            source,\n            indexes=indexes,\n            colormap=colormap,\n            vmin=vmin,\n            vmax=vmax,\n            nodata=nodata,\n            attribution=attribution,\n            layer_name=layer_name,\n            zoom_to_layer=zoom_to_layer,\n            visible=visible,\n            array_args=array_args,\n            **kwargs,\n        )\n\n        self.cog_layer_dict[layer_name][\"xds\"] = xds\n        self.cog_layer_dict[layer_name][\"hyper\"] = \"NEON\"\n        self._update_band_names(layer_name, wavelengths)\n\n    def add_aviris(\n        self,\n        source,\n        wavelengths=None,\n        indexes=None,\n        colormap=None,\n        vmin=0,\n        vmax=0.5,\n        nodata=np.nan,\n        attribution=None,\n        layer_name=\"AVIRIS\",\n        zoom_to_layer=True,\n        visible=True,\n        array_args={},\n        method=\"nearest\",\n        **kwargs,\n    ):\n        \"\"\"Add an AVIRIS dataset to the map.\n            If you are using this function in JupyterHub on a remote server\n                (e.g., Binder, Microsoft Planetary Computer) and\n            if the raster does not render properly, try installing\n                jupyter-server-proxy using `pip install jupyter-server-proxy`,\n            then running the following code before calling this function. For\n                more info, see https://bit.ly/3JbmF93.\n\n            import os\n            os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n        Args:\n            source (str): The path to the AVIRIS file.\n            indexes (int, optional): The band(s) to use. Band indexing starts\n                at 1. Defaults to None.\n            colormap (str, optional): The name of the colormap from `matplotlib`\n                to use when plotting a single band. See\n                    https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                    Default is greyscale.\n            vmin (float, optional): The minimum value to use when colormapping\n                the palette when plotting a single band. Defaults to 0.\n            vmax (float, optional): The maximum value to use when colormapping\n                the palette when plotting a single band. Defaults to 0.5.\n            nodata (float, optional): The value from the band to use to\n                interpret as not valid data. Defaults to np.nan.\n            attribution (str, optional): Attribution for the source raster. This\n                defaults to a message about it being a local file.. Defaults to None.\n            layer_name (str, optional): The layer name to use. Defaults to 'NEON'.\n            zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n                layer. Defaults to True.\n            visible (bool, optional): Whether the layer is visible. Defaults\n                to True.\n            array_args (dict, optional): Additional arguments to pass to\n                `array_to_memory_file` when reading the raster. Defaults to {}.\n            method (str, optional): The method to use for data interpolation.\n                Defaults to \"nearest\".\n        \"\"\"\n\n        xds = None\n        if isinstance(source, str):\n\n            xds = read_aviris(source)\n            source = neon_to_image(xds, wavelengths=wavelengths, method=method)\n        elif isinstance(source, xr.Dataset):\n            xds = source\n            source = aviris_to_image(xds, wavelengths=wavelengths, method=method)\n\n        self.add_raster(\n            source,\n            indexes=indexes,\n            colormap=colormap,\n            vmin=vmin,\n            vmax=vmax,\n            nodata=nodata,\n            attribution=attribution,\n            layer_name=layer_name,\n            zoom_to_layer=zoom_to_layer,\n            visible=visible,\n            array_args=array_args,\n            **kwargs,\n        )\n\n        xds.attrs[\"bounds\"] = self.cog_layer_dict[layer_name][\"bounds\"]\n        self.cog_layer_dict[layer_name][\"xds\"] = xds\n        self.cog_layer_dict[layer_name][\"hyper\"] = \"AVIRIS\"\n        self._update_band_names(layer_name, wavelengths)\n\n    def add_hyper(self, xds, type, wvl_indexes=None, **kwargs):\n        \"\"\"Add a hyperspectral dataset to the map.\n\n        Args:\n            xds (str): The Xarray dataset containing the hyperspectral data.\n            type (str): The type of the hyperspectral dataset. Can be one of\n                \"EMIT\", \"PACE\", \"DESIS\", \"NEON\", \"AVIRIS\".\n            **kwargs: Additional keyword arguments to pass to the corresponding\n                add function.\n        \"\"\"\n\n        if wvl_indexes is not None:\n            kwargs[\"wavelengths\"] = (\n                xds.isel(wavelength=wvl_indexes).coords[\"wavelength\"].values.tolist()\n            )\n\n        if type == \"EMIT\":\n            self.add_emit(xds, **kwargs)\n        elif type == \"PACE\":\n            self.add_pace(xds, **kwargs)\n        elif type == \"DESIS\":\n            self.add_desis(xds, **kwargs)\n        elif type == \"NEON\":\n            self.add_neon(xds, **kwargs)\n        elif type == \"AVIRIS\":\n            self.add_aviris(xds, **kwargs)\n\n    def set_plot_options(\n        self,\n        add_marker_cluster=False,\n        plot_type=None,\n        overlay=False,\n        position=\"bottomright\",\n        min_width=None,\n        max_width=None,\n        min_height=None,\n        max_height=None,\n        **kwargs,\n    ):\n        \"\"\"Sets plotting options.\n\n        Args:\n            add_marker_cluster (bool, optional): Whether to add a marker cluster.\n                Defaults to False.\n            sample_scale (float, optional):  A nominal scale in meters of the\n                projection to sample in . Defaults to None.\n            plot_type (str, optional): The plot type can be one of \"None\", \"bar\",\n                \"scatter\" or \"hist\". Defaults to None.\n            overlay (bool, optional): Whether to overlay plotted lines on the\n                figure. Defaults to False.\n            position (str, optional): Position of the control, can be\n                \u2018bottomleft\u2019, \u2018bottomright\u2019, \u2018topleft\u2019, or \u2018topright\u2019. Defaults\n                to 'bottomright'.\n            min_width (int, optional): Min width of the widget (in pixels), if\n                None it will respect the content size. Defaults to None.\n            max_width (int, optional): Max width of the widget (in pixels), if\n                None it will respect the content size. Defaults to None.\n            min_height (int, optional): Min height of the widget (in pixels), if\n                None it will respect the content size. Defaults to None.\n            max_height (int, optional): Max height of the widget (in pixels), if\n                None it will respect the content size. Defaults to None.\n\n        \"\"\"\n        plot_options_dict = {}\n        plot_options_dict[\"add_marker_cluster\"] = add_marker_cluster\n        plot_options_dict[\"plot_type\"] = plot_type\n        plot_options_dict[\"overlay\"] = overlay\n        plot_options_dict[\"position\"] = position\n        plot_options_dict[\"min_width\"] = min_width\n        plot_options_dict[\"max_width\"] = max_width\n        plot_options_dict[\"min_height\"] = min_height\n        plot_options_dict[\"max_height\"] = max_height\n\n        for key in kwargs:\n            plot_options_dict[key] = kwargs[key]\n\n        self._plot_options = plot_options_dict\n\n        if not hasattr(self, \"_plot_marker_cluster\"):\n            self._plot_marker_cluster = ipyleaflet.MarkerCluster(name=\"Marker Cluster\")\n\n        if add_marker_cluster and (self._plot_marker_cluster not in self.layers):\n            self.add(self._plot_marker_cluster)\n\n    def spectral_to_df(self, **kwargs):\n        \"\"\"Converts the spectral data to a pandas DataFrame.\n\n        Returns:\n            pd.DataFrame: The spectral data as a pandas DataFrame.\n        \"\"\"\n        import pandas as pd\n\n        df = pd.DataFrame(self._spectral_data, **kwargs)\n        return df\n\n    def spectral_to_csv(self, filename, index=True, **kwargs):\n        \"\"\"Saves the spectral data to a CSV file.\n\n        Args:\n            filename (str): The output CSV file.\n            index (bool, optional): Whether to write the index. Defaults to True.\n        \"\"\"\n        df = self.spectral_to_df()\n        df = df.rename_axis(\"band\")\n        df.to_csv(filename, index=index, **kwargs)\n\n    def _update_band_names(self, layer_name, wavelengths):\n\n        # Function to find the nearest indices\n        def find_nearest_indices(\n            dataarray, selected_wavelengths, dim_name=\"wavelength\"\n        ):\n            indices = []\n            for wavelength in selected_wavelengths:\n                if dim_name == \"band\":\n                    nearest_wavelength = dataarray.sel(\n                        band=wavelength, method=\"nearest\"\n                    )\n                else:\n                    nearest_wavelength = dataarray.sel(\n                        wavelength=wavelength, method=\"nearest\"\n                    )\n                nearest_wavelength_index = nearest_wavelength[dim_name].item()\n                nearest_index = (\n                    dataarray[dim_name].values.tolist().index(nearest_wavelength_index)\n                )\n                indices.append(nearest_index + 1)\n            return indices\n\n        if \"xds\" in self.cog_layer_dict[layer_name]:\n            xds = self.cog_layer_dict[layer_name][\"xds\"]\n            dim_name = \"wavelength\"\n\n            if \"band\" in xds:\n                dim_name = \"band\"\n\n            band_count = xds.dims[dim_name]\n            band_names = [\"b\" + str(band) for band in range(1, band_count + 1)]\n            self.cog_layer_dict[layer_name][\"band_names\"] = band_names\n\n            try:\n                indexes = find_nearest_indices(xds, wavelengths, dim_name=dim_name)\n                vis_bands = [\"b\" + str(index) for index in indexes]\n                self.cog_layer_dict[layer_name][\"indexes\"] = indexes\n                self.cog_layer_dict[layer_name][\"vis_bands\"] = vis_bands\n            except Exception as e:\n                print(e)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.__init__","title":"<code>__init__(self, **kwargs)</code>  <code>special</code>","text":"<p>Initializes a new instance of the Map class.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Arbitrary keyword arguments that are passed to the parent class's constructor.</p> <code>{}</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"\n    Initializes a new instance of the Map class.\n\n    Args:\n        **kwargs: Arbitrary keyword arguments that are passed to the parent\n            class's constructor.\n    \"\"\"\n    super().__init__(**kwargs)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.add","title":"<code>add(self, obj, position='topright', **kwargs)</code>","text":"<p>Add a layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Arbitrary keyword arguments that are passed to the parent class's add_layer method.</p> <code>{}</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def add(self, obj, position=\"topright\", **kwargs):\n    \"\"\"Add a layer to the map.\n\n    Args:\n        **kwargs: Arbitrary keyword arguments that are passed to the parent\n            class's add_layer method.\n    \"\"\"\n\n    if isinstance(obj, str):\n        if obj == \"spectral\":\n\n            SpectralWidget(self, position=position, **kwargs)\n            self.set_plot_options(add_marker_cluster=True)\n        else:\n            super().add(obj, **kwargs)\n\n    else:\n        super().add(obj, **kwargs)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.add_aviris","title":"<code>add_aviris(self, source, wavelengths=None, indexes=None, colormap=None, vmin=0, vmax=0.5, nodata=nan, attribution=None, layer_name='AVIRIS', zoom_to_layer=True, visible=True, array_args={}, method='nearest', **kwargs)</code>","text":"<p>Add an AVIRIS dataset to the map.     If you are using this function in JupyterHub on a remote server         (e.g., Binder, Microsoft Planetary Computer) and     if the raster does not render properly, try installing         jupyter-server-proxy using <code>pip install jupyter-server-proxy</code>,     then running the following code before calling this function. For         more info, see https://bit.ly/3JbmF93.</p> <pre><code>import os\nos.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The path to the AVIRIS file.</p> required <code>indexes</code> <code>int</code> <p>The band(s) to use. Band indexing starts at 1. Defaults to None.</p> <code>None</code> <code>colormap</code> <code>str</code> <p>The name of the colormap from <code>matplotlib</code> to use when plotting a single band. See     https://matplotlib.org/stable/gallery/color/colormap_reference.html.     Default is greyscale.</p> <code>None</code> <code>vmin</code> <code>float</code> <p>The minimum value to use when colormapping the palette when plotting a single band. Defaults to 0.</p> <code>0</code> <code>vmax</code> <code>float</code> <p>The maximum value to use when colormapping the palette when plotting a single band. Defaults to 0.5.</p> <code>0.5</code> <code>nodata</code> <code>float</code> <p>The value from the band to use to interpret as not valid data. Defaults to np.nan.</p> <code>nan</code> <code>attribution</code> <code>str</code> <p>Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name to use. Defaults to 'NEON'.</p> <code>'AVIRIS'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the extent of the layer. Defaults to True.</p> <code>True</code> <code>visible</code> <code>bool</code> <p>Whether the layer is visible. Defaults to True.</p> <code>True</code> <code>array_args</code> <code>dict</code> <p>Additional arguments to pass to <code>array_to_memory_file</code> when reading the raster. Defaults to {}.</p> <code>{}</code> <code>method</code> <code>str</code> <p>The method to use for data interpolation. Defaults to \"nearest\".</p> <code>'nearest'</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def add_aviris(\n    self,\n    source,\n    wavelengths=None,\n    indexes=None,\n    colormap=None,\n    vmin=0,\n    vmax=0.5,\n    nodata=np.nan,\n    attribution=None,\n    layer_name=\"AVIRIS\",\n    zoom_to_layer=True,\n    visible=True,\n    array_args={},\n    method=\"nearest\",\n    **kwargs,\n):\n    \"\"\"Add an AVIRIS dataset to the map.\n        If you are using this function in JupyterHub on a remote server\n            (e.g., Binder, Microsoft Planetary Computer) and\n        if the raster does not render properly, try installing\n            jupyter-server-proxy using `pip install jupyter-server-proxy`,\n        then running the following code before calling this function. For\n            more info, see https://bit.ly/3JbmF93.\n\n        import os\n        os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n    Args:\n        source (str): The path to the AVIRIS file.\n        indexes (int, optional): The band(s) to use. Band indexing starts\n            at 1. Defaults to None.\n        colormap (str, optional): The name of the colormap from `matplotlib`\n            to use when plotting a single band. See\n                https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                Default is greyscale.\n        vmin (float, optional): The minimum value to use when colormapping\n            the palette when plotting a single band. Defaults to 0.\n        vmax (float, optional): The maximum value to use when colormapping\n            the palette when plotting a single band. Defaults to 0.5.\n        nodata (float, optional): The value from the band to use to\n            interpret as not valid data. Defaults to np.nan.\n        attribution (str, optional): Attribution for the source raster. This\n            defaults to a message about it being a local file.. Defaults to None.\n        layer_name (str, optional): The layer name to use. Defaults to 'NEON'.\n        zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n            layer. Defaults to True.\n        visible (bool, optional): Whether the layer is visible. Defaults\n            to True.\n        array_args (dict, optional): Additional arguments to pass to\n            `array_to_memory_file` when reading the raster. Defaults to {}.\n        method (str, optional): The method to use for data interpolation.\n            Defaults to \"nearest\".\n    \"\"\"\n\n    xds = None\n    if isinstance(source, str):\n\n        xds = read_aviris(source)\n        source = neon_to_image(xds, wavelengths=wavelengths, method=method)\n    elif isinstance(source, xr.Dataset):\n        xds = source\n        source = aviris_to_image(xds, wavelengths=wavelengths, method=method)\n\n    self.add_raster(\n        source,\n        indexes=indexes,\n        colormap=colormap,\n        vmin=vmin,\n        vmax=vmax,\n        nodata=nodata,\n        attribution=attribution,\n        layer_name=layer_name,\n        zoom_to_layer=zoom_to_layer,\n        visible=visible,\n        array_args=array_args,\n        **kwargs,\n    )\n\n    xds.attrs[\"bounds\"] = self.cog_layer_dict[layer_name][\"bounds\"]\n    self.cog_layer_dict[layer_name][\"xds\"] = xds\n    self.cog_layer_dict[layer_name][\"hyper\"] = \"AVIRIS\"\n    self._update_band_names(layer_name, wavelengths)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.add_desis","title":"<code>add_desis(self, source, wavelengths=[900, 650, 525], indexes=None, colormap='jet', vmin=None, vmax=None, nodata=nan, attribution=None, layer_name='DESIS', zoom_to_layer=True, visible=True, method='nearest', array_args={}, **kwargs)</code>","text":"<p>Add a DESIS dataset to the map.     If you are using this function in JupyterHub on a remote server         (e.g., Binder, Microsoft Planetary Computer) and     if the raster does not render properly, try installing         jupyter-server-proxy using <code>pip install jupyter-server-proxy</code>,     then running the following code before calling this function. For         more info, see https://bit.ly/3JbmF93.</p> <pre><code>import os\nos.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The path to the GeoTIFF file or the URL of the Cloud Optimized GeoTIFF.</p> required <code>indexes</code> <code>int</code> <p>The band(s) to use. Band indexing starts at 1. Defaults to None.</p> <code>None</code> <code>colormap</code> <code>str</code> <p>The name of the colormap from <code>matplotlib</code> to use when plotting a single band. See https://matplotlib.org/stable/gallery/color/colormap_reference.html. Default is 'jet'.</p> <code>'jet'</code> <code>vmin</code> <code>float</code> <p>The minimum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>vmax</code> <code>float</code> <p>The maximum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>nodata</code> <code>float</code> <p>The value from the band to use to interpret as not valid data. Defaults to None.</p> <code>nan</code> <code>attribution</code> <code>str</code> <p>Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name to use. Defaults to 'EMIT'.</p> <code>'DESIS'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the extent of the layer. Defaults to True.</p> <code>True</code> <code>visible</code> <code>bool</code> <p>Whether the layer is visible. Defaults to True.</p> <code>True</code> <code>array_args</code> <code>dict</code> <p>Additional arguments to pass to <code>array_to_memory_file</code> when reading the raster. Defaults to {}.</p> <code>{}</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def add_desis(\n    self,\n    source,\n    wavelengths=[900, 650, 525],\n    indexes=None,\n    colormap=\"jet\",\n    vmin=None,\n    vmax=None,\n    nodata=np.nan,\n    attribution=None,\n    layer_name=\"DESIS\",\n    zoom_to_layer=True,\n    visible=True,\n    method=\"nearest\",\n    array_args={},\n    **kwargs,\n):\n    \"\"\"Add a DESIS dataset to the map.\n        If you are using this function in JupyterHub on a remote server\n            (e.g., Binder, Microsoft Planetary Computer) and\n        if the raster does not render properly, try installing\n            jupyter-server-proxy using `pip install jupyter-server-proxy`,\n        then running the following code before calling this function. For\n            more info, see https://bit.ly/3JbmF93.\n\n        import os\n        os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n    Args:\n        source (str): The path to the GeoTIFF file or the URL of the Cloud\n            Optimized GeoTIFF.\n        indexes (int, optional): The band(s) to use. Band indexing starts\n            at 1. Defaults to None.\n        colormap (str, optional): The name of the colormap from `matplotlib`\n            to use when plotting a single band. See\n            https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n            Default is 'jet'.\n        vmin (float, optional): The minimum value to use when colormapping\n            the palette when plotting a single band. Defaults to None.\n        vmax (float, optional): The maximum value to use when colormapping\n            the palette when plotting a single band. Defaults to None.\n        nodata (float, optional): The value from the band to use to interpret\n            as not valid data. Defaults to None.\n        attribution (str, optional): Attribution for the source raster. This\n            defaults to a message about it being a local file.. Defaults to None.\n        layer_name (str, optional): The layer name to use. Defaults to 'EMIT'.\n        zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n            layer. Defaults to True.\n        visible (bool, optional): Whether the layer is visible. Defaults to True.\n        array_args (dict, optional): Additional arguments to pass to\n            `array_to_memory_file` when reading the raster. Defaults to {}.\n    \"\"\"\n\n    if isinstance(source, str):\n\n        source = read_desis(source)\n\n    image = desis_to_image(source, wavelengths=wavelengths, method=method)\n\n    if isinstance(wavelengths, list) and len(wavelengths) &gt; 1:\n        colormap = None\n\n    if isinstance(wavelengths, int):\n        wavelengths = [wavelengths]\n\n    if indexes is None:\n        if isinstance(wavelengths, list) and len(wavelengths) == 1:\n            indexes = [1]\n        else:\n            indexes = [1, 2, 3]\n\n    self.add_raster(\n        image,\n        indexes=indexes,\n        colormap=colormap,\n        vmin=vmin,\n        vmax=vmax,\n        nodata=nodata,\n        attribution=attribution,\n        layer_name=layer_name,\n        zoom_to_layer=zoom_to_layer,\n        visible=visible,\n        array_args=array_args,\n        **kwargs,\n    )\n\n    self.cog_layer_dict[layer_name][\"xds\"] = source\n    self.cog_layer_dict[layer_name][\"hyper\"] = \"DESIS\"\n    self._update_band_names(layer_name, wavelengths)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.add_emit","title":"<code>add_emit(self, source, wavelengths=None, indexes=None, colormap=None, vmin=None, vmax=None, nodata=nan, attribution=None, layer_name='EMIT', zoom_to_layer=True, visible=True, array_args={}, **kwargs)</code>","text":"<p>Add an EMIT dataset to the map.     If you are using this function in JupyterHub on a remote server         (e.g., Binder, Microsoft Planetary Computer) and     if the raster does not render properly, try installing         jupyter-server-proxy using <code>pip install jupyter-server-proxy</code>,     then running the following code before calling this function. For         more info, see https://bit.ly/3JbmF93.</p> <pre><code>import os\nos.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The path to the GeoTIFF file or the URL of the Cloud Optimized GeoTIFF.</p> required <code>indexes</code> <code>int</code> <p>The band(s) to use. Band indexing starts at 1. Defaults to None.</p> <code>None</code> <code>colormap</code> <code>str</code> <p>The name of the colormap from <code>matplotlib</code> to use when plotting a single band.     See https://matplotlib.org/stable/gallery/color/colormap_reference.html.     Default is greyscale.</p> <code>None</code> <code>vmin</code> <code>float</code> <p>The minimum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>vmax</code> <code>float</code> <p>The maximum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>nodata</code> <code>float</code> <p>The value from the band to use to interpret as not valid data. Defaults to None.</p> <code>nan</code> <code>attribution</code> <code>str</code> <p>Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name to use. Defaults to 'EMIT'.</p> <code>'EMIT'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the extent of the layer. Defaults to True.</p> <code>True</code> <code>visible</code> <code>bool</code> <p>Whether the layer is visible. Defaults to True.</p> <code>True</code> <code>array_args</code> <code>dict</code> <p>Additional arguments to pass to <code>array_to_memory_file</code> when reading the raster. Defaults to {}.</p> <code>{}</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def add_emit(\n    self,\n    source,\n    wavelengths=None,\n    indexes=None,\n    colormap=None,\n    vmin=None,\n    vmax=None,\n    nodata=np.nan,\n    attribution=None,\n    layer_name=\"EMIT\",\n    zoom_to_layer=True,\n    visible=True,\n    array_args={},\n    **kwargs,\n):\n    \"\"\"Add an EMIT dataset to the map.\n        If you are using this function in JupyterHub on a remote server\n            (e.g., Binder, Microsoft Planetary Computer) and\n        if the raster does not render properly, try installing\n            jupyter-server-proxy using `pip install jupyter-server-proxy`,\n        then running the following code before calling this function. For\n            more info, see https://bit.ly/3JbmF93.\n\n        import os\n        os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n    Args:\n        source (str): The path to the GeoTIFF file or the URL of the Cloud\n            Optimized GeoTIFF.\n        indexes (int, optional): The band(s) to use. Band indexing starts\n            at 1. Defaults to None.\n        colormap (str, optional): The name of the colormap from `matplotlib`\n            to use when plotting a single band.\n                See https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                Default is greyscale.\n        vmin (float, optional): The minimum value to use when colormapping\n            the palette when plotting a single band. Defaults to None.\n        vmax (float, optional): The maximum value to use when colormapping\n            the palette when plotting a single band. Defaults to None.\n        nodata (float, optional): The value from the band to use to\n            interpret as not valid data. Defaults to None.\n        attribution (str, optional): Attribution for the source raster. This\n            defaults to a message about it being a local file.. Defaults to None.\n        layer_name (str, optional): The layer name to use. Defaults to 'EMIT'.\n        zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n            layer. Defaults to True.\n        visible (bool, optional): Whether the layer is visible. Defaults to\n            True.\n        array_args (dict, optional): Additional arguments to pass to\n            `array_to_memory_file` when reading the raster. Defaults to {}.\n    \"\"\"\n\n    xds = None\n    if isinstance(source, str):\n\n        xds = read_emit(source)\n        source = emit_to_image(xds, wavelengths=wavelengths)\n    elif isinstance(source, xr.Dataset):\n        xds = source\n        source = emit_to_image(xds, wavelengths=wavelengths)\n\n    self.add_raster(\n        source,\n        indexes=indexes,\n        colormap=colormap,\n        vmin=vmin,\n        vmax=vmax,\n        nodata=nodata,\n        attribution=attribution,\n        layer_name=layer_name,\n        zoom_to_layer=zoom_to_layer,\n        visible=visible,\n        array_args=array_args,\n        **kwargs,\n    )\n\n    self.cog_layer_dict[layer_name][\"xds\"] = xds\n    self.cog_layer_dict[layer_name][\"hyper\"] = \"EMIT\"\n    self._update_band_names(layer_name, wavelengths)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.add_hyper","title":"<code>add_hyper(self, xds, type, wvl_indexes=None, **kwargs)</code>","text":"<p>Add a hyperspectral dataset to the map.</p> <p>Parameters:</p> Name Type Description Default <code>xds</code> <code>str</code> <p>The Xarray dataset containing the hyperspectral data.</p> required <code>type</code> <code>str</code> <p>The type of the hyperspectral dataset. Can be one of \"EMIT\", \"PACE\", \"DESIS\", \"NEON\", \"AVIRIS\".</p> required <code>**kwargs</code> <p>Additional keyword arguments to pass to the corresponding add function.</p> <code>{}</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def add_hyper(self, xds, type, wvl_indexes=None, **kwargs):\n    \"\"\"Add a hyperspectral dataset to the map.\n\n    Args:\n        xds (str): The Xarray dataset containing the hyperspectral data.\n        type (str): The type of the hyperspectral dataset. Can be one of\n            \"EMIT\", \"PACE\", \"DESIS\", \"NEON\", \"AVIRIS\".\n        **kwargs: Additional keyword arguments to pass to the corresponding\n            add function.\n    \"\"\"\n\n    if wvl_indexes is not None:\n        kwargs[\"wavelengths\"] = (\n            xds.isel(wavelength=wvl_indexes).coords[\"wavelength\"].values.tolist()\n        )\n\n    if type == \"EMIT\":\n        self.add_emit(xds, **kwargs)\n    elif type == \"PACE\":\n        self.add_pace(xds, **kwargs)\n    elif type == \"DESIS\":\n        self.add_desis(xds, **kwargs)\n    elif type == \"NEON\":\n        self.add_neon(xds, **kwargs)\n    elif type == \"AVIRIS\":\n        self.add_aviris(xds, **kwargs)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.add_neon","title":"<code>add_neon(self, source, wavelengths=None, indexes=None, colormap=None, vmin=0, vmax=0.5, nodata=nan, attribution=None, layer_name='NEON', zoom_to_layer=True, visible=True, array_args={}, method='nearest', **kwargs)</code>","text":"<p>Add an NEON AOP dataset to the map.     If you are using this function in JupyterHub on a remote server         (e.g., Binder, Microsoft Planetary Computer) and     if the raster does not render properly, try installing         jupyter-server-proxy using <code>pip install jupyter-server-proxy</code>,     then running the following code before calling this function. For         more info, see https://bit.ly/3JbmF93.</p> <pre><code>import os\nos.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The path to the NEON AOP HDF5 file.</p> required <code>indexes</code> <code>int</code> <p>The band(s) to use. Band indexing starts at 1. Defaults to None.</p> <code>None</code> <code>colormap</code> <code>str</code> <p>The name of the colormap from <code>matplotlib</code> to use when plotting a single band. See     https://matplotlib.org/stable/gallery/color/colormap_reference.html.     Default is greyscale.</p> <code>None</code> <code>vmin</code> <code>float</code> <p>The minimum value to use when colormapping the palette when plotting a single band. Defaults to 0.</p> <code>0</code> <code>vmax</code> <code>float</code> <p>The maximum value to use when colormapping the palette when plotting a single band. Defaults to 0.5.</p> <code>0.5</code> <code>nodata</code> <code>float</code> <p>The value from the band to use to interpret as not valid data. Defaults to np.nan.</p> <code>nan</code> <code>attribution</code> <code>str</code> <p>Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name to use. Defaults to 'NEON'.</p> <code>'NEON'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the extent of the layer. Defaults to True.</p> <code>True</code> <code>visible</code> <code>bool</code> <p>Whether the layer is visible. Defaults to True.</p> <code>True</code> <code>array_args</code> <code>dict</code> <p>Additional arguments to pass to <code>array_to_memory_file</code> when reading the raster. Defaults to {}.</p> <code>{}</code> <code>method</code> <code>str</code> <p>The method to use for data interpolation. Defaults to \"nearest\".</p> <code>'nearest'</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def add_neon(\n    self,\n    source,\n    wavelengths=None,\n    indexes=None,\n    colormap=None,\n    vmin=0,\n    vmax=0.5,\n    nodata=np.nan,\n    attribution=None,\n    layer_name=\"NEON\",\n    zoom_to_layer=True,\n    visible=True,\n    array_args={},\n    method=\"nearest\",\n    **kwargs,\n):\n    \"\"\"Add an NEON AOP dataset to the map.\n        If you are using this function in JupyterHub on a remote server\n            (e.g., Binder, Microsoft Planetary Computer) and\n        if the raster does not render properly, try installing\n            jupyter-server-proxy using `pip install jupyter-server-proxy`,\n        then running the following code before calling this function. For\n            more info, see https://bit.ly/3JbmF93.\n\n        import os\n        os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n    Args:\n        source (str): The path to the NEON AOP HDF5 file.\n        indexes (int, optional): The band(s) to use. Band indexing starts\n            at 1. Defaults to None.\n        colormap (str, optional): The name of the colormap from `matplotlib`\n            to use when plotting a single band. See\n                https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                Default is greyscale.\n        vmin (float, optional): The minimum value to use when colormapping\n            the palette when plotting a single band. Defaults to 0.\n        vmax (float, optional): The maximum value to use when colormapping\n            the palette when plotting a single band. Defaults to 0.5.\n        nodata (float, optional): The value from the band to use to\n            interpret as not valid data. Defaults to np.nan.\n        attribution (str, optional): Attribution for the source raster. This\n            defaults to a message about it being a local file.. Defaults to None.\n        layer_name (str, optional): The layer name to use. Defaults to 'NEON'.\n        zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n            layer. Defaults to True.\n        visible (bool, optional): Whether the layer is visible. Defaults\n            to True.\n        array_args (dict, optional): Additional arguments to pass to\n            `array_to_memory_file` when reading the raster. Defaults to {}.\n        method (str, optional): The method to use for data interpolation.\n            Defaults to \"nearest\".\n    \"\"\"\n\n    xds = None\n    if isinstance(source, str):\n\n        xds = read_neon(source)\n        source = neon_to_image(xds, wavelengths=wavelengths, method=method)\n    elif isinstance(source, xr.Dataset):\n        xds = source\n        source = neon_to_image(xds, wavelengths=wavelengths, method=method)\n\n    self.add_raster(\n        source,\n        indexes=indexes,\n        colormap=colormap,\n        vmin=vmin,\n        vmax=vmax,\n        nodata=nodata,\n        attribution=attribution,\n        layer_name=layer_name,\n        zoom_to_layer=zoom_to_layer,\n        visible=visible,\n        array_args=array_args,\n        **kwargs,\n    )\n\n    self.cog_layer_dict[layer_name][\"xds\"] = xds\n    self.cog_layer_dict[layer_name][\"hyper\"] = \"NEON\"\n    self._update_band_names(layer_name, wavelengths)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.add_pace","title":"<code>add_pace(self, source, wavelengths=None, indexes=None, colormap='jet', vmin=None, vmax=None, nodata=nan, attribution=None, layer_name='PACE', zoom_to_layer=True, visible=True, method='nearest', gridded=False, array_args={}, **kwargs)</code>","text":"<p>Add a PACE dataset to the map.     If you are using this function in JupyterHub on a remote server         (e.g., Binder, Microsoft Planetary Computer) and     if the raster does not render properly, try installing         jupyter-server-proxy using <code>pip install jupyter-server-proxy</code>,     then running the following code before calling this function. For         more info, see https://bit.ly/3JbmF93.</p> <pre><code>import os\nos.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The path to the GeoTIFF file or the URL of the Cloud Optimized GeoTIFF.</p> required <code>indexes</code> <code>int</code> <p>The band(s) to use. Band indexing starts at 1. Defaults to None.</p> <code>None</code> <code>colormap</code> <code>str</code> <p>The name of the colormap from <code>matplotlib</code> to use when plotting a single band. See     https://matplotlib.org/stable/gallery/color/colormap_reference.html.     Default is greyscale.</p> <code>'jet'</code> <code>vmin</code> <code>float</code> <p>The minimum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>vmax</code> <code>float</code> <p>The maximum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>nodata</code> <code>float</code> <p>The value from the band to use to interpret as not valid data. Defaults to None.</p> <code>nan</code> <code>attribution</code> <code>str</code> <p>Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name to use. Defaults to 'EMIT'.</p> <code>'PACE'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the extent of the layer. Defaults to True.</p> <code>True</code> <code>visible</code> <code>bool</code> <p>Whether the layer is visible. Defaults to True.</p> <code>True</code> <code>array_args</code> <code>dict</code> <p>Additional arguments to pass to <code>array_to_memory_file</code> when reading the raster. Defaults to {}.</p> <code>{}</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def add_pace(\n    self,\n    source,\n    wavelengths=None,\n    indexes=None,\n    colormap=\"jet\",\n    vmin=None,\n    vmax=None,\n    nodata=np.nan,\n    attribution=None,\n    layer_name=\"PACE\",\n    zoom_to_layer=True,\n    visible=True,\n    method=\"nearest\",\n    gridded=False,\n    array_args={},\n    **kwargs,\n):\n    \"\"\"Add a PACE dataset to the map.\n        If you are using this function in JupyterHub on a remote server\n            (e.g., Binder, Microsoft Planetary Computer) and\n        if the raster does not render properly, try installing\n            jupyter-server-proxy using `pip install jupyter-server-proxy`,\n        then running the following code before calling this function. For\n            more info, see https://bit.ly/3JbmF93.\n\n        import os\n        os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n    Args:\n        source (str): The path to the GeoTIFF file or the URL of the Cloud\n            Optimized GeoTIFF.\n        indexes (int, optional): The band(s) to use. Band indexing starts\n            at 1. Defaults to None.\n        colormap (str, optional): The name of the colormap from `matplotlib`\n            to use when plotting a single band. See\n                https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n                Default is greyscale.\n        vmin (float, optional): The minimum value to use when colormapping\n            the palette when plotting a single band. Defaults to None.\n        vmax (float, optional): The maximum value to use when colormapping\n            the palette when plotting a single band. Defaults to None.\n        nodata (float, optional): The value from the band to use to interpret\n            as not valid data. Defaults to None.\n        attribution (str, optional): Attribution for the source raster. This\n            defaults to a message about it being a local file.. Defaults to None.\n        layer_name (str, optional): The layer name to use. Defaults to 'EMIT'.\n        zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n            layer. Defaults to True.\n        visible (bool, optional): Whether the layer is visible. Defaults to True.\n        array_args (dict, optional): Additional arguments to pass to\n            `array_to_memory_file` when reading the raster. Defaults to {}.\n    \"\"\"\n\n    if isinstance(source, str):\n\n        source = read_pace(source)\n\n    image = pace_to_image(\n        source, wavelengths=wavelengths, method=method, gridded=gridded\n    )\n\n    if isinstance(wavelengths, list) and len(wavelengths) &gt; 1:\n        colormap = None\n\n    self.add_raster(\n        image,\n        indexes=indexes,\n        colormap=colormap,\n        vmin=vmin,\n        vmax=vmax,\n        nodata=nodata,\n        attribution=attribution,\n        layer_name=layer_name,\n        zoom_to_layer=zoom_to_layer,\n        visible=visible,\n        array_args=array_args,\n        **kwargs,\n    )\n\n    self.cog_layer_dict[layer_name][\"xds\"] = source\n    self.cog_layer_dict[layer_name][\"hyper\"] = \"PACE\"\n    self._update_band_names(layer_name, wavelengths)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.add_raster","title":"<code>add_raster(self, source, indexes=None, colormap=None, vmin=None, vmax=None, nodata=None, attribution=None, layer_name='Raster', zoom_to_layer=True, visible=True, array_args={}, **kwargs)</code>","text":"<p>Add a local raster dataset to the map.     If you are using this function in JupyterHub on a remote server         (e.g., Binder, Microsoft Planetary Computer) and     if the raster does not render properly, try installing         jupyter-server-proxy using <code>pip install jupyter-server-proxy</code>,     then running the following code before calling this function. For         more info, see https://bit.ly/3JbmF93.</p> <pre><code>import os\nos.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The path to the GeoTIFF file or the URL of the Cloud Optimized GeoTIFF.</p> required <code>indexes</code> <code>int</code> <p>The band(s) to use. Band indexing starts at 1. Defaults to None.</p> <code>None</code> <code>colormap</code> <code>str</code> <p>The name of the colormap from <code>matplotlib</code> to use when plotting a single band. See https://matplotlib.org/stable/gallery/color/colormap_reference.html. Default is greyscale.</p> <code>None</code> <code>vmin</code> <code>float</code> <p>The minimum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>vmax</code> <code>float</code> <p>The maximum value to use when colormapping the palette when plotting a single band. Defaults to None.</p> <code>None</code> <code>nodata</code> <code>float</code> <p>The value from the band to use to interpret as not valid data. Defaults to None.</p> <code>None</code> <code>attribution</code> <code>str</code> <p>Attribution for the source raster. This defaults to a message about it being a local file.. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name to use. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the extent of the layer. Defaults to True.</p> <code>True</code> <code>visible</code> <code>bool</code> <p>Whether the layer is visible. Defaults to True.</p> <code>True</code> <code>array_args</code> <code>dict</code> <p>Additional arguments to pass to <code>array_to_memory_file</code> when reading the raster. Defaults to {}.</p> <code>{}</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def add_raster(\n    self,\n    source,\n    indexes=None,\n    colormap=None,\n    vmin=None,\n    vmax=None,\n    nodata=None,\n    attribution=None,\n    layer_name=\"Raster\",\n    zoom_to_layer=True,\n    visible=True,\n    array_args={},\n    **kwargs,\n):\n    \"\"\"Add a local raster dataset to the map.\n        If you are using this function in JupyterHub on a remote server\n            (e.g., Binder, Microsoft Planetary Computer) and\n        if the raster does not render properly, try installing\n            jupyter-server-proxy using `pip install jupyter-server-proxy`,\n        then running the following code before calling this function. For\n            more info, see https://bit.ly/3JbmF93.\n\n        import os\n        os.environ['LOCALTILESERVER_CLIENT_PREFIX'] = 'proxy/{port}'\n\n    Args:\n        source (str): The path to the GeoTIFF file or the URL of the Cloud\n            Optimized GeoTIFF.\n        indexes (int, optional): The band(s) to use. Band indexing starts\n            at 1. Defaults to None.\n        colormap (str, optional): The name of the colormap from `matplotlib`\n            to use when plotting a single band. See\n            https://matplotlib.org/stable/gallery/color/colormap_reference.html.\n            Default is greyscale.\n        vmin (float, optional): The minimum value to use when colormapping\n            the palette when plotting a single band. Defaults to None.\n        vmax (float, optional): The maximum value to use when colormapping\n            the palette when plotting a single band. Defaults to None.\n        nodata (float, optional): The value from the band to use to interpret\n            as not valid data. Defaults to None.\n        attribution (str, optional): Attribution for the source raster. This\n            defaults to a message about it being a local file.. Defaults to None.\n        layer_name (str, optional): The layer name to use. Defaults to 'Raster'.\n        zoom_to_layer (bool, optional): Whether to zoom to the extent of the\n            layer. Defaults to True.\n        visible (bool, optional): Whether the layer is visible. Defaults to\n            True.\n        array_args (dict, optional): Additional arguments to pass to\n            `array_to_memory_file` when reading the raster. Defaults to {}.\n    \"\"\"\n\n    import numpy as np\n\n    if nodata is None:\n        nodata = np.nan\n    super().add_raster(\n        source,\n        indexes=indexes,\n        colormap=colormap,\n        vmin=vmin,\n        vmax=vmax,\n        nodata=nodata,\n        attribution=attribution,\n        layer_name=layer_name,\n        zoom_to_layer=zoom_to_layer,\n        visible=visible,\n        array_args=array_args,\n        **kwargs,\n    )\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.search_ecostress","title":"<code>search_ecostress(self, default_dataset='ECO_L2T_LSTE')</code>","text":"<p>Adds a NASA Earth Data search tool to the map with a default dataset for     ECOSTRESS.</p> <p>Parameters:</p> Name Type Description Default <code>default_dataset</code> <code>str</code> <p>The default dataset to search for. Defaults to \"ECO_L2T_LSTE\".</p> <code>'ECO_L2T_LSTE'</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def search_ecostress(self, default_dataset=\"ECO_L2T_LSTE\"):\n    \"\"\"\n    Adds a NASA Earth Data search tool to the map with a default dataset for\n        ECOSTRESS.\n\n    Args:\n        default_dataset (str, optional): The default dataset to search for.\n            Defaults to \"ECO_L2T_LSTE\".\n    \"\"\"\n    self.add(\"nasa_earth_data\", default_dataset=default_dataset)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.search_emit","title":"<code>search_emit(self, default_dataset='EMITL2ARFL')</code>","text":"<p>Adds a NASA Earth Data search tool to the map with a default dataset for     EMIT.</p> <p>Parameters:</p> Name Type Description Default <code>default_dataset</code> <code>str</code> <p>The default dataset to search for. Defaults to \"EMITL2ARFL\".</p> <code>'EMITL2ARFL'</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def search_emit(self, default_dataset=\"EMITL2ARFL\"):\n    \"\"\"\n    Adds a NASA Earth Data search tool to the map with a default dataset for\n        EMIT.\n\n    Args:\n        default_dataset (str, optional): The default dataset to search for.\n            Defaults to \"EMITL2ARFL\".\n    \"\"\"\n    self.add(\"nasa_earth_data\", default_dataset=default_dataset)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.search_pace","title":"<code>search_pace(self, default_dataset='PACE_OCI_L2_AOP_NRT')</code>","text":"<p>Adds a NASA Earth Data search tool to the map with a default dataset for     PACE.</p> <p>Parameters:</p> Name Type Description Default <code>default_dataset</code> <code>str</code> <p>The default dataset to search for. Defaults to \"PACE_OCI_L2_AOP_NRT\".</p> <code>'PACE_OCI_L2_AOP_NRT'</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def search_pace(self, default_dataset=\"PACE_OCI_L2_AOP_NRT\"):\n    \"\"\"\n    Adds a NASA Earth Data search tool to the map with a default dataset for\n        PACE.\n\n    Args:\n        default_dataset (str, optional): The default dataset to search for.\n            Defaults to \"PACE_OCI_L2_AOP_NRT\".\n    \"\"\"\n    self.add(\"nasa_earth_data\", default_dataset=default_dataset)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.set_plot_options","title":"<code>set_plot_options(self, add_marker_cluster=False, plot_type=None, overlay=False, position='bottomright', min_width=None, max_width=None, min_height=None, max_height=None, **kwargs)</code>","text":"<p>Sets plotting options.</p> <p>Parameters:</p> Name Type Description Default <code>add_marker_cluster</code> <code>bool</code> <p>Whether to add a marker cluster. Defaults to False.</p> <code>False</code> <code>sample_scale</code> <code>float</code> <p>A nominal scale in meters of the projection to sample in . Defaults to None.</p> required <code>plot_type</code> <code>str</code> <p>The plot type can be one of \"None\", \"bar\", \"scatter\" or \"hist\". Defaults to None.</p> <code>None</code> <code>overlay</code> <code>bool</code> <p>Whether to overlay plotted lines on the figure. Defaults to False.</p> <code>False</code> <code>position</code> <code>str</code> <p>Position of the control, can be \u2018bottomleft\u2019, \u2018bottomright\u2019, \u2018topleft\u2019, or \u2018topright\u2019. Defaults to 'bottomright'.</p> <code>'bottomright'</code> <code>min_width</code> <code>int</code> <p>Min width of the widget (in pixels), if None it will respect the content size. Defaults to None.</p> <code>None</code> <code>max_width</code> <code>int</code> <p>Max width of the widget (in pixels), if None it will respect the content size. Defaults to None.</p> <code>None</code> <code>min_height</code> <code>int</code> <p>Min height of the widget (in pixels), if None it will respect the content size. Defaults to None.</p> <code>None</code> <code>max_height</code> <code>int</code> <p>Max height of the widget (in pixels), if None it will respect the content size. Defaults to None.</p> <code>None</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def set_plot_options(\n    self,\n    add_marker_cluster=False,\n    plot_type=None,\n    overlay=False,\n    position=\"bottomright\",\n    min_width=None,\n    max_width=None,\n    min_height=None,\n    max_height=None,\n    **kwargs,\n):\n    \"\"\"Sets plotting options.\n\n    Args:\n        add_marker_cluster (bool, optional): Whether to add a marker cluster.\n            Defaults to False.\n        sample_scale (float, optional):  A nominal scale in meters of the\n            projection to sample in . Defaults to None.\n        plot_type (str, optional): The plot type can be one of \"None\", \"bar\",\n            \"scatter\" or \"hist\". Defaults to None.\n        overlay (bool, optional): Whether to overlay plotted lines on the\n            figure. Defaults to False.\n        position (str, optional): Position of the control, can be\n            \u2018bottomleft\u2019, \u2018bottomright\u2019, \u2018topleft\u2019, or \u2018topright\u2019. Defaults\n            to 'bottomright'.\n        min_width (int, optional): Min width of the widget (in pixels), if\n            None it will respect the content size. Defaults to None.\n        max_width (int, optional): Max width of the widget (in pixels), if\n            None it will respect the content size. Defaults to None.\n        min_height (int, optional): Min height of the widget (in pixels), if\n            None it will respect the content size. Defaults to None.\n        max_height (int, optional): Max height of the widget (in pixels), if\n            None it will respect the content size. Defaults to None.\n\n    \"\"\"\n    plot_options_dict = {}\n    plot_options_dict[\"add_marker_cluster\"] = add_marker_cluster\n    plot_options_dict[\"plot_type\"] = plot_type\n    plot_options_dict[\"overlay\"] = overlay\n    plot_options_dict[\"position\"] = position\n    plot_options_dict[\"min_width\"] = min_width\n    plot_options_dict[\"max_width\"] = max_width\n    plot_options_dict[\"min_height\"] = min_height\n    plot_options_dict[\"max_height\"] = max_height\n\n    for key in kwargs:\n        plot_options_dict[key] = kwargs[key]\n\n    self._plot_options = plot_options_dict\n\n    if not hasattr(self, \"_plot_marker_cluster\"):\n        self._plot_marker_cluster = ipyleaflet.MarkerCluster(name=\"Marker Cluster\")\n\n    if add_marker_cluster and (self._plot_marker_cluster not in self.layers):\n        self.add(self._plot_marker_cluster)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.spectral_to_csv","title":"<code>spectral_to_csv(self, filename, index=True, **kwargs)</code>","text":"<p>Saves the spectral data to a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The output CSV file.</p> required <code>index</code> <code>bool</code> <p>Whether to write the index. Defaults to True.</p> <code>True</code> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def spectral_to_csv(self, filename, index=True, **kwargs):\n    \"\"\"Saves the spectral data to a CSV file.\n\n    Args:\n        filename (str): The output CSV file.\n        index (bool, optional): Whether to write the index. Defaults to True.\n    \"\"\"\n    df = self.spectral_to_df()\n    df = df.rename_axis(\"band\")\n    df.to_csv(filename, index=index, **kwargs)\n</code></pre>"},{"location":"hypercoast/#hypercoast.hypercoast.Map.spectral_to_df","title":"<code>spectral_to_df(self, **kwargs)</code>","text":"<p>Converts the spectral data to a pandas DataFrame.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>The spectral data as a pandas DataFrame.</p> Source code in <code>hypercoast/hypercoast.py</code> <pre><code>def spectral_to_df(self, **kwargs):\n    \"\"\"Converts the spectral data to a pandas DataFrame.\n\n    Returns:\n        pd.DataFrame: The spectral data as a pandas DataFrame.\n    \"\"\"\n    import pandas as pd\n\n    df = pd.DataFrame(self._spectral_data, **kwargs)\n    return df\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>hypercoast is available on PyPI. To install hypercoast, run this command in your terminal:</p> <pre><code>pip install hypercoast\n</code></pre>"},{"location":"installation/#install-from-conda-forge","title":"Install from conda-forge","text":"<p>hypercoast is also available on conda-forge. If you have Anaconda or Miniconda installed on your computer, you can install hypercoast using the following command:</p> <pre><code>conda install -c conda-forge hypercoast\n</code></pre> <p>Alternatively, you can create a new conda environment and install hypercoast in the new environment. This is a good practice because it avoids potential conflicts with other packages installed in your base environment.</p> <pre><code>conda install -n base mamba -c conda-forge\nconda create -n hyper python=3.11\nconda activate hyper\nmamba install -c conda-forge hypercoast\n</code></pre>"},{"location":"installation/#install-from-github","title":"Install from GitHub","text":"<p>To install the development version from GitHub using Git, run the following command in your terminal:</p> <pre><code>pip install git+https://github.com/opengeos/hypercoast\n</code></pre>"},{"location":"neon/","title":"neon module","text":"<p>This module contains functions to read and process NEON AOP hyperspectral data. More info about the data can be found at https://bit.ly/3Rfszdc. The source code is adapted from https://bit.ly/3KwyZkn. Credit goes to the original authors.</p>"},{"location":"neon/#hypercoast.neon.extract_neon","title":"<code>extract_neon(ds, lat, lon)</code>","text":"<p>Extracts NEON AOP data from a given xarray Dataset.</p> <p>Parameters:</p> Name Type Description Default <code>ds</code> <code>xarray.Dataset</code> <p>The dataset containing the NEON AOP data.</p> required <code>lat</code> <code>float</code> <p>The latitude of the point to extract.</p> required <code>lon</code> <code>float</code> <p>The longitude of the point to extract.</p> required <p>Returns:</p> Type Description <code>xarray.DataArray</code> <p>The extracted data.</p> Source code in <code>hypercoast/neon.py</code> <pre><code>def extract_neon(ds, lat, lon):\n    \"\"\"\n    Extracts NEON AOP data from a given xarray Dataset.\n\n    Args:\n        ds (xarray.Dataset): The dataset containing the NEON AOP data.\n        lat (float): The latitude of the point to extract.\n        lon (float): The longitude of the point to extract.\n\n    Returns:\n        xarray.DataArray: The extracted data.\n    \"\"\"\n\n    crs = ds.attrs[\"crs\"]\n\n    x, y = convert_coords([[lat, lon]], \"epsg:4326\", crs)[0]\n\n    values = ds.sel(x=x, y=y, method=\"nearest\")[\"reflectance\"].values\n\n    da = xr.DataArray(\n        values, dims=[\"wavelength\"], coords={\"wavelength\": ds.coords[\"wavelength\"]}\n    )\n\n    return da\n</code></pre>"},{"location":"neon/#hypercoast.neon.list_neon_datasets","title":"<code>list_neon_datasets(filepath, print_node=False)</code>","text":"<p>Lists all the datasets in an HDF5 file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the HDF5 file.</p> required <code>print_node</code> <code>bool</code> <p>If True, prints the node object of each dataset. If False, prints the name of each dataset. Defaults to False.</p> <code>False</code> Source code in <code>hypercoast/neon.py</code> <pre><code>def list_neon_datasets(filepath: str, print_node: bool = False) -&gt; None:\n    \"\"\"\n    Lists all the datasets in an HDF5 file.\n\n    Args:\n        filepath (str): The path to the HDF5 file.\n        print_node (bool, optional): If True, prints the node object of each dataset.\n            If False, prints the name of each dataset. Defaults to False.\n    \"\"\"\n\n    f = h5py.File(filepath, \"r\")\n\n    if print_node:\n\n        def list_dataset(_, node):\n            if isinstance(node, h5py.Dataset):\n                print(node)\n\n    else:\n\n        def list_dataset(name, node):\n            if isinstance(node, h5py.Dataset):\n                print(name)\n\n    f.visititems(list_dataset)\n</code></pre>"},{"location":"neon/#hypercoast.neon.neon_to_image","title":"<code>neon_to_image(dataset, wavelengths=None, method='nearest', output=None, **kwargs)</code>","text":"<p>Converts an NEON dataset to an image.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Union[xr.Dataset, str]</code> <p>The dataset containing the NEON data or the file path to the dataset.</p> required <code>wavelengths</code> <code>np.ndarray</code> <p>The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for data interpolation. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>output</code> <code>str</code> <p>The file path where the image will be saved. If None, the image will be returned as a PIL Image object. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to be passed to <code>leafmap.array_to_image</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[rasterio.Dataset]</code> <p>The image converted from the dataset. If     <code>output</code> is provided, the image will be saved to the specified file     and the function will return None.</p> Source code in <code>hypercoast/neon.py</code> <pre><code>def neon_to_image(\n    dataset: Union[xr.Dataset, str],\n    wavelengths: Optional[np.ndarray] = None,\n    method: str = \"nearest\",\n    output: Optional[str] = None,\n    **kwargs: Any,\n):\n    \"\"\"\n    Converts an NEON dataset to an image.\n\n    Args:\n        dataset (Union[xr.Dataset, str]): The dataset containing the NEON data\n            or the file path to the dataset.\n        wavelengths (np.ndarray, optional): The specific wavelengths to select. If None, all\n            wavelengths are selected. Defaults to None.\n        method (str, optional): The method to use for data interpolation.\n            Defaults to \"nearest\".\n        output (str, optional): The file path where the image will be saved. If\n            None, the image will be returned as a PIL Image object. Defaults to None.\n        **kwargs (Any): Additional keyword arguments to be passed to\n            `leafmap.array_to_image`.\n\n    Returns:\n        Optional[rasterio.Dataset]: The image converted from the dataset. If\n            `output` is provided, the image will be saved to the specified file\n            and the function will return None.\n    \"\"\"\n    from leafmap import array_to_image\n\n    if isinstance(dataset, str):\n        dataset = read_neon(dataset, method=method)\n\n    if wavelengths is not None:\n        dataset = dataset.sel(wavelength=wavelengths, method=method)\n\n    return array_to_image(\n        dataset[\"reflectance\"],\n        output=output,\n        transpose=False,\n        dtype=np.float32,\n        **kwargs,\n    )\n</code></pre>"},{"location":"neon/#hypercoast.neon.read_neon","title":"<code>read_neon(filepath, wavelengths=None, method='nearest', **kwargs)</code>","text":"<p>Reads NEON AOP hyperspectral hdf5 files and returns an xarray dataset.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the hdf5 file.</p> required <code>wavelengths</code> <code>List[float]</code> <p>The wavelengths to select. If None, all wavelengths are selected. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for selection. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>**kwargs</code> <code>Any</code> <p>Additional arguments to pass to the selection method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.Dataset</code> <p>The dataset containing the reflectance data.</p> Source code in <code>hypercoast/neon.py</code> <pre><code>def read_neon(\n    filepath: str,\n    wavelengths: Optional[List[float]] = None,\n    method: str = \"nearest\",\n    **kwargs: Any,\n) -&gt; xr.Dataset:\n    \"\"\"\n    Reads NEON AOP hyperspectral hdf5 files and returns an xarray dataset.\n\n    Args:\n        filepath (str): The path to the hdf5 file.\n        wavelengths (List[float], optional): The wavelengths to select. If None,\n            all wavelengths are selected. Defaults to None.\n        method (str, optional): The method to use for selection. Defaults to\n            \"nearest\".\n        **kwargs (Any): Additional arguments to pass to the selection method.\n\n    Returns:\n        xr.Dataset: The dataset containing the reflectance data.\n    \"\"\"\n    with h5py.File(filepath, \"r\") as f:\n        # Extract site code dynamically from NEON HDF file metadata\n        # At the root of `keys` NEON stores the site code, which is the `root` folder at the [0] index of object `keys`\n        site_code = list(f.keys())[0]\n\n        # Access the reflectance data using the site code\n        site_refl = f[site_code][\"Reflectance\"]\n\n        # Extract wavelengths\n        wavelengths_list = site_refl[\"Metadata\"][\"Spectral_Data\"][\"Wavelength\"][\n            ()\n        ].tolist()\n        wavelengths_list = [round(num, 2) for num in wavelengths_list]\n\n        # Extract EPSG code\n        epsg_code = site_refl[\"Metadata\"][\"Coordinate_System\"][\"EPSG Code\"][()]\n        epsg_code_number = int(epsg_code.decode(\"utf-8\"))\n\n        # Extract map info\n        mapInfo_string = site_refl[\"Metadata\"][\"Coordinate_System\"][\"Map_Info\"][\n            ()\n        ].decode(\"utf-8\")\n        mapInfo_split = mapInfo_string.split(\",\")\n\n        res = float(mapInfo_split[5]), float(mapInfo_split[6])\n\n        # Extract reflectance array and shape\n        site_reflArray = site_refl[\"Reflectance_Data\"]\n        refl_shape = site_reflArray.shape\n\n        # Calculate coordinates\n        xMin = float(mapInfo_split[3])\n        yMax = float(mapInfo_split[4])\n\n        xMax = xMin + (refl_shape[1] * res[0])\n        yMin = yMax - (refl_shape[0] * res[1])\n\n        # Handle scale factor and no-data value\n        scaleFactor = site_reflArray.attrs[\"Scale_Factor\"]\n        noDataValue = site_reflArray.attrs[\"Data_Ignore_Value\"]\n\n        da = site_reflArray[:, :, :].astype(float)\n        da[da == int(noDataValue)] = np.nan\n        da[da &lt; 0] = np.nan\n        da[da &gt; 10000] = np.nan\n        da = da / scaleFactor\n\n        coords = {\n            \"y\": np.linspace(yMax, yMin, da.shape[0]),\n            \"x\": np.linspace(xMin, xMax, da.shape[1]),\n            \"wavelength\": wavelengths_list,\n        }\n\n        xda = xr.DataArray(\n            da,\n            coords=coords,\n            dims=[\"y\", \"x\", \"wavelength\"],\n            attrs={\n                \"scale_factor\": scaleFactor,\n                \"no_data_value\": noDataValue,\n                \"crs\": f\"EPSG:{epsg_code_number}\",\n                \"transform\": (res[0], 0.0, xMin, 0.0, -res[1], yMax),\n            },\n        )\n\n        if wavelengths is not None:\n            xda = xda.sel(wavelength=wavelengths, method=method, **kwargs)\n\n        dataset = xda.to_dataset(name=\"reflectance\")\n        dataset.attrs = dataset[\"reflectance\"].attrs\n\n    return dataset\n</code></pre>"},{"location":"pace/","title":"pace module","text":"<p>This module contains functions to read and process PACE data.</p>"},{"location":"pace/#hypercoast.pace.extract_pace","title":"<code>extract_pace(dataset, latitude, longitude, delta=0.01, return_plot=False, **kwargs)</code>","text":"<p>Extracts data from a PACE dataset for a given latitude and longitude range     and calculates the mean over these dimensions.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Union[xr.Dataset, str]</code> <p>The PACE dataset or path to the dataset file.</p> required <code>latitude</code> <code>Union[float, Tuple[float, float]]</code> <p>The latitude or range of latitudes to extract data for.</p> required <code>longitude</code> <code>Union[float, Tuple[float, float]]</code> <p>The longitude or range of longitudes to extract data for.</p> required <code>delta</code> <code>float</code> <p>The range to add/subtract to the latitude and longitude if they are not ranges. Defaults to 0.01.</p> <code>0.01</code> <code>return_plot</code> <code>bool</code> <p>Whether to return a plot of the data. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the plot function.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[xr.DataArray, plt.figure.Figure]</code> <p>The mean data over the latitude     and longitude dimensions, or a plot of this data if return_plot is True.</p> Source code in <code>hypercoast/pace.py</code> <pre><code>def extract_pace(\n    dataset: Union[xr.Dataset, str],\n    latitude: Union[float, Tuple[float, float]],\n    longitude: Union[float, Tuple[float, float]],\n    delta: float = 0.01,\n    return_plot: bool = False,\n    **kwargs,\n) -&gt; Union[xr.DataArray, plt.Figure]:\n    \"\"\"\n    Extracts data from a PACE dataset for a given latitude and longitude range\n        and calculates the mean over these dimensions.\n\n    Args:\n        dataset (Union[xr.Dataset, str]): The PACE dataset or path to the dataset file.\n        latitude (Union[float, Tuple[float, float]]): The latitude or range of\n            latitudes to extract data for.\n        longitude (Union[float, Tuple[float, float]]): The longitude or range of\n            longitudes to extract data for.\n        delta (float, optional): The range to add/subtract to the latitude and\n            longitude if they are not ranges. Defaults to 0.01.\n        return_plot (bool, optional): Whether to return a plot of the data. Defaults to False.\n        **kwargs: Additional keyword arguments to pass to the plot function.\n\n    Returns:\n        Union[xr.DataArray, plt.figure.Figure]: The mean data over the latitude\n            and longitude dimensions, or a plot of this data if return_plot is True.\n    \"\"\"\n    if isinstance(latitude, list) or isinstance(latitude, tuple):\n        pass\n    else:\n        latitude = (latitude - delta, latitude + delta)\n\n    if isinstance(longitude, list) or isinstance(longitude, tuple):\n        pass\n    else:\n        longitude = (longitude - delta, longitude + delta)\n\n    ds = filter_pace(dataset, latitude, longitude, return_plot=False)\n    data = ds.mean(dim=[\"latitude\", \"longitude\"])\n    if return_plot:\n        return data.plot.line(**kwargs)\n    else:\n        return data\n</code></pre>"},{"location":"pace/#hypercoast.pace.filter_pace","title":"<code>filter_pace(dataset, latitude, longitude, drop=True, return_plot=False, **kwargs)</code>","text":"<p>Filters a PACE dataset based on latitude and longitude.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>xr.Dataset</code> <p>The PACE dataset to filter.</p> required <code>latitude</code> <code>float or tuple</code> <p>The latitude to filter by. If a tuple or list, it represents a range.</p> required <code>longitude</code> <code>float or tuple</code> <p>The longitude to filter by. If a tuple or list, it represents a range.</p> required <code>drop</code> <code>bool</code> <p>Whether to drop the filtered out data. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>xr.DataArray</code> <p>The filtered PACE data.</p> Source code in <code>hypercoast/pace.py</code> <pre><code>def filter_pace(dataset, latitude, longitude, drop=True, return_plot=False, **kwargs):\n    \"\"\"\n    Filters a PACE dataset based on latitude and longitude.\n\n    Args:\n        dataset (xr.Dataset): The PACE dataset to filter.\n        latitude (float or tuple): The latitude to filter by. If a tuple or list, it represents a range.\n        longitude (float or tuple): The longitude to filter by. If a tuple or list, it represents a range.\n        drop (bool, optional): Whether to drop the filtered out data. Defaults to True.\n\n    Returns:\n        xr.DataArray: The filtered PACE data.\n    \"\"\"\n    if isinstance(latitude, list) or isinstance(latitude, tuple):\n        lat_con = (dataset[\"latitude\"] &gt; latitude[0]) &amp; (\n            dataset[\"latitude\"] &lt; latitude[1]\n        )\n    else:\n        lat_con = dataset[\"latitude\"] == latitude\n\n    if isinstance(longitude, list) or isinstance(longitude, tuple):\n        lon_con = (dataset[\"longitude\"] &gt; longitude[0]) &amp; (\n            dataset[\"longitude\"] &lt; longitude[1]\n        )\n    else:\n        lon_con = dataset[\"longitude\"] == longitude\n\n    da = dataset[\"Rrs\"].where(lat_con &amp; lon_con, drop=drop, **kwargs)\n    da_filtered = da.dropna(dim=\"latitude\", how=\"all\")\n    da_filtered = da_filtered.dropna(dim=\"longitude\", how=\"all\")\n\n    if return_plot:\n        rrs_stack = da_filtered.stack(\n            {\"pixel\": [\"latitude\", \"longitude\"]},\n            create_index=False,\n        )\n        rrs_stack.plot.line(hue=\"pixel\")\n    else:\n        return da_filtered\n</code></pre>"},{"location":"pace/#hypercoast.pace.grid_pace","title":"<code>grid_pace(dataset, wavelengths=None, method='nearest', **kwargs)</code>","text":"<p>Grids a PACE dataset based on latitude and longitude.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>xr.Dataset</code> <p>The PACE dataset to grid.</p> required <code>wavelengths</code> <code>float or int</code> <p>The wavelength to select.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for griddata interpolation. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the xr.Dataset constructor.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.DataArray</code> <p>The gridded PACE data.</p> Source code in <code>hypercoast/pace.py</code> <pre><code>def grid_pace(dataset, wavelengths=None, method=\"nearest\", **kwargs):\n    \"\"\"\n    Grids a PACE dataset based on latitude and longitude.\n\n    Args:\n        dataset (xr.Dataset): The PACE dataset to grid.\n        wavelengths (float or int): The wavelength to select.\n        method (str, optional): The method to use for griddata interpolation.\n            Defaults to \"nearest\".\n        **kwargs: Additional keyword arguments to pass to the xr.Dataset constructor.\n\n    Returns:\n        xr.DataArray: The gridded PACE data.\n    \"\"\"\n    from scipy.interpolate import griddata\n\n    if wavelengths is None:\n        wavelengths = dataset.coords[\"wavelength\"].values[0]\n\n    # Ensure wavelengths is a list\n    if not isinstance(wavelengths, list):\n        wavelengths = [wavelengths]\n\n    lat = dataset.latitude\n    lon = dataset.longitude\n\n    grid_lat = np.linspace(lat.min(), lat.max(), lat.shape[0])\n    grid_lon = np.linspace(lon.min(), lon.max(), lon.shape[1])\n    grid_lon_2d, grid_lat_2d = np.meshgrid(grid_lon, grid_lat)\n\n    gridded_data_dict = {}\n    for wavelength in wavelengths:\n        data = dataset.sel(wavelength=wavelength, method=method)[\"Rrs\"]\n        gridded_data = griddata(\n            (lat.data.flatten(), lon.data.flatten()),\n            data.data.flatten(),\n            (grid_lat_2d, grid_lon_2d),\n            method=method,\n        )\n        gridded_data_dict[wavelength] = gridded_data\n\n    # Create a 3D array with dimensions latitude, longitude, and wavelength\n    gridded_data_3d = np.dstack(list(gridded_data_dict.values()))\n\n    dataset2 = xr.Dataset(\n        {\"Rrs\": ((\"latitude\", \"longitude\", \"wavelength\"), gridded_data_3d)},\n        coords={\n            \"latitude\": (\"latitude\", grid_lat),\n            \"longitude\": (\"longitude\", grid_lon),\n            \"wavelength\": (\"wavelength\", list(gridded_data_dict.keys())),\n        },\n        **kwargs,\n    )\n\n    dataset2[\"Rrs\"].rio.write_crs(\"EPSG:4326\", inplace=True)\n\n    return dataset2\n</code></pre>"},{"location":"pace/#hypercoast.pace.grid_pace_bgc","title":"<code>grid_pace_bgc(dataset, variable='chlor_a', method='nearest', **kwargs)</code>","text":"<p>Grids PACE BGC data using specified interpolation method.</p> <p>This function takes an xarray Dataset containing PACE BGC data, interpolates it onto a regular grid using the specified method, and returns the gridded data as an xarray DataArray with the specified variable.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>xr.Dataset</code> <p>The input dataset containing PACE BGC data with latitude and longitude coordinates.</p> required <code>variable</code> <code>str</code> <p>The variable within the dataset to grid. Can be one of chlor_a, carbon_phyto, poc, chlor_a_unc, carbon_phyto_unc, and l2_flags. Defaults to \"chlor_a\".</p> <code>'chlor_a'</code> <code>method</code> <code>str</code> <p>The interpolation method to use. Options include \"nearest\", \"linear\", and \"cubic\". Defaults to \"nearest\".</p> <code>'nearest'</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the xr.Dataset creation.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.DataArray</code> <p>The gridded data as an xarray DataArray, with the specified variable and EPSG:4326 CRS.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = hypercoast.read_pace_bgc(\"path_to_your_dataset.nc\")\n&gt;&gt;&gt; gridded_data = grid_pace_bgc(dataset, variable=\"chlor_a\", method=\"nearest\")\n&gt;&gt;&gt; print(gridded_data)\n</code></pre> Source code in <code>hypercoast/pace.py</code> <pre><code>def grid_pace_bgc(\n    dataset: xr.Dataset,\n    variable: str = \"chlor_a\",\n    method: str = \"nearest\",\n    **kwargs: Any,\n) -&gt; xr.DataArray:\n    \"\"\"\n    Grids PACE BGC data using specified interpolation method.\n\n    This function takes an xarray Dataset containing PACE BGC data, interpolates it onto a regular grid\n    using the specified method, and returns the gridded data as an xarray DataArray with the specified\n    variable.\n\n    Args:\n        dataset (xr.Dataset): The input dataset containing PACE BGC data with latitude and longitude coordinates.\n        variable (str, optional): The variable within the dataset to grid. Can be\n           one of chlor_a, carbon_phyto, poc, chlor_a_unc, carbon_phyto_unc, and l2_flags.\n           Defaults to \"chlor_a\".\n        method (str, optional): The interpolation method to use. Options include \"nearest\", \"linear\", and \"cubic\".\n            Defaults to \"nearest\".\n        **kwargs (Any): Additional keyword arguments to pass to the xr.Dataset creation.\n\n    Returns:\n        xr.DataArray: The gridded data as an xarray DataArray, with the specified variable and EPSG:4326 CRS.\n\n    Example:\n        &gt;&gt;&gt; dataset = hypercoast.read_pace_bgc(\"path_to_your_dataset.nc\")\n        &gt;&gt;&gt; gridded_data = grid_pace_bgc(dataset, variable=\"chlor_a\", method=\"nearest\")\n        &gt;&gt;&gt; print(gridded_data)\n    \"\"\"\n    import rioxarray\n    from scipy.interpolate import griddata\n\n    lat = dataset.latitude\n    lon = dataset.longitude\n\n    grid_lat = np.linspace(lat.min(), lat.max(), lat.shape[0])\n    grid_lon = np.linspace(lon.min(), lon.max(), lon.shape[1])\n    grid_lon_2d, grid_lat_2d = np.meshgrid(grid_lon, grid_lat)\n\n    data = dataset[variable]\n    gridded_data = griddata(\n        (lat.data.flatten(), lon.data.flatten()),\n        data.data.flatten(),\n        (grid_lat_2d, grid_lon_2d),\n        method=method,\n    )\n\n    dataset2 = xr.Dataset(\n        {variable: ((\"latitude\", \"longitude\"), gridded_data)},\n        coords={\n            \"latitude\": (\"latitude\", grid_lat),\n            \"longitude\": (\"longitude\", grid_lon),\n        },\n        **kwargs,\n    )\n\n    dataset2 = dataset2[variable].rio.write_crs(\"EPSG:4326\")\n\n    return dataset2\n</code></pre>"},{"location":"pace/#hypercoast.pace.pace_chla_to_image","title":"<code>pace_chla_to_image(data, output=None, **kwargs)</code>","text":"<p>Converts PACE chlorophyll-a data to an image.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>xr.DataArray or str</code> <p>The chlorophyll-a data or the file path to the data.</p> required <code>output</code> <code>str</code> <p>The file path where the image will be saved. If None, the image will be returned as a PIL Image object. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to <code>leafmap.array_to_image</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>rasterio.Dataset or None</code> <p>The image converted from the data. If <code>output</code> is provided, the image will be saved to the specified file and the function will return None.</p> Source code in <code>hypercoast/pace.py</code> <pre><code>def pace_chla_to_image(data, output=None, **kwargs):\n    \"\"\"\n    Converts PACE chlorophyll-a data to an image.\n\n    Args:\n        data (xr.DataArray or str): The chlorophyll-a data or the file path to the data.\n        output (str, optional): The file path where the image will be saved. If None, the image will be returned as a PIL Image object. Defaults to None.\n        **kwargs: Additional keyword arguments to be passed to `leafmap.array_to_image`.\n\n    Returns:\n        rasterio.Dataset or None: The image converted from the data. If `output` is provided, the image will be saved to the specified file and the function will return None.\n    \"\"\"\n    from leafmap import array_to_image, image_to_geotiff\n\n    if isinstance(data, str):\n        data = read_pace_chla(data)\n    elif not isinstance(data, xr.DataArray):\n        raise ValueError(\"data must be an xarray DataArray\")\n\n    image = array_to_image(data, transpose=False, output=None, **kwargs)\n\n    if output is not None:\n        image_to_geotiff(image, output, dtype=\"float32\")\n\n    return image\n</code></pre>"},{"location":"pace/#hypercoast.pace.pace_to_image","title":"<code>pace_to_image(dataset, wavelengths=None, method='nearest', gridded=False, output=None, **kwargs)</code>","text":"<p>Converts an PACE dataset to an image.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>xarray.Dataset or str</code> <p>The dataset containing the EMIT data or the file path to the dataset.</p> required <code>wavelengths</code> <code>array-like</code> <p>The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.</p> <code>None</code> <code>method</code> <code>str</code> <p>The method to use for data interpolation. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>gridded</code> <code>bool</code> <p>Whether the dataset is a gridded dataset. Defaults to False,</p> <code>False</code> <code>output</code> <code>str</code> <p>The file path where the image will be saved. If None, the image will be returned as a PIL Image object. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments to be passed to <code>leafmap.array_to_image</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>rasterio.Dataset or None</code> <p>The image converted from the dataset. If <code>output</code> is provided, the image will be saved to the specified file and the function will return None.</p> Source code in <code>hypercoast/pace.py</code> <pre><code>def pace_to_image(\n    dataset, wavelengths=None, method=\"nearest\", gridded=False, output=None, **kwargs\n):\n    \"\"\"\n    Converts an PACE dataset to an image.\n\n    Args:\n        dataset (xarray.Dataset or str): The dataset containing the EMIT data or the file path to the dataset.\n        wavelengths (array-like, optional): The specific wavelengths to select. If None, all wavelengths are selected. Defaults to None.\n        method (str, optional): The method to use for data interpolation. Defaults to \"nearest\".\n        gridded (bool, optional): Whether the dataset is a gridded dataset. Defaults to False,\n        output (str, optional): The file path where the image will be saved. If None, the image will be returned as a PIL Image object. Defaults to None.\n        **kwargs: Additional keyword arguments to be passed to `leafmap.array_to_image`.\n\n    Returns:\n        rasterio.Dataset or None: The image converted from the dataset. If `output` is provided, the image will be saved to the specified file and the function will return None.\n    \"\"\"\n    from leafmap import array_to_image\n\n    if isinstance(dataset, str):\n        dataset = read_pace(dataset, wavelengths=wavelengths, method=\"nearest\")\n\n    if wavelengths is not None:\n        dataset = dataset.sel(wavelength=wavelengths, method=\"nearest\")\n\n    if not gridded:\n        grid = grid_pace(dataset, wavelengths=wavelengths, method=method)\n    else:\n        grid = dataset\n    data = grid[\"Rrs\"]\n    data.rio.write_crs(\"EPSG:4326\", inplace=True)\n\n    return array_to_image(data, transpose=False, output=output, **kwargs)\n</code></pre>"},{"location":"pace/#hypercoast.pace.read_pace","title":"<code>read_pace(filepath, wavelengths=None, method='nearest', engine='h5netcdf', **kwargs)</code>","text":"<p>Reads PACE data from a given file and returns an xarray Dataset.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to the file to read.</p> required <code>wavelengths</code> <code>array-like</code> <p>Specific wavelengths to select. If None, all wavelengths are selected.</p> <code>None</code> <code>method</code> <code>str</code> <p>Method to use for selection when wavelengths is not None. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the <code>sel</code> method when wavelengths is not None.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.Dataset</code> <p>An xarray Dataset containing the PACE data.</p> Source code in <code>hypercoast/pace.py</code> <pre><code>def read_pace(\n    filepath, wavelengths=None, method=\"nearest\", engine=\"h5netcdf\", **kwargs\n):\n    \"\"\"\n    Reads PACE data from a given file and returns an xarray Dataset.\n\n    Args:\n        filepath (str): Path to the file to read.\n        wavelengths (array-like, optional): Specific wavelengths to select. If None, all wavelengths are selected.\n        method (str, optional): Method to use for selection when wavelengths is not None. Defaults to \"nearest\".\n        **kwargs: Additional keyword arguments to pass to the `sel` method when wavelengths is not None.\n\n    Returns:\n        xr.Dataset: An xarray Dataset containing the PACE data.\n    \"\"\"\n\n    rrs = xr.open_dataset(filepath, engine=engine, group=\"geophysical_data\")[\"Rrs\"]\n    wvl = xr.open_dataset(filepath, engine=engine, group=\"sensor_band_parameters\")\n    dataset = xr.open_dataset(filepath, engine=engine, group=\"navigation_data\")\n    dataset = dataset.set_coords((\"longitude\", \"latitude\"))\n    dataset = dataset.rename({\"pixel_control_points\": \"pixels_per_line\"})\n    dataset = xr.merge([rrs, dataset.coords.to_dataset()])\n    dataset.coords[\"wavelength_3d\"] = wvl.coords[\"wavelength_3d\"]\n    dataset = dataset.rename(\n        {\n            \"number_of_lines\": \"latitude\",\n            \"pixels_per_line\": \"longitude\",\n            \"wavelength_3d\": \"wavelength\",\n        }\n    )\n\n    if wavelengths is not None:\n        dataset = dataset.sel(wavelength=wavelengths, method=method, **kwargs)\n\n    return dataset\n</code></pre>"},{"location":"pace/#hypercoast.pace.read_pace_aop","title":"<code>read_pace_aop(filepath, engine='h5netcdf', **kwargs)</code>","text":"<p>Reads PACE data from a given file and returns an xarray Dataset.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>Path to the file to read.</p> required <code>wavelengths</code> <code>array-like</code> <p>Specific wavelengths to select. If None, all wavelengths are selected.</p> required <code>method</code> <code>str</code> <p>Method to use for selection when wavelengths is not None. Defaults to \"nearest\".</p> required <code>**kwargs</code> <p>Additional keyword arguments to pass to the <code>sel</code> method when wavelengths is not None.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.Dataset</code> <p>An xarray Dataset containing the PACE data.</p> Source code in <code>hypercoast/pace.py</code> <pre><code>def read_pace_aop(filepath, engine=\"h5netcdf\", **kwargs):\n    \"\"\"\n    Reads PACE data from a given file and returns an xarray Dataset.\n\n    Args:\n        filepath (str): Path to the file to read.\n        wavelengths (array-like, optional): Specific wavelengths to select. If None, all wavelengths are selected.\n        method (str, optional): Method to use for selection when wavelengths is not None. Defaults to \"nearest\".\n        **kwargs: Additional keyword arguments to pass to the `sel` method when wavelengths is not None.\n\n    Returns:\n        xr.Dataset: An xarray Dataset containing the PACE data.\n    \"\"\"\n\n    rrs = xr.open_dataset(filepath, engine=engine, group=\"geophysical_data\", **kwargs)[\n        \"Rrs\"\n    ]\n    wvl = xr.open_dataset(\n        filepath, engine=engine, group=\"sensor_band_parameters\", **kwargs\n    )\n    dataset = xr.open_dataset(\n        filepath, engine=engine, group=\"navigation_data\", **kwargs\n    )\n    dataset = dataset.set_coords((\"longitude\", \"latitude\"))\n    dataset = dataset.rename({\"pixel_control_points\": \"pixels_per_line\"})\n    dataset = xr.merge([rrs, dataset.coords.to_dataset()])\n    dataset.coords[\"wavelength_3d\"] = wvl.coords[\"wavelength_3d\"]\n\n    return dataset\n</code></pre>"},{"location":"pace/#hypercoast.pace.read_pace_bgc","title":"<code>read_pace_bgc(filepath, variable=None, engine='h5netcdf', **kwargs)</code>","text":"<p>Reads PACE BGC data from a specified file and returns an xarray Dataset.</p> <p>This function opens a dataset from a file using the specified engine, optionally selects a single variable, merges geophysical and navigation data, sets appropriate coordinates, and renames dimensions for easier use.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the file containing the PACE BGC data.</p> required <code>variable</code> <code>Optional[str]</code> <p>The specific variable to extract from the geophysical_data group. If None, all variables are read. Defaults to None.</p> <code>None</code> <code>engine</code> <code>str</code> <p>The engine to use for reading the file. Defaults to \"h5netcdf\".</p> <code>'h5netcdf'</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>xr.open_dataset</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.Dataset</code> <p>An xarray Dataset containing the requested PACE BGC data, with merged geophysical and navigation data, set coordinates, and renamed dimensions.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = read_pace_bgc(\"path/to/your/datafile.h5\", variable=\"chlor_a\")\n&gt;&gt;&gt; print(dataset)\n</code></pre> Source code in <code>hypercoast/pace.py</code> <pre><code>def read_pace_bgc(\n    filepath: str,\n    variable: Optional[str] = None,\n    engine: str = \"h5netcdf\",\n    **kwargs: Any,\n) -&gt; xr.Dataset:\n    \"\"\"\n    Reads PACE BGC data from a specified file and returns an xarray Dataset.\n\n    This function opens a dataset from a file using the specified engine,\n    optionally selects a single variable, merges geophysical and navigation data,\n    sets appropriate coordinates, and renames dimensions for easier use.\n\n    Args:\n        filepath (str): The path to the file containing the PACE BGC data.\n        variable (Optional[str], optional): The specific variable to extract\n            from the geophysical_data group. If None, all variables are read. Defaults to None.\n        engine (str, optional): The engine to use for reading the file. Defaults to \"h5netcdf\".\n        **kwargs (Any): Additional keyword arguments to pass to `xr.open_dataset`.\n\n    Returns:\n        xr.Dataset: An xarray Dataset containing the requested PACE BGC data,\n        with merged geophysical and navigation data, set coordinates, and renamed dimensions.\n\n    Example:\n        &gt;&gt;&gt; dataset = read_pace_bgc(\"path/to/your/datafile.h5\", variable=\"chlor_a\")\n        &gt;&gt;&gt; print(dataset)\n    \"\"\"\n\n    ds = xr.open_dataset(filepath, engine=engine, group=\"geophysical_data\", **kwargs)\n    if variable is not None:\n        ds = ds[variable]\n    dataset = xr.open_dataset(\n        filepath, engine=engine, group=\"navigation_data\", **kwargs\n    )\n    dataset = dataset.set_coords((\"longitude\", \"latitude\"))\n    dataset = dataset.rename({\"pixel_control_points\": \"pixels_per_line\"})\n    dataset = xr.merge([ds, dataset.coords.to_dataset()])\n    dataset = dataset.rename(\n        {\n            \"number_of_lines\": \"latitude\",\n            \"pixels_per_line\": \"longitude\",\n        }\n    )\n    attrs = xr.open_dataset(filepath, engine=engine, **kwargs).attrs\n    dataset.attrs.update(attrs)\n\n    return dataset\n</code></pre>"},{"location":"pace/#hypercoast.pace.read_pace_chla","title":"<code>read_pace_chla(filepaths, engine='h5netcdf', **kwargs)</code>","text":"<p>Reads chlorophyll-a data from PACE files and applies a logarithmic transformation.</p> <p>This function supports reading from a single file or multiple files. For multiple files, it combines them into a single dataset. It then extracts the chlorophyll-a variable, applies a logarithmic transformation, and sets the coordinate reference system to EPSG:4326.</p> <p>Parameters:</p> Name Type Description Default <code>filepaths</code> <code>Union[str, List[str]]</code> <p>A string or a list of strings containing the file path(s) to the PACE chlorophyll-a data files.</p> required <code>engine</code> <code>str</code> <p>The backend engine to use for reading files. Defaults to \"h5netcdf\".</p> <code>'h5netcdf'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to <code>xr.open_dataset</code> or <code>xr.open_mfdataset</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>DataArray</code> <p>An xarray DataArray containing the logarithmically transformed chlorophyll-a data with updated attributes.</p> <p>Examples:</p> <p>Read chlorophyll-a data from a single file:</p> <pre><code>&gt;&gt;&gt; chla_data = read_pace_chla('path/to/single/file.nc')\n</code></pre> <p>Read and combine chlorophyll-a data from multiple files:</p> <pre><code>&gt;&gt;&gt; chla_data = read_pace_chla(['path/to/file1.nc', 'path/to/file2.nc'], combine='by_coords')\n</code></pre> Source code in <code>hypercoast/pace.py</code> <pre><code>def read_pace_chla(\n    filepaths: Union[str, List[str]], engine: str = \"h5netcdf\", **kwargs\n) -&gt; xr.DataArray:\n    \"\"\"\n    Reads chlorophyll-a data from PACE files and applies a logarithmic transformation.\n\n    This function supports reading from a single file or multiple files. For multiple files,\n    it combines them into a single dataset. It then extracts the chlorophyll-a variable,\n    applies a logarithmic transformation, and sets the coordinate reference system to EPSG:4326.\n\n    Args:\n        filepaths: A string or a list of strings containing the file path(s) to the PACE chlorophyll-a data files.\n        engine: The backend engine to use for reading files. Defaults to \"h5netcdf\".\n        **kwargs: Additional keyword arguments to pass to `xr.open_dataset` or `xr.open_mfdataset`.\n\n    Returns:\n        An xarray DataArray containing the logarithmically transformed chlorophyll-a data with updated attributes.\n\n    Examples:\n        Read chlorophyll-a data from a single file:\n        &gt;&gt;&gt; chla_data = read_pace_chla('path/to/single/file.nc')\n\n        Read and combine chlorophyll-a data from multiple files:\n        &gt;&gt;&gt; chla_data = read_pace_chla(['path/to/file1.nc', 'path/to/file2.nc'], combine='by_coords')\n    \"\"\"\n\n    import os\n    import glob\n    import rioxarray\n\n    date = None\n    if isinstance(filepaths, str) and os.path.isfile(filepaths):\n        filepaths = [filepaths]\n    if \"combine\" not in kwargs:\n        kwargs[\"combine\"] = \"nested\"\n    if \"concat_dim\" not in kwargs:\n        kwargs[\"concat_dim\"] = \"date\"\n    dataset = xr.open_mfdataset(filepaths, engine=engine, **kwargs)\n    if not isinstance(filepaths, list):\n        filepaths = glob.glob(filepaths)\n        filepaths.sort()\n\n    dates = [extract_date_from_filename(f) for f in filepaths]\n    date = [timestamp.strftime(\"%Y-%m-%d\") for timestamp in dates]\n    dataset = dataset.assign_coords(date=(\"date\", date))\n\n    chla = np.log10(dataset[\"chlor_a\"])\n    chla.attrs.update(\n        {\n            \"units\": f'lg({dataset[\"chlor_a\"].attrs[\"units\"]})',\n        }\n    )\n\n    if date is not None:\n        chla.attrs[\"date\"] = date\n\n    chla = chla.transpose(\"lat\", \"lon\", \"date\")\n\n    chla.rio.write_crs(\"EPSG:4326\", inplace=True)\n\n    return chla\n</code></pre>"},{"location":"pace/#hypercoast.pace.view_pace_pixel_locations","title":"<code>view_pace_pixel_locations(filepath, step=20, figsize=(8, 6), **kwargs)</code>","text":"<p>Visualizes a subset of PACE pixel locations on a scatter plot.</p> <p>This function reads PACE AOP data from a specified file, subsamples the data according to a step size, and plots the longitude and latitude of the selected pixels using a scatter plot.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the file containing the PACE AOP data.</p> required <code>step</code> <code>int</code> <p>The step size for subsampling the data. A smaller step size results in more data points being plotted. Defaults to 20.</p> <code>20</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to the <code>plot.scatter</code> method.</p> <code>{}</code> <p>Returns:</p> Type Description <code>plt.Figure</code> <p>A matplotlib figure object containing the scatter plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = view_pace_pixel_locations(\"path/to/your/datafile.h5\", step=10)\n&gt;&gt;&gt; plt.show()\n</code></pre> Source code in <code>hypercoast/pace.py</code> <pre><code>def view_pace_pixel_locations(\n    filepath: str, step: int = 20, figsize: Tuple[float, float] = (8, 6), **kwargs: Any\n) -&gt; plt.Figure:\n    \"\"\"\n    Visualizes a subset of PACE pixel locations on a scatter plot.\n\n    This function reads PACE AOP data from a specified file, subsamples the data according to a step size,\n    and plots the longitude and latitude of the selected pixels using a scatter plot.\n\n    Args:\n        filepath (str): The path to the file containing the PACE AOP data.\n        step (int, optional): The step size for subsampling the data. A smaller step size results in more\n            data points being plotted. Defaults to 20.\n        **kwargs (Any): Additional keyword arguments to pass to the `plot.scatter` method.\n\n    Returns:\n        plt.Figure: A matplotlib figure object containing the scatter plot.\n\n    Example:\n        &gt;&gt;&gt; plot = view_pace_pixel_locations(\"path/to/your/datafile.h5\", step=10)\n        &gt;&gt;&gt; plt.show()\n    \"\"\"\n\n    # Create a new figure\n    fig, ax = plt.subplots(figsize=figsize)\n\n    # Create the plot\n    dataset = read_pace_aop(filepath)\n    number_of_lines = dataset.dims[\"number_of_lines\"]\n    pixels_per_line = dataset.dims[\"pixels_per_line\"]\n\n    ax.scatter(\n        dataset.sel(\n            {\n                \"number_of_lines\": slice(None, None, number_of_lines // step),\n                \"pixels_per_line\": slice(None, None, pixels_per_line // step),\n            }\n        ).longitude,\n        dataset.sel(\n            {\n                \"number_of_lines\": slice(None, None, number_of_lines // step),\n                \"pixels_per_line\": slice(None, None, pixels_per_line // step),\n            }\n        ).latitude,\n        **kwargs,\n    )\n\n    # Set labels and title\n    ax.set_xlabel(\"Longitude\")\n    ax.set_ylabel(\"Latitude\")\n    ax.set_title(\"PACE Pixel Locations\")\n\n    return fig\n</code></pre>"},{"location":"pace/#hypercoast.pace.viz_pace","title":"<code>viz_pace(dataset, wavelengths=None, method='nearest', figsize=(6.4, 4.8), cmap='jet', vmin=0, vmax=0.02, ncols=1, crs=None, xlim=None, ylim=None, **kwargs)</code>","text":"<p>Plots PACE data from a given xarray Dataset.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>xr.Dataset</code> <p>An xarray Dataset containing the PACE data.</p> required <code>wavelengths</code> <code>array-like</code> <p>Specific wavelengths to select. If None, all wavelengths are selected.</p> <code>None</code> <code>method</code> <code>str</code> <p>Method to use for selection when wavelengths is not None. Defaults to \"nearest\".</p> <code>'nearest'</code> <code>figsize</code> <code>tuple</code> <p>Figure size. Defaults to (6.4, 4.8).</p> <code>(6.4, 4.8)</code> <code>cmap</code> <code>str</code> <p>Colormap to use. Defaults to \"jet\".</p> <code>'jet'</code> <code>vmin</code> <code>float</code> <p>Minimum value for the colormap. Defaults to 0.</p> <code>0</code> <code>vmax</code> <code>float</code> <p>Maximum value for the colormap. Defaults to 0.02.</p> <code>0.02</code> <code>ncols</code> <code>int</code> <p>Number of columns in the plot. Defaults to 1.</p> <code>1</code> <code>crs</code> <code>str or cartopy.crs.CRS</code> <p>Coordinate reference system to use. If None, a simple plot is created. Defaults to None. See https://scitools.org.uk/cartopy/docs/latest/reference/projections.html</p> <code>None</code> <code>xlim</code> <code>array-like</code> <p>Limits for the x-axis. Defaults to None.</p> <code>None</code> <code>ylim</code> <code>array-like</code> <p>Limits for the y-axis. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the <code>plt.subplots</code> function.</p> <code>{}</code> Source code in <code>hypercoast/pace.py</code> <pre><code>def viz_pace(\n    dataset: Union[xr.Dataset, str],\n    wavelengths: Optional[Union[List[float], float]] = None,\n    method: str = \"nearest\",\n    figsize: Tuple[float, float] = (6.4, 4.8),\n    cmap: str = \"jet\",\n    vmin: float = 0,\n    vmax: float = 0.02,\n    ncols: int = 1,\n    crs: Optional[str] = None,\n    xlim: Optional[List[float]] = None,\n    ylim: Optional[List[float]] = None,\n    **kwargs,\n):\n    \"\"\"\n    Plots PACE data from a given xarray Dataset.\n\n    Args:\n        dataset (xr.Dataset): An xarray Dataset containing the PACE data.\n        wavelengths (array-like, optional): Specific wavelengths to select. If None, all wavelengths are selected.\n        method (str, optional): Method to use for selection when wavelengths is not None. Defaults to \"nearest\".\n        figsize (tuple, optional): Figure size. Defaults to (6.4, 4.8).\n        cmap (str, optional): Colormap to use. Defaults to \"jet\".\n        vmin (float, optional): Minimum value for the colormap. Defaults to 0.\n        vmax (float, optional): Maximum value for the colormap. Defaults to 0.02.\n        ncols (int, optional): Number of columns in the plot. Defaults to 1.\n        crs (str or cartopy.crs.CRS, optional): Coordinate reference system to use. If None, a simple plot is created. Defaults to None.\n            See https://scitools.org.uk/cartopy/docs/latest/reference/projections.html\n        xlim (array-like, optional): Limits for the x-axis. Defaults to None.\n        ylim (array-like, optional): Limits for the y-axis. Defaults to None.\n        **kwargs: Additional keyword arguments to pass to the `plt.subplots` function.\n    \"\"\"\n\n    import matplotlib.pyplot as plt\n    import numpy as np\n    import math\n\n    if isinstance(dataset, str):\n        dataset = read_pace(dataset, wavelengths, method)\n\n    if wavelengths is not None:\n        if not isinstance(wavelengths, list):\n            wavelengths = [wavelengths]\n        dataset = dataset.sel(wavelength=wavelengths, method=method)\n    else:\n        wavelengths = dataset.coords[\"wavelength\"][0].values.tolist()\n\n    lat = dataset.coords[\"latitude\"]\n    lon = dataset.coords[\"longitude\"]\n\n    nrows = math.ceil(len(wavelengths) / ncols)\n\n    if crs is None:\n\n        fig, axes = plt.subplots(\n            nrows=nrows,\n            ncols=ncols,\n            figsize=(figsize[0] * ncols, figsize[1] * nrows),\n            **kwargs,\n        )\n\n        for i in range(nrows):\n            for j in range(ncols):\n                index = i * ncols + j\n                if index &lt; len(wavelengths):\n                    wavelength = wavelengths[index]\n                    data = dataset.sel(wavelength=wavelength, method=method)[\"Rrs\"]\n\n                    if min(nrows, ncols) == 1:\n                        ax = axes[index]\n                    else:\n                        ax = axes[i, j]\n                    im = ax.pcolormesh(\n                        lon, lat, np.squeeze(data), cmap=cmap, vmin=vmin, vmax=vmax\n                    )\n                    ax.set_xlabel(\"Longitude\")\n                    ax.set_ylabel(\"Latitude\")\n                    ax.set_title(\n                        f\"wavelength = {dataset.coords['wavelength'].values[index]} [nm]\"\n                    )\n                    fig.colorbar(im, ax=ax, label=\"Reflectance\")\n\n        plt.tight_layout()\n        plt.show()\n\n    else:\n\n        import cartopy\n        from cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter\n\n        if crs == \"default\":\n            crs = cartopy.crs.PlateCarree()\n\n        if xlim is None:\n            xlim = [math.floor(lon.min()), math.ceil(lon.max())]\n\n        if ylim is None:\n            ylim = [math.floor(lat.min()), math.ceil(lat.max())]\n\n        fig, axes = plt.subplots(\n            nrows=nrows,\n            ncols=ncols,\n            figsize=(figsize[0] * ncols, figsize[1] * nrows),\n            subplot_kw={\"projection\": cartopy.crs.PlateCarree()},\n            **kwargs,\n        )\n\n        for i in range(nrows):\n            for j in range(ncols):\n                index = i * ncols + j\n                if index &lt; len(wavelengths):\n                    wavelength = wavelengths[index]\n                    data = dataset.sel(wavelength=wavelength, method=method)[\"Rrs\"]\n\n                    if min(nrows, ncols) == 1:\n                        ax = axes[index]\n                    else:\n                        ax = axes[i, j]\n                    im = ax.pcolormesh(lon, lat, data, cmap=\"jet\", vmin=0, vmax=0.02)\n                    ax.coastlines()\n                    ax.add_feature(cartopy.feature.STATES, linewidth=0.5)\n                    ax.set_xticks(np.linspace(xlim[0], xlim[1], 5), crs=crs)\n                    ax.set_yticks(np.linspace(ylim[0], ylim[1], 5), crs=crs)\n                    lon_formatter = LongitudeFormatter(zero_direction_label=True)\n                    lat_formatter = LatitudeFormatter()\n                    ax.xaxis.set_major_formatter(lon_formatter)\n                    ax.yaxis.set_major_formatter(lat_formatter)\n                    ax.set_xlabel(\"Longitude\")\n                    ax.set_ylabel(\"Latitude\")\n                    ax.set_title(\n                        f\"wavelength = {dataset.coords['wavelength'].values[index]} [nm]\"\n                    )\n                    plt.colorbar(im, label=\"Reflectance\")\n\n        plt.tight_layout()\n        plt.show()\n</code></pre>"},{"location":"pace/#hypercoast.pace.viz_pace_chla","title":"<code>viz_pace_chla(data, date=None, aspect=2, cmap='jet', size=6, **kwargs)</code>","text":"<p>Visualizes PACE chlorophyll-a data using an xarray DataArray.</p> <p>This function supports loading data from a file path (str) or directly using an xarray DataArray. It allows for selection of a specific date for visualization or averages over all dates if none is specified.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[str, xr.DataArray]</code> <p>The chlorophyll-a data to visualize. Can be a file path or an xarray DataArray.</p> required <code>date</code> <code>Optional[str]</code> <p>Specific date to visualize. If None, averages over all dates. Defaults to None.</p> <code>None</code> <code>aspect</code> <code>float</code> <p>Aspect ratio of the plot. Defaults to 2.</p> <code>2</code> <code>cmap</code> <code>str</code> <p>Colormap for the plot. Defaults to \"jet\".</p> <code>'jet'</code> <code>size</code> <code>int</code> <p>Size of the plot. Defaults to 6.</p> <code>6</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to <code>xarray.plot</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>xr.plot.facetgrid.FacetGrid</code> <p>The plot generated from the chlorophyll-a data.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If <code>data</code> is not a file path (str) or an xarray DataArray.</p> Source code in <code>hypercoast/pace.py</code> <pre><code>def viz_pace_chla(\n    data: Union[str, xr.DataArray],\n    date: Optional[str] = None,\n    aspect: float = 2,\n    cmap: str = \"jet\",\n    size: int = 6,\n    **kwargs: Any,\n) -&gt; xr.plot.facetgrid.FacetGrid:\n    \"\"\"\n    Visualizes PACE chlorophyll-a data using an xarray DataArray.\n\n    This function supports loading data from a file path (str) or directly using an xarray DataArray.\n    It allows for selection of a specific date for visualization or averages over all dates if none is specified.\n\n    Args:\n        data (Union[str, xr.DataArray]): The chlorophyll-a data to visualize. Can be a file path or an xarray DataArray.\n        date (Optional[str], optional): Specific date to visualize. If None, averages over all dates. Defaults to None.\n        aspect (float, optional): Aspect ratio of the plot. Defaults to 2.\n        cmap (str, optional): Colormap for the plot. Defaults to \"jet\".\n        size (int, optional): Size of the plot. Defaults to 6.\n        **kwargs (Any): Additional keyword arguments to pass to `xarray.plot`.\n\n    Returns:\n        xr.plot.facetgrid.FacetGrid: The plot generated from the chlorophyll-a data.\n\n    Raises:\n        ValueError: If `data` is not a file path (str) or an xarray DataArray.\n    \"\"\"\n    if isinstance(data, str):\n        data = read_pace_chla(data)\n    elif not isinstance(data, xr.DataArray):\n        raise ValueError(\"data must be an xarray DataArray\")\n\n    if date is not None:\n        data = data.sel(date=date)\n    else:\n        if \"date\" in data.coords:\n            data = data.mean(dim=\"date\")\n\n    return data.plot(aspect=aspect, cmap=cmap, size=size, **kwargs)\n</code></pre>"},{"location":"ui/","title":"ui module","text":"<p>This module contains the user interface for the hypercoast package.</p>"},{"location":"ui/#hypercoast.ui.SpectralWidget","title":"<code> SpectralWidget            (HBox)         </code>","text":"<p>A widget for spectral data visualization on a map.</p> <p>Attributes:</p> Name Type Description <code>_host_map</code> <code>Map</code> <p>The map to host the widget.</p> <code>on_close</code> <code>function</code> <p>Function to be called when the widget is closed.</p> <code>_output_widget</code> <code>widgets.Output</code> <p>The output widget to display results.</p> <code>_output_control</code> <code>ipyleaflet.WidgetControl</code> <p>The control for the output widget.</p> <code>_on_map_interaction</code> <code>function</code> <p>Function to handle map interactions.</p> <code>_spectral_widget</code> <code>SpectralWidget</code> <p>The spectral widget itself.</p> <code>_spectral_control</code> <code>ipyleaflet.WidgetControl</code> <p>The control for the spectral widget.</p> Source code in <code>hypercoast/ui.py</code> <pre><code>class SpectralWidget(widgets.HBox):\n    \"\"\"\n    A widget for spectral data visualization on a map.\n\n    Attributes:\n        _host_map (Map): The map to host the widget.\n        on_close (function): Function to be called when the widget is closed.\n        _output_widget (widgets.Output): The output widget to display results.\n        _output_control (ipyleaflet.WidgetControl): The control for the output widget.\n        _on_map_interaction (function): Function to handle map interactions.\n        _spectral_widget (SpectralWidget): The spectral widget itself.\n        _spectral_control (ipyleaflet.WidgetControl): The control for the spectral widget.\n    \"\"\"\n\n    def __init__(self, host_map, stack=True, position=\"topright\"):\n        \"\"\"\n        Initializes a new instance of the SpectralWidget class.\n\n        Args:\n            host_map (Map): The map to host the widget.\n            position (str, optional): The position of the widget on the map. Defaults to \"topright\".\n        \"\"\"\n        self._host_map = host_map\n        self.on_close = None\n        self._stack = stack\n        self._show_plot = False\n\n        fig_margin = {\"top\": 20, \"bottom\": 35, \"left\": 50, \"right\": 20}\n        fig = plt.figure(\n            # title=None,\n            fig_margin=fig_margin,\n            layout={\"width\": \"500px\", \"height\": \"300px\"},\n        )\n\n        self._fig = fig\n        self._host_map._fig = fig\n\n        layer_names = list(host_map.cog_layer_dict.keys())\n        layers_widget = widgets.Dropdown(options=layer_names)\n        layers_widget.layout.width = \"18ex\"\n\n        close_btn = widgets.Button(\n            icon=\"times\",\n            tooltip=\"Close the widget\",\n            button_style=\"primary\",\n            layout=widgets.Layout(width=\"32px\"),\n        )\n\n        reset_btn = widgets.Button(\n            icon=\"trash\",\n            tooltip=\"Remove all markers\",\n            button_style=\"primary\",\n            layout=widgets.Layout(width=\"32px\"),\n        )\n\n        settings_btn = widgets.Button(\n            icon=\"gear\",\n            tooltip=\"Change layer settings\",\n            button_style=\"primary\",\n            layout=widgets.Layout(width=\"32px\"),\n        )\n\n        stack_btn = widgets.ToggleButton(\n            value=stack,\n            icon=\"area-chart\",\n            button_style=\"primary\",\n            layout=widgets.Layout(width=\"32px\"),\n        )\n\n        def settings_btn_click(_):\n            self._host_map._add_layer_editor(\n                position=\"topright\",\n                layer_dict=self._host_map.cog_layer_dict[layers_widget.value],\n            )\n\n        settings_btn.on_click(settings_btn_click)\n\n        def reset_btn_click(_):\n            if hasattr(self._host_map, \"_plot_marker_cluster\"):\n                self._host_map._plot_marker_cluster.markers = []\n                self._host_map._plot_markers = []\n\n            if hasattr(self._host_map, \"_spectral_data\"):\n                self._host_map._spectral_data = {}\n\n            self._output_widget.clear_output()\n            self._show_plot = False\n            plt.clear()\n\n        reset_btn.on_click(reset_btn_click)\n\n        save_btn = widgets.Button(\n            icon=\"floppy-o\",\n            tooltip=\"Save the data to a CSV\",\n            button_style=\"primary\",\n            layout=widgets.Layout(width=\"32px\"),\n        )\n\n        def chooser_callback(chooser):\n            if chooser.selected:\n                file_path = chooser.selected\n                self._host_map.spectral_to_csv(file_path)\n                if (\n                    hasattr(self._host_map, \"_file_chooser_control\")\n                    and self._host_map._file_chooser_control in self._host_map.controls\n                ):\n                    self._host_map.remove_control(self._host_map._file_chooser_control)\n                    self._host_map._file_chooser.close()\n\n        def save_btn_click(_):\n            if not hasattr(self._host_map, \"_spectral_data\"):\n                return\n\n            self._output_widget.clear_output()\n            file_chooser = FileChooser(\n                os.getcwd(), layout=widgets.Layout(width=\"454px\")\n            )\n            file_chooser.filter_pattern = \"*.csv\"\n            file_chooser.use_dir_icons = True\n            file_chooser.title = \"Save spectral data to a CSV file\"\n            file_chooser.default_filename = \"spectral_data.csv\"\n            file_chooser.show_hidden = False\n            file_chooser.register_callback(chooser_callback)\n            file_chooser_control = ipyleaflet.WidgetControl(\n                widget=file_chooser, position=\"topright\"\n            )\n            self._host_map.add(file_chooser_control)\n            setattr(self._host_map, \"_file_chooser\", file_chooser)\n            setattr(self._host_map, \"_file_chooser_control\", file_chooser_control)\n\n        save_btn.on_click(save_btn_click)\n\n        def close_widget(_):\n            self.cleanup()\n\n        close_btn.on_click(close_widget)\n\n        super().__init__(\n            [layers_widget, settings_btn, stack_btn, reset_btn, save_btn, close_btn]\n        )\n\n        output = widgets.Output()\n        output_control = ipyleaflet.WidgetControl(widget=output, position=\"bottomright\")\n        self._output_widget = output\n        self._output_control = output_control\n        self._host_map.add(output_control)\n\n        if not hasattr(self._host_map, \"_spectral_data\"):\n            self._host_map._spectral_data = {}\n\n        def handle_interaction(**kwargs):\n\n            latlon = kwargs.get(\"coordinates\")\n            lat = latlon[0]\n            lon = latlon[1]\n            if kwargs.get(\"type\") == \"click\" and self._host_map._layer_editor is None:\n                layer_name = layers_widget.value\n\n                if not hasattr(self._host_map, \"_plot_markers\"):\n                    self._host_map._plot_markers = []\n                markers = self._host_map._plot_markers\n                marker_cluster = self._host_map._plot_marker_cluster\n                markers.append(ipyleaflet.Marker(location=latlon, draggable=False))\n                marker_cluster.markers = markers\n                self._host_map._plot_marker_cluster = marker_cluster\n\n                ds = self._host_map.cog_layer_dict[layer_name][\"xds\"]\n                if self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"EMIT\":\n                    da = ds.sel(latitude=lat, longitude=lon, method=\"nearest\")[\n                        \"reflectance\"\n                    ]\n\n                    if \"wavelength\" not in self._host_map._spectral_data:\n                        self._host_map._spectral_data[\"wavelength\"] = ds[\n                            \"wavelength\"\n                        ].values\n                elif self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"PACE\":\n                    try:\n                        da = extract_pace(ds, lat, lon)\n                    except:\n                        da = xr.DataArray(\n                            np.full(len(ds[\"wavelength\"]), np.nan),\n                            dims=[\"wavelength\"],\n                            coords={\"wavelength\": ds[\"wavelength\"]},\n                        )\n                    if \"wavelengths\" not in self._host_map._spectral_data:\n                        self._host_map._spectral_data[\"wavelengths\"] = ds[\n                            \"wavelength\"\n                        ].values\n\n                elif self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"DESIS\":\n                    da = extract_desis(ds, lat, lon)\n\n                elif self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"NEON\":\n                    da = extract_neon(ds, lat, lon)\n\n                elif self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"AVIRIS\":\n                    da = extract_aviris(ds, lat, lon)\n\n                self._host_map._spectral_data[f\"({lat:.4f} {lon:.4f})\"] = da.values\n\n                da[da &lt; 0] = np.nan\n                axes_options = {\n                    \"x\": {\"label_offset\": \"30px\"},\n                    \"y\": {\"label_offset\": \"35px\"},\n                }\n\n                if not stack_btn.value:\n                    plt.clear()\n                    plt.plot(\n                        da.coords[da.dims[0]].values,\n                        da.values,\n                        axes_options=axes_options,\n                    )\n                else:\n                    color = np.random.rand(\n                        3,\n                    )\n                    plt.plot(\n                        da.coords[da.dims[0]].values,\n                        da.values,\n                        color=color,\n                        axes_options=axes_options,\n                    )\n                    try:\n                        if isinstance(self._fig.axes[0], bqplot.ColorAxis):\n                            self._fig.axes = self._fig.axes[1:]\n                        elif isinstance(self._fig.axes[-1], bqplot.ColorAxis):\n                            self._fig.axes = self._fig.axes[:-1]\n                    except:\n                        pass\n                plt.xlabel(\"Wavelength (nm)\")\n                plt.ylabel(\"Reflectance\")\n\n                if not self._show_plot:\n                    with self._output_widget:\n                        plt.show()\n                        self._show_plot = True\n\n                self._host_map.default_style = {\"cursor\": \"crosshair\"}\n\n        self._host_map.on_interaction(handle_interaction)\n        self._on_map_interaction = handle_interaction\n\n        self._spectral_widget = self\n        self._spectral_control = ipyleaflet.WidgetControl(\n            widget=self, position=position\n        )\n        self._host_map.add(self._spectral_control)\n\n    def cleanup(self):\n        \"\"\"Removes the widget from the map and performs cleanup.\"\"\"\n        if self._host_map:\n            self._host_map.default_style = {\"cursor\": \"default\"}\n            self._host_map.on_interaction(self._on_map_interaction, remove=True)\n\n            if self._output_control:\n                self._host_map.remove_control(self._output_control)\n\n                if self._output_widget:\n                    self._output_widget.close()\n                    self._output_widget = None\n\n            if self._spectral_control:\n                self._host_map.remove_control(self._spectral_control)\n                self._spectral_control = None\n\n                if self._spectral_widget:\n                    self._spectral_widget.close()\n                    self._spectral_widget = None\n\n            if hasattr(self._host_map, \"_plot_marker_cluster\"):\n                self._host_map._plot_marker_cluster.markers = []\n                self._host_map._plot_markers = []\n\n            if hasattr(self._host_map, \"_spectral_data\"):\n                self._host_map._spectral_data = {}\n\n            if hasattr(self, \"_output_widget\") and self._output_widget is not None:\n                self._output_widget.clear_output()\n\n        if self.on_close is not None:\n            self.on_close()\n</code></pre>"},{"location":"ui/#hypercoast.ui.SpectralWidget.__init__","title":"<code>__init__(self, host_map, stack=True, position='topright')</code>  <code>special</code>","text":"<p>Initializes a new instance of the SpectralWidget class.</p> <p>Parameters:</p> Name Type Description Default <code>host_map</code> <code>Map</code> <p>The map to host the widget.</p> required <code>position</code> <code>str</code> <p>The position of the widget on the map. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>hypercoast/ui.py</code> <pre><code>def __init__(self, host_map, stack=True, position=\"topright\"):\n    \"\"\"\n    Initializes a new instance of the SpectralWidget class.\n\n    Args:\n        host_map (Map): The map to host the widget.\n        position (str, optional): The position of the widget on the map. Defaults to \"topright\".\n    \"\"\"\n    self._host_map = host_map\n    self.on_close = None\n    self._stack = stack\n    self._show_plot = False\n\n    fig_margin = {\"top\": 20, \"bottom\": 35, \"left\": 50, \"right\": 20}\n    fig = plt.figure(\n        # title=None,\n        fig_margin=fig_margin,\n        layout={\"width\": \"500px\", \"height\": \"300px\"},\n    )\n\n    self._fig = fig\n    self._host_map._fig = fig\n\n    layer_names = list(host_map.cog_layer_dict.keys())\n    layers_widget = widgets.Dropdown(options=layer_names)\n    layers_widget.layout.width = \"18ex\"\n\n    close_btn = widgets.Button(\n        icon=\"times\",\n        tooltip=\"Close the widget\",\n        button_style=\"primary\",\n        layout=widgets.Layout(width=\"32px\"),\n    )\n\n    reset_btn = widgets.Button(\n        icon=\"trash\",\n        tooltip=\"Remove all markers\",\n        button_style=\"primary\",\n        layout=widgets.Layout(width=\"32px\"),\n    )\n\n    settings_btn = widgets.Button(\n        icon=\"gear\",\n        tooltip=\"Change layer settings\",\n        button_style=\"primary\",\n        layout=widgets.Layout(width=\"32px\"),\n    )\n\n    stack_btn = widgets.ToggleButton(\n        value=stack,\n        icon=\"area-chart\",\n        button_style=\"primary\",\n        layout=widgets.Layout(width=\"32px\"),\n    )\n\n    def settings_btn_click(_):\n        self._host_map._add_layer_editor(\n            position=\"topright\",\n            layer_dict=self._host_map.cog_layer_dict[layers_widget.value],\n        )\n\n    settings_btn.on_click(settings_btn_click)\n\n    def reset_btn_click(_):\n        if hasattr(self._host_map, \"_plot_marker_cluster\"):\n            self._host_map._plot_marker_cluster.markers = []\n            self._host_map._plot_markers = []\n\n        if hasattr(self._host_map, \"_spectral_data\"):\n            self._host_map._spectral_data = {}\n\n        self._output_widget.clear_output()\n        self._show_plot = False\n        plt.clear()\n\n    reset_btn.on_click(reset_btn_click)\n\n    save_btn = widgets.Button(\n        icon=\"floppy-o\",\n        tooltip=\"Save the data to a CSV\",\n        button_style=\"primary\",\n        layout=widgets.Layout(width=\"32px\"),\n    )\n\n    def chooser_callback(chooser):\n        if chooser.selected:\n            file_path = chooser.selected\n            self._host_map.spectral_to_csv(file_path)\n            if (\n                hasattr(self._host_map, \"_file_chooser_control\")\n                and self._host_map._file_chooser_control in self._host_map.controls\n            ):\n                self._host_map.remove_control(self._host_map._file_chooser_control)\n                self._host_map._file_chooser.close()\n\n    def save_btn_click(_):\n        if not hasattr(self._host_map, \"_spectral_data\"):\n            return\n\n        self._output_widget.clear_output()\n        file_chooser = FileChooser(\n            os.getcwd(), layout=widgets.Layout(width=\"454px\")\n        )\n        file_chooser.filter_pattern = \"*.csv\"\n        file_chooser.use_dir_icons = True\n        file_chooser.title = \"Save spectral data to a CSV file\"\n        file_chooser.default_filename = \"spectral_data.csv\"\n        file_chooser.show_hidden = False\n        file_chooser.register_callback(chooser_callback)\n        file_chooser_control = ipyleaflet.WidgetControl(\n            widget=file_chooser, position=\"topright\"\n        )\n        self._host_map.add(file_chooser_control)\n        setattr(self._host_map, \"_file_chooser\", file_chooser)\n        setattr(self._host_map, \"_file_chooser_control\", file_chooser_control)\n\n    save_btn.on_click(save_btn_click)\n\n    def close_widget(_):\n        self.cleanup()\n\n    close_btn.on_click(close_widget)\n\n    super().__init__(\n        [layers_widget, settings_btn, stack_btn, reset_btn, save_btn, close_btn]\n    )\n\n    output = widgets.Output()\n    output_control = ipyleaflet.WidgetControl(widget=output, position=\"bottomright\")\n    self._output_widget = output\n    self._output_control = output_control\n    self._host_map.add(output_control)\n\n    if not hasattr(self._host_map, \"_spectral_data\"):\n        self._host_map._spectral_data = {}\n\n    def handle_interaction(**kwargs):\n\n        latlon = kwargs.get(\"coordinates\")\n        lat = latlon[0]\n        lon = latlon[1]\n        if kwargs.get(\"type\") == \"click\" and self._host_map._layer_editor is None:\n            layer_name = layers_widget.value\n\n            if not hasattr(self._host_map, \"_plot_markers\"):\n                self._host_map._plot_markers = []\n            markers = self._host_map._plot_markers\n            marker_cluster = self._host_map._plot_marker_cluster\n            markers.append(ipyleaflet.Marker(location=latlon, draggable=False))\n            marker_cluster.markers = markers\n            self._host_map._plot_marker_cluster = marker_cluster\n\n            ds = self._host_map.cog_layer_dict[layer_name][\"xds\"]\n            if self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"EMIT\":\n                da = ds.sel(latitude=lat, longitude=lon, method=\"nearest\")[\n                    \"reflectance\"\n                ]\n\n                if \"wavelength\" not in self._host_map._spectral_data:\n                    self._host_map._spectral_data[\"wavelength\"] = ds[\n                        \"wavelength\"\n                    ].values\n            elif self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"PACE\":\n                try:\n                    da = extract_pace(ds, lat, lon)\n                except:\n                    da = xr.DataArray(\n                        np.full(len(ds[\"wavelength\"]), np.nan),\n                        dims=[\"wavelength\"],\n                        coords={\"wavelength\": ds[\"wavelength\"]},\n                    )\n                if \"wavelengths\" not in self._host_map._spectral_data:\n                    self._host_map._spectral_data[\"wavelengths\"] = ds[\n                        \"wavelength\"\n                    ].values\n\n            elif self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"DESIS\":\n                da = extract_desis(ds, lat, lon)\n\n            elif self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"NEON\":\n                da = extract_neon(ds, lat, lon)\n\n            elif self._host_map.cog_layer_dict[layer_name][\"hyper\"] == \"AVIRIS\":\n                da = extract_aviris(ds, lat, lon)\n\n            self._host_map._spectral_data[f\"({lat:.4f} {lon:.4f})\"] = da.values\n\n            da[da &lt; 0] = np.nan\n            axes_options = {\n                \"x\": {\"label_offset\": \"30px\"},\n                \"y\": {\"label_offset\": \"35px\"},\n            }\n\n            if not stack_btn.value:\n                plt.clear()\n                plt.plot(\n                    da.coords[da.dims[0]].values,\n                    da.values,\n                    axes_options=axes_options,\n                )\n            else:\n                color = np.random.rand(\n                    3,\n                )\n                plt.plot(\n                    da.coords[da.dims[0]].values,\n                    da.values,\n                    color=color,\n                    axes_options=axes_options,\n                )\n                try:\n                    if isinstance(self._fig.axes[0], bqplot.ColorAxis):\n                        self._fig.axes = self._fig.axes[1:]\n                    elif isinstance(self._fig.axes[-1], bqplot.ColorAxis):\n                        self._fig.axes = self._fig.axes[:-1]\n                except:\n                    pass\n            plt.xlabel(\"Wavelength (nm)\")\n            plt.ylabel(\"Reflectance\")\n\n            if not self._show_plot:\n                with self._output_widget:\n                    plt.show()\n                    self._show_plot = True\n\n            self._host_map.default_style = {\"cursor\": \"crosshair\"}\n\n    self._host_map.on_interaction(handle_interaction)\n    self._on_map_interaction = handle_interaction\n\n    self._spectral_widget = self\n    self._spectral_control = ipyleaflet.WidgetControl(\n        widget=self, position=position\n    )\n    self._host_map.add(self._spectral_control)\n</code></pre>"},{"location":"ui/#hypercoast.ui.SpectralWidget.cleanup","title":"<code>cleanup(self)</code>","text":"<p>Removes the widget from the map and performs cleanup.</p> Source code in <code>hypercoast/ui.py</code> <pre><code>def cleanup(self):\n    \"\"\"Removes the widget from the map and performs cleanup.\"\"\"\n    if self._host_map:\n        self._host_map.default_style = {\"cursor\": \"default\"}\n        self._host_map.on_interaction(self._on_map_interaction, remove=True)\n\n        if self._output_control:\n            self._host_map.remove_control(self._output_control)\n\n            if self._output_widget:\n                self._output_widget.close()\n                self._output_widget = None\n\n        if self._spectral_control:\n            self._host_map.remove_control(self._spectral_control)\n            self._spectral_control = None\n\n            if self._spectral_widget:\n                self._spectral_widget.close()\n                self._spectral_widget = None\n\n        if hasattr(self._host_map, \"_plot_marker_cluster\"):\n            self._host_map._plot_marker_cluster.markers = []\n            self._host_map._plot_markers = []\n\n        if hasattr(self._host_map, \"_spectral_data\"):\n            self._host_map._spectral_data = {}\n\n        if hasattr(self, \"_output_widget\") and self._output_widget is not None:\n            self._output_widget.clear_output()\n\n    if self.on_close is not None:\n        self.on_close()\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use HyperCoast in a project:</p> <pre><code>import hypercoast\n</code></pre>"},{"location":"examples/aviris/","title":"Aviris","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[\u00a0]: Copied! <pre>import hypercoast\n</pre> import hypercoast <p>Download sample dataset from Access the AVIRIS-NG L2 Surface Reflectance product page via ORNL DAAC https://daac.ornl.gov/cgi-bin/dsviewer.pl?ds_id=1988</p> <p></p> <p>Download <code>ang20210401t150456_rfl_v2z1.zip</code> and unzip it.</p> <p></p> <p>The dataset contains 2 files: <code>ang20210401t150456_rfl_v2z1</code> and <code>ang20210401t150456_rfl_v2z1.hdr</code>. We will use the <code>ang20210401t150456_rfl_v2z1</code> file in this notebook.</p> In\u00a0[\u00a0]: Copied! <pre>filepath = \"ang20210401t150456_rfl_v2z1\"\n</pre> filepath = \"ang20210401t150456_rfl_v2z1\" <p>Read the AVIRIS data as an <code>xarray.Dataset</code> object.</p> In\u00a0[\u00a0]: Copied! <pre>ds = hypercoast.read_aviris(filepath)\nds\n</pre> ds = hypercoast.read_aviris(filepath) ds <p>Create an interactive map.</p> In\u00a0[\u00a0]: Copied! <pre>m = hypercoast.Map()\nm\n</pre> m = hypercoast.Map() m <p>Add the AVIRIS data to the map.</p> In\u00a0[\u00a0]: Copied! <pre>m.add_aviris(ds, wavelengths=[1000, 700, 400], vmin=0, vmax=0.2)\nm.add(\"spectral\")\n</pre> m.add_aviris(ds, wavelengths=[1000, 700, 400], vmin=0, vmax=0.2) m.add(\"spectral\") <p></p>"},{"location":"examples/aviris/#visualizing-aviris-data-interactively-with-hypercoast","title":"Visualizing AVIRIS data interactively with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to visualize AVIRIS hyperspectral data interactively with HyperCoast. For more information about AVIRIS, please visit the links below:</p> <ul> <li>https://aviris.jpl.nasa.gov/</li> <li>https://aviris.jpl.nasa.gov/dataportal/</li> <li>https://popo.jpl.nasa.gov/mmgis-aviris/?s=ujooa</li> <li>https://daac.ornl.gov/cgi-bin/dsviewer.pl?ds_id=1988</li> <li>https://github.com/ornldaac/deltax_workshop_2022/tree/main</li> <li>https://github.com/jjmcnelis/aviris-ng-notebooks/tree/master</li> </ul>"},{"location":"examples/chlorophyll_a/","title":"Chlorophyll a","text":"In\u00a0[1]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[2]: Copied! <pre>import hypercoast\n</pre> import hypercoast <p>To download PACE data, you will need to create an Earthdata login. You can register for an account at urs.earthdata.nasa.gov. Once you have an account, you can uncomment the code below to search and download the data.</p> In\u00a0[3]: Copied! <pre># hypercoast.nasa_earth_login()\n# temporal = (\"2024-06-01\", \"2024-07-01\")\n# results= hypercoast.search_pace_chla(temporal=temporal)\n# hypercoast.download_nasa_data(results, \"chla\")\n</pre> # hypercoast.nasa_earth_login() # temporal = (\"2024-06-01\", \"2024-07-01\") # results= hypercoast.search_pace_chla(temporal=temporal) # hypercoast.download_nasa_data(results, \"chla\") <p>Alternatively, you can download some sample data from here.</p> In\u00a0[4]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/pace_chla.zip\"\nhypercoast.download_file(url)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/pace_chla.zip\" hypercoast.download_file(url) <pre>Downloading...\nFrom: https://github.com/opengeos/datasets/releases/download/hypercoast/pace_chla.zip\nTo: /home/runner/work/HyperCoast/HyperCoast/docs/examples/pace_chla.zip\n</pre> <pre>\r  0%|          | 0.00/63.8M [00:00&lt;?, ?B/s]</pre> <pre>\r  2%|\u258f         | 1.57M/63.8M [00:00&lt;00:05, 11.0MB/s]</pre> <pre>\r  5%|\u258d         | 3.15M/63.8M [00:00&lt;00:15, 3.82MB/s]</pre> <pre>\r  7%|\u258b         | 4.19M/63.8M [00:01&lt;00:17, 3.49MB/s]</pre> <pre>\r  7%|\u258b         | 4.72M/63.8M [00:01&lt;00:16, 3.57MB/s]</pre> <pre>\r  8%|\u258a         | 5.24M/63.8M [00:01&lt;00:16, 3.51MB/s]</pre> <pre>\r  9%|\u2589         | 5.77M/63.8M [00:01&lt;00:18, 3.07MB/s]</pre> <pre>\r 10%|\u2589         | 6.29M/63.8M [00:01&lt;00:20, 2.78MB/s]</pre> <pre>\r 11%|\u2588         | 6.82M/63.8M [00:02&lt;00:26, 2.19MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 7.34M/63.8M [00:02&lt;00:25, 2.19MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 7.86M/63.8M [00:02&lt;00:23, 2.43MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 8.39M/63.8M [00:02&lt;00:21, 2.53MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 8.91M/63.8M [00:03&lt;00:22, 2.45MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 9.44M/63.8M [00:03&lt;00:27, 1.97MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 9.96M/63.8M [00:03&lt;00:25, 2.12MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 10.5M/63.8M [00:03&lt;00:26, 2.00MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 11.0M/63.8M [00:04&lt;00:25, 2.04MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 11.5M/63.8M [00:04&lt;00:25, 2.03MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 12.1M/63.8M [00:04&lt;00:22, 2.30MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 12.6M/63.8M [00:04&lt;00:19, 2.64MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 13.1M/63.8M [00:04&lt;00:20, 2.48MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 13.6M/63.8M [00:05&lt;00:21, 2.36MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 14.2M/63.8M [00:05&lt;00:22, 2.19MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 14.7M/63.8M [00:05&lt;00:26, 1.86MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 15.2M/63.8M [00:06&lt;00:28, 1.69MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 15.7M/63.8M [00:06&lt;00:26, 1.83MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 16.3M/63.8M [00:06&lt;00:21, 2.17MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 16.8M/63.8M [00:06&lt;00:18, 2.48MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 17.3M/63.8M [00:06&lt;00:18, 2.46MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 17.8M/63.8M [00:07&lt;00:21, 2.16MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 18.4M/63.8M [00:07&lt;00:18, 2.43MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 18.9M/63.8M [00:07&lt;00:18, 2.42MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 19.4M/63.8M [00:07&lt;00:20, 2.17MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 19.9M/63.8M [00:08&lt;00:19, 2.23MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 20.4M/63.8M [00:08&lt;00:17, 2.42MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 21.0M/63.8M [00:08&lt;00:18, 2.37MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 21.5M/63.8M [00:08&lt;00:17, 2.37MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 22.0M/63.8M [00:09&lt;00:17, 2.33MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 22.5M/63.8M [00:09&lt;00:16, 2.53MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 23.1M/63.8M [00:09&lt;00:16, 2.46MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 23.6M/63.8M [00:09&lt;00:16, 2.38MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 24.1M/63.8M [00:09&lt;00:16, 2.46MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u258a      | 24.6M/63.8M [00:10&lt;00:15, 2.46MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 25.2M/63.8M [00:10&lt;00:15, 2.54MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 25.7M/63.8M [00:10&lt;00:14, 2.72MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 26.2M/63.8M [00:10&lt;00:12, 3.00MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 26.7M/63.8M [00:10&lt;00:11, 3.27MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 27.3M/63.8M [00:10&lt;00:11, 3.13MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 27.8M/63.8M [00:11&lt;00:13, 2.66MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 28.3M/63.8M [00:11&lt;00:14, 2.42MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 28.8M/63.8M [00:11&lt;00:12, 2.76MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 29.4M/63.8M [00:11&lt;00:11, 2.95MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 29.9M/63.8M [00:11&lt;00:10, 3.29MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 30.9M/63.8M [00:12&lt;00:08, 3.83MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 31.5M/63.8M [00:12&lt;00:09, 3.49MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 32.0M/63.8M [00:12&lt;00:08, 3.54MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 32.5M/63.8M [00:12&lt;00:08, 3.61MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 33.0M/63.8M [00:12&lt;00:07, 3.94MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 33.6M/63.8M [00:12&lt;00:07, 4.00MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 34.1M/63.8M [00:12&lt;00:09, 3.18MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 34.6M/63.8M [00:13&lt;00:09, 3.04MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 35.1M/63.8M [00:13&lt;00:09, 2.97MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 35.7M/63.8M [00:13&lt;00:09, 3.08MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 36.2M/63.8M [00:13&lt;00:10, 2.53MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 36.7M/63.8M [00:14&lt;00:10, 2.47MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 37.2M/63.8M [00:14&lt;00:09, 2.78MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 37.7M/63.8M [00:14&lt;00:08, 3.13MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 38.3M/63.8M [00:14&lt;00:07, 3.36MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 38.8M/63.8M [00:14&lt;00:07, 3.41MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 39.3M/63.8M [00:14&lt;00:07, 3.35MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 39.8M/63.8M [00:14&lt;00:07, 3.14MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 40.4M/63.8M [00:15&lt;00:07, 3.25MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 40.9M/63.8M [00:15&lt;00:08, 2.81MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 41.4M/63.8M [00:15&lt;00:07, 3.00MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 41.9M/63.8M [00:15&lt;00:07, 2.98MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 42.5M/63.8M [00:15&lt;00:08, 2.60MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 43.0M/63.8M [00:16&lt;00:08, 2.35MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 43.5M/63.8M [00:16&lt;00:07, 2.64MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 44.0M/63.8M [00:16&lt;00:06, 2.96MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 44.6M/63.8M [00:16&lt;00:07, 2.57MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 45.1M/63.8M [00:16&lt;00:06, 2.71MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 45.6M/63.8M [00:16&lt;00:05, 3.15MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 46.1M/63.8M [00:17&lt;00:05, 3.48MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 46.7M/63.8M [00:17&lt;00:04, 3.44MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 47.2M/63.8M [00:17&lt;00:05, 3.12MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 47.7M/63.8M [00:17&lt;00:05, 2.70MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 48.2M/63.8M [00:17&lt;00:05, 2.72MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 48.8M/63.8M [00:18&lt;00:05, 2.72MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 49.3M/63.8M [00:18&lt;00:05, 2.63MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 49.8M/63.8M [00:18&lt;00:05, 2.52MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 50.3M/63.8M [00:18&lt;00:05, 2.47MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 50.9M/63.8M [00:18&lt;00:04, 2.66MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 51.4M/63.8M [00:19&lt;00:05, 2.45MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 51.9M/63.8M [00:19&lt;00:05, 2.33MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 52.4M/63.8M [00:19&lt;00:04, 2.29MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 53.0M/63.8M [00:19&lt;00:05, 2.17MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 53.5M/63.8M [00:20&lt;00:05, 2.06MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 54.0M/63.8M [00:20&lt;00:04, 2.03MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 54.5M/63.8M [00:20&lt;00:04, 2.04MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 55.1M/63.8M [00:20&lt;00:04, 2.17MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 55.6M/63.8M [00:21&lt;00:03, 2.12MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 56.1M/63.8M [00:21&lt;00:03, 2.12MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 56.6M/63.8M [00:21&lt;00:02, 2.41MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 57.1M/63.8M [00:21&lt;00:02, 2.72MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 57.7M/63.8M [00:21&lt;00:02, 3.01MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 58.2M/63.8M [00:21&lt;00:01, 3.26MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 58.7M/63.8M [00:22&lt;00:01, 3.19MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 59.2M/63.8M [00:22&lt;00:01, 2.77MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 59.8M/63.8M [00:22&lt;00:01, 2.37MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 60.3M/63.8M [00:22&lt;00:01, 2.37MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 60.8M/63.8M [00:23&lt;00:01, 2.57MB/s]</pre> <pre>\r 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 61.3M/63.8M [00:23&lt;00:00, 2.53MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 61.9M/63.8M [00:23&lt;00:00, 2.74MB/s]</pre> <pre>\r 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 62.4M/63.8M [00:23&lt;00:00, 2.54MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 62.9M/63.8M [00:23&lt;00:00, 2.53MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 63.4M/63.8M [00:24&lt;00:00, 2.50MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 63.8M/63.8M [00:24&lt;00:00, 2.46MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 63.8M/63.8M [00:24&lt;00:00, 2.63MB/s]</pre> <pre>\n</pre> <pre>Extracting files...\n</pre> Out[4]: <pre>'/home/runner/work/HyperCoast/HyperCoast/docs/examples/pace_chla.zip'</pre> <p>The downloaded zip file is automatically extracted and saved in the <code>chla</code> directory, which contains 17 daily files of chlorophyll-a concentration data in the netCDF format. The date range of the data is from 2024-06-01 to 2024-06-17.</p> In\u00a0[5]: Copied! <pre>files = \"chla/*nc\"\n</pre> files = \"chla/*nc\" <p>Load all the data files in the <code>chla</code> directory as an xarray DataArray</p> In\u00a0[6]: Copied! <pre>array = hypercoast.read_pace_chla(files)\narray\n</pre> array = hypercoast.read_pace_chla(files) array Out[6]: <pre>&lt;xarray.DataArray 'chlor_a' (lat: 1800, lon: 3600, date: 17)&gt; Size: 441MB\ndask.array&lt;transpose, shape=(1800, 3600, 17), dtype=float32, chunksize=(512, 1024, 1), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat          (lat) float32 7kB 89.95 89.85 89.75 ... -89.75 -89.85 -89.95\n  * lon          (lon) float32 14kB -179.9 -179.9 -179.8 ... 179.8 179.9 180.0\n  * date         (date) &lt;U10 680B '2024-06-01' '2024-06-02' ... '2024-06-17'\n    spatial_ref  int64 8B 0\nAttributes:\n    long_name:      Chlorophyll Concentration, OCI Algorithm\n    units:          lg(mg m^-3)\n    standard_name:  mass_concentration_of_chlorophyll_in_sea_water\n    valid_min:      0.001\n    valid_max:      100.0\n    reference:      Hu, C., Lee Z., and Franz, B.A. (2012). Chlorophyll-a alg...\n    display_scale:  log\n    display_min:    0.01\n    display_max:    20.0\n    date:           ['2024-06-01', '2024-06-02', '2024-06-03', '2024-06-04', ...</pre>xarray.DataArray'chlor_a'<ul><li>lat: 1800</li><li>lon: 3600</li><li>date: 17</li></ul><ul><li>dask.array&lt;chunksize=(512, 1024, 1), meta=np.ndarray&gt;  Array   Chunk   Bytes   420.23 MiB   2.00 MiB   Shape   (1800, 3600, 17)   (512, 1024, 1)   Dask graph   272 chunks in 54 graph layers   Data type   float32 numpy.ndarray  17 3600 1800 </li><li>Coordinates: (4)<ul><li>lat(lat)float3289.95 89.85 89.75 ... -89.85 -89.95long_name :Latitudeunits :degrees_northstandard_name :latitudevalid_min :-90.0valid_max :90.0<pre>array([ 89.95    ,  89.85    ,  89.75    , ..., -89.75    , -89.850006,\n       -89.950005], dtype=float32)</pre></li><li>lon(lon)float32-179.9 -179.9 ... 179.9 180.0long_name :Longitudeunits :degrees_eaststandard_name :longitudevalid_min :-180.0valid_max :180.0<pre>array([-179.95   , -179.85   , -179.75   , ...,  179.75   ,  179.85   ,\n        179.95001], dtype=float32)</pre></li><li>date(date)&lt;U10'2024-06-01' ... '2024-06-17'<pre>array(['2024-06-01', '2024-06-02', '2024-06-03', '2024-06-04', '2024-06-05',\n       '2024-06-06', '2024-06-07', '2024-06-08', '2024-06-09', '2024-06-10',\n       '2024-06-11', '2024-06-12', '2024-06-13', '2024-06-14', '2024-06-15',\n       '2024-06-16', '2024-06-17'], dtype='&lt;U10')</pre></li><li>spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]<pre>array(0)</pre></li></ul></li><li>Indexes: (3)<ul><li>latPandasIndex<pre>PandasIndex(Index([ 89.94999694824219,   89.8499984741211,              89.75,\n         89.6500015258789,  89.55000305175781,  89.44999694824219,\n         89.3499984741211,              89.25,   89.1500015258789,\n        89.05000305175781,\n       ...\n       -89.05000305175781,  -89.1500015258789,             -89.25,\n       -89.35000610351562, -89.45000457763672, -89.55000305175781,\n        -89.6500015258789,             -89.75, -89.85000610351562,\n       -89.95000457763672],\n      dtype='float32', name='lat', length=1800))</pre></li><li>lonPandasIndex<pre>PandasIndex(Index([ -179.9499969482422, -179.85000610351562,             -179.75,\n       -179.64999389648438,  -179.5500030517578,  -179.4499969482422,\n       -179.35000610351562,             -179.25, -179.14999389648438,\n        -179.0500030517578,\n       ...\n         179.0500030517578,  179.15000915527344,              179.25,\n        179.35000610351562,  179.45001220703125,   179.5500030517578,\n        179.65000915527344,              179.75,  179.85000610351562,\n        179.95001220703125],\n      dtype='float32', name='lon', length=3600))</pre></li><li>datePandasIndex<pre>PandasIndex(Index(['2024-06-01', '2024-06-02', '2024-06-03', '2024-06-04', '2024-06-05',\n       '2024-06-06', '2024-06-07', '2024-06-08', '2024-06-09', '2024-06-10',\n       '2024-06-11', '2024-06-12', '2024-06-13', '2024-06-14', '2024-06-15',\n       '2024-06-16', '2024-06-17'],\n      dtype='object', name='date'))</pre></li></ul></li><li>Attributes: (10)long_name :Chlorophyll Concentration, OCI Algorithmunits :lg(mg m^-3)standard_name :mass_concentration_of_chlorophyll_in_sea_watervalid_min :0.001valid_max :100.0reference :Hu, C., Lee Z., and Franz, B.A. (2012). Chlorophyll-a algorithms for oligotrophic oceans: A novel approach based on three-band reflectance difference, J. Geophys. Res., 117, C01011, doi:10.1029/2011JC007395.display_scale :logdisplay_min :0.01display_max :20.0date :['2024-06-01', '2024-06-02', '2024-06-03', '2024-06-04', '2024-06-05', '2024-06-06', '2024-06-07', '2024-06-08', '2024-06-09', '2024-06-10', '2024-06-11', '2024-06-12', '2024-06-13', '2024-06-14', '2024-06-15', '2024-06-16', '2024-06-17']</li></ul> <p>Select a date and visualize the chlorophyll-a concentration data with Matplotlib.</p> In\u00a0[7]: Copied! <pre>hypercoast.viz_pace_chla(array, date=\"2024-06-01\", cmap=\"jet\", size=6)\n</pre> hypercoast.viz_pace_chla(array, date=\"2024-06-01\", cmap=\"jet\", size=6) Out[7]: <pre>&lt;matplotlib.collections.QuadMesh at 0x7f76f82cf2d0&gt;</pre> <p>If the date is not specified, the data are averaged over the entire time range.</p> In\u00a0[8]: Copied! <pre>hypercoast.viz_pace_chla(array, cmap=\"jet\", size=6)\n</pre> hypercoast.viz_pace_chla(array, cmap=\"jet\", size=6) Out[8]: <pre>&lt;matplotlib.collections.QuadMesh at 0x7f76f8181f10&gt;</pre> <p>To visualize the data interactively, we can select either a single date or aggregate the data over a time range.</p> <p>First, let's select a single date from the data array:</p> In\u00a0[9]: Copied! <pre>single_array = array.sel(date=\"2024-06-01\")\nsingle_array\n</pre> single_array = array.sel(date=\"2024-06-01\") single_array Out[9]: <pre>&lt;xarray.DataArray 'chlor_a' (lat: 1800, lon: 3600)&gt; Size: 26MB\ndask.array&lt;getitem, shape=(1800, 3600), dtype=float32, chunksize=(512, 1024), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat          (lat) float32 7kB 89.95 89.85 89.75 ... -89.75 -89.85 -89.95\n  * lon          (lon) float32 14kB -179.9 -179.9 -179.8 ... 179.8 179.9 180.0\n    date         &lt;U10 40B '2024-06-01'\n    spatial_ref  int64 8B 0\nAttributes:\n    long_name:      Chlorophyll Concentration, OCI Algorithm\n    units:          lg(mg m^-3)\n    standard_name:  mass_concentration_of_chlorophyll_in_sea_water\n    valid_min:      0.001\n    valid_max:      100.0\n    reference:      Hu, C., Lee Z., and Franz, B.A. (2012). Chlorophyll-a alg...\n    display_scale:  log\n    display_min:    0.01\n    display_max:    20.0\n    date:           ['2024-06-01', '2024-06-02', '2024-06-03', '2024-06-04', ...</pre>xarray.DataArray'chlor_a'<ul><li>lat: 1800</li><li>lon: 3600</li></ul><ul><li>dask.array&lt;chunksize=(512, 1024), meta=np.ndarray&gt;  Array   Chunk   Bytes   24.72 MiB   2.00 MiB   Shape   (1800, 3600)   (512, 1024)   Dask graph   16 chunks in 55 graph layers   Data type   float32 numpy.ndarray  3600 1800 </li><li>Coordinates: (4)<ul><li>lat(lat)float3289.95 89.85 89.75 ... -89.85 -89.95long_name :Latitudeunits :degrees_northstandard_name :latitudevalid_min :-90.0valid_max :90.0<pre>array([ 89.95    ,  89.85    ,  89.75    , ..., -89.75    , -89.850006,\n       -89.950005], dtype=float32)</pre></li><li>lon(lon)float32-179.9 -179.9 ... 179.9 180.0long_name :Longitudeunits :degrees_eaststandard_name :longitudevalid_min :-180.0valid_max :180.0<pre>array([-179.95   , -179.85   , -179.75   , ...,  179.75   ,  179.85   ,\n        179.95001], dtype=float32)</pre></li><li>date()&lt;U10'2024-06-01'<pre>array('2024-06-01', dtype='&lt;U10')</pre></li><li>spatial_ref()int640crs_wkt :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]semi_major_axis :6378137.0semi_minor_axis :6356752.314245179inverse_flattening :298.257223563reference_ellipsoid_name :WGS 84longitude_of_prime_meridian :0.0prime_meridian_name :Greenwichgeographic_crs_name :WGS 84horizontal_datum_name :World Geodetic System 1984grid_mapping_name :latitude_longitudespatial_ref :GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AXIS[\"Latitude\",NORTH],AXIS[\"Longitude\",EAST],AUTHORITY[\"EPSG\",\"4326\"]]<pre>array(0)</pre></li></ul></li><li>Indexes: (2)<ul><li>latPandasIndex<pre>PandasIndex(Index([ 89.94999694824219,   89.8499984741211,              89.75,\n         89.6500015258789,  89.55000305175781,  89.44999694824219,\n         89.3499984741211,              89.25,   89.1500015258789,\n        89.05000305175781,\n       ...\n       -89.05000305175781,  -89.1500015258789,             -89.25,\n       -89.35000610351562, -89.45000457763672, -89.55000305175781,\n        -89.6500015258789,             -89.75, -89.85000610351562,\n       -89.95000457763672],\n      dtype='float32', name='lat', length=1800))</pre></li><li>lonPandasIndex<pre>PandasIndex(Index([ -179.9499969482422, -179.85000610351562,             -179.75,\n       -179.64999389648438,  -179.5500030517578,  -179.4499969482422,\n       -179.35000610351562,             -179.25, -179.14999389648438,\n        -179.0500030517578,\n       ...\n         179.0500030517578,  179.15000915527344,              179.25,\n        179.35000610351562,  179.45001220703125,   179.5500030517578,\n        179.65000915527344,              179.75,  179.85000610351562,\n        179.95001220703125],\n      dtype='float32', name='lon', length=3600))</pre></li></ul></li><li>Attributes: (10)long_name :Chlorophyll Concentration, OCI Algorithmunits :lg(mg m^-3)standard_name :mass_concentration_of_chlorophyll_in_sea_watervalid_min :0.001valid_max :100.0reference :Hu, C., Lee Z., and Franz, B.A. (2012). Chlorophyll-a algorithms for oligotrophic oceans: A novel approach based on three-band reflectance difference, J. Geophys. Res., 117, C01011, doi:10.1029/2011JC007395.display_scale :logdisplay_min :0.01display_max :20.0date :['2024-06-01', '2024-06-02', '2024-06-03', '2024-06-04', '2024-06-05', '2024-06-06', '2024-06-07', '2024-06-08', '2024-06-09', '2024-06-10', '2024-06-11', '2024-06-12', '2024-06-13', '2024-06-14', '2024-06-15', '2024-06-16', '2024-06-17']</li></ul> <p>Convert the data array to an image that can be displayed on an interactive map.</p> In\u00a0[10]: Copied! <pre>single_image = hypercoast.pace_chla_to_image(single_array)\n</pre> single_image = hypercoast.pace_chla_to_image(single_array) <p>Create an interactive map and display the image on the map.</p> In\u00a0[11]: Copied! <pre>m = hypercoast.Map(center=[40, -100], zoom=4)\nm.add_basemap(\"Hybrid\")\nm.add_raster(\n    single_image,\n    cmap=\"jet\",\n    vmin=-1,\n    vmax=2,\n    layer_name=\"Chlorophyll a\",\n    zoom_to_layer=False,\n)\nlabel = \"Chlorophyll Concentration [lg(lg(mg m^-3))]\"\nm.add_colormap(cmap=\"jet\", vmin=-1, vmax=2, label=label)\nm\n</pre> m = hypercoast.Map(center=[40, -100], zoom=4) m.add_basemap(\"Hybrid\") m.add_raster(     single_image,     cmap=\"jet\",     vmin=-1,     vmax=2,     layer_name=\"Chlorophyll a\",     zoom_to_layer=False, ) label = \"Chlorophyll Concentration [lg(lg(mg m^-3))]\" m.add_colormap(cmap=\"jet\", vmin=-1, vmax=2, label=label) m Out[11]: <p></p> <p>The daily image does not have a global coverage. To visualize the data globally, we can aggregate the data over a time range.</p> In\u00a0[12]: Copied! <pre>mean_array = array.mean(dim=\"date\")\n</pre> mean_array = array.mean(dim=\"date\") <p>Convert the aggregated data array to an image that can be displayed on an interactive map.</p> In\u00a0[13]: Copied! <pre>image = hypercoast.pace_chla_to_image(mean_array)\n</pre> image = hypercoast.pace_chla_to_image(mean_array) <p>Create an interactive map and display the image on the map.</p> In\u00a0[14]: Copied! <pre>m = hypercoast.Map(center=[40, -100], zoom=4)\nm.add_basemap(\"Hybrid\")\nm.add_raster(\n    image, cmap=\"jet\", vmin=-1, vmax=2, layer_name=\"Chlorophyll a\", zoom_to_layer=False\n)\nlabel = \"Chlorophyll Concentration [lg(lg(mg m^-3))]\"\nm.add_colormap(cmap=\"jet\", vmin=-1, vmax=2, label=label)\nm\n</pre> m = hypercoast.Map(center=[40, -100], zoom=4) m.add_basemap(\"Hybrid\") m.add_raster(     image, cmap=\"jet\", vmin=-1, vmax=2, layer_name=\"Chlorophyll a\", zoom_to_layer=False ) label = \"Chlorophyll Concentration [lg(lg(mg m^-3))]\" m.add_colormap(cmap=\"jet\", vmin=-1, vmax=2, label=label) m Out[14]: <p></p>"},{"location":"examples/chlorophyll_a/#visualizing-pace-chlorophyll-a-data-interactively-with-hypercoast","title":"Visualizing PACE chlorophyll-a data interactively with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to visualize Plankton, Aerosol, Cloud, ocean Ecosystem (PACE) data interactively with HyperCoast.</p>"},{"location":"examples/desis/","title":"Desis","text":"In\u00a0[1]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[2]: Copied! <pre>import hypercoast\n</pre> import hypercoast In\u00a0[3]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/desis.tif\"\nfilepath = \"data/desis.tif\"\nhypercoast.download_file(url, filepath)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/desis.tif\" filepath = \"data/desis.tif\" hypercoast.download_file(url, filepath) <pre>Downloading...\nFrom: https://github.com/opengeos/datasets/releases/download/hypercoast/desis.tif\nTo: /home/runner/work/HyperCoast/HyperCoast/docs/examples/data/desis.tif\n</pre> <pre>\r  0%|          | 0.00/35.8M [00:00&lt;?, ?B/s]</pre> <pre>\r  4%|\u258d         | 1.57M/35.8M [00:00&lt;00:03, 10.6MB/s]</pre> <pre>\r  9%|\u2589         | 3.15M/35.8M [00:00&lt;00:08, 4.02MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 4.19M/35.8M [00:01&lt;00:08, 3.56MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 4.72M/35.8M [00:01&lt;00:09, 3.21MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 5.24M/35.8M [00:01&lt;00:10, 2.91MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 5.77M/35.8M [00:01&lt;00:12, 2.36MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 6.29M/35.8M [00:02&lt;00:13, 2.24MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 6.82M/35.8M [00:02&lt;00:12, 2.27MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 7.34M/35.8M [00:02&lt;00:11, 2.56MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 8.39M/35.8M [00:02&lt;00:08, 3.34MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 8.91M/35.8M [00:02&lt;00:07, 3.57MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 9.44M/35.8M [00:03&lt;00:08, 3.14MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 9.96M/35.8M [00:03&lt;00:09, 2.84MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 10.5M/35.8M [00:03&lt;00:08, 2.91MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 11.0M/35.8M [00:03&lt;00:09, 2.49MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 11.5M/35.8M [00:03&lt;00:09, 2.61MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 12.1M/35.8M [00:04&lt;00:10, 2.37MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 12.6M/35.8M [00:04&lt;00:09, 2.50MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 13.1M/35.8M [00:04&lt;00:08, 2.55MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 13.6M/35.8M [00:04&lt;00:08, 2.63MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 14.2M/35.8M [00:04&lt;00:07, 2.76MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 14.7M/35.8M [00:05&lt;00:07, 2.80MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 15.2M/35.8M [00:05&lt;00:06, 2.95MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 15.7M/35.8M [00:05&lt;00:08, 2.50MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 16.3M/35.8M [00:05&lt;00:07, 2.71MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 16.8M/35.8M [00:05&lt;00:06, 2.82MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 17.3M/35.8M [00:05&lt;00:05, 3.09MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 17.8M/35.8M [00:06&lt;00:05, 3.24MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588\u258f    | 18.4M/35.8M [00:06&lt;00:05, 2.97MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 18.9M/35.8M [00:06&lt;00:05, 3.06MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 19.4M/35.8M [00:06&lt;00:04, 3.35MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 19.9M/35.8M [00:06&lt;00:04, 3.19MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 20.4M/35.8M [00:07&lt;00:05, 2.61MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 21.0M/35.8M [00:07&lt;00:05, 2.59MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 21.5M/35.8M [00:07&lt;00:05, 2.39MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 22.0M/35.8M [00:07&lt;00:05, 2.47MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 22.5M/35.8M [00:08&lt;00:06, 2.19MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 23.1M/35.8M [00:08&lt;00:06, 2.02MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 23.6M/35.8M [00:08&lt;00:06, 1.89MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 24.1M/35.8M [00:08&lt;00:05, 1.94MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 24.6M/35.8M [00:09&lt;00:05, 2.18MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 25.2M/35.8M [00:09&lt;00:04, 2.41MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 25.7M/35.8M [00:09&lt;00:03, 2.85MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 26.2M/35.8M [00:09&lt;00:02, 3.29MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 26.7M/35.8M [00:09&lt;00:02, 3.30MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 27.3M/35.8M [00:09&lt;00:02, 3.25MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 27.8M/35.8M [00:09&lt;00:02, 3.18MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 28.3M/35.8M [00:10&lt;00:02, 3.02MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 28.8M/35.8M [00:10&lt;00:02, 3.18MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 29.4M/35.8M [00:10&lt;00:02, 3.13MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 29.9M/35.8M [00:10&lt;00:02, 2.80MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 30.4M/35.8M [00:10&lt;00:02, 2.51MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 30.9M/35.8M [00:11&lt;00:01, 2.71MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 31.5M/35.8M [00:11&lt;00:01, 2.80MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 32.0M/35.8M [00:11&lt;00:01, 2.52MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 32.5M/35.8M [00:11&lt;00:01, 2.16MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 33.0M/35.8M [00:12&lt;00:01, 2.38MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 33.6M/35.8M [00:12&lt;00:00, 2.74MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 34.1M/35.8M [00:12&lt;00:00, 2.72MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 34.6M/35.8M [00:12&lt;00:00, 2.75MB/s]</pre> <pre>\r 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 35.1M/35.8M [00:12&lt;00:00, 3.03MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 35.7M/35.8M [00:12&lt;00:00, 2.77MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 35.8M/35.8M [00:12&lt;00:00, 2.76MB/s]</pre> <pre>\n</pre> Out[3]: <pre>'/home/runner/work/HyperCoast/HyperCoast/docs/examples/data/desis.tif'</pre> <p>Load the dataset as a xarray.Dataset object.</p> In\u00a0[4]: Copied! <pre>dataset = hypercoast.read_desis(filepath)\n</pre> dataset = hypercoast.read_desis(filepath) <p>Plot the spectral signature of a pixel.</p> In\u00a0[5]: Copied! <pre>hypercoast.filter_desis(dataset, lat=29.4315, lon=91.2927, return_plot=True)\n</pre> hypercoast.filter_desis(dataset, lat=29.4315, lon=91.2927, return_plot=True) <p>Visualize a single band of the hyperspectral image.</p> In\u00a0[6]: Copied! <pre>m = hypercoast.Map()\nm.add_basemap(\"Hybrid\")\nm.add_desis(filepath, wavelengths=[1000], vmin=0, vmax=5000, nodata=0, colormap=\"jet\")\nm.add_colormap(cmap=\"jet\", vmin=0, vmax=0.5, label=\"Reflectance\")\nm\n</pre> m = hypercoast.Map() m.add_basemap(\"Hybrid\") m.add_desis(filepath, wavelengths=[1000], vmin=0, vmax=5000, nodata=0, colormap=\"jet\") m.add_colormap(cmap=\"jet\", vmin=0, vmax=0.5, label=\"Reflectance\") m Out[6]: <p></p> <p>Plot the spectral signature of a pixel interactively.</p> In\u00a0[7]: Copied! <pre>m = hypercoast.Map()\nm.add_basemap(\"Hybrid\")\nm.add_desis(filepath, wavelengths=[900, 600, 525], vmin=0, vmax=1000, nodata=0)\nm.add(\"spectral\")\nm\n</pre> m = hypercoast.Map() m.add_basemap(\"Hybrid\") m.add_desis(filepath, wavelengths=[900, 600, 525], vmin=0, vmax=1000, nodata=0) m.add(\"spectral\") m Out[7]: <p></p>"},{"location":"examples/desis/#visualizing-desis-data-interactively-with-hypercoast","title":"Visualizing DESIS data interactively with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to visualize DESIS hyperspectral data interactively with HyperCoast.</p>"},{"location":"examples/ecostress/","title":"Ecostress","text":"In\u00a0[\u00a0]: Copied! <pre>import hypercoast\n</pre> import hypercoast In\u00a0[\u00a0]: Copied! <pre>hypercoast.nasa_earth_login()\n</pre> hypercoast.nasa_earth_login() In\u00a0[\u00a0]: Copied! <pre>results, gdf = hypercoast.search_ecostress(\n    bbox=(-120.522, 34.4266, -120.2665, 34.5653),\n    temporal=(\"2023-04-01\", \"2023-04-02\"),\n    count=-1,  # use -1 to return all datasets\n    return_gdf=True,\n)\n</pre> results, gdf = hypercoast.search_ecostress(     bbox=(-120.522, 34.4266, -120.2665, 34.5653),     temporal=(\"2023-04-01\", \"2023-04-02\"),     count=-1,  # use -1 to return all datasets     return_gdf=True, ) In\u00a0[\u00a0]: Copied! <pre>gdf.explore()\n</pre> gdf.explore() In\u00a0[\u00a0]: Copied! <pre>hypercoast.download_ecostress(results[:5], out_dir=\"data\")\n</pre> hypercoast.download_ecostress(results[:5], out_dir=\"data\") In\u00a0[\u00a0]: Copied! <pre>m = hypercoast.Map(center=[34.5014, -120.4032], zoom=11)\nm.search_ecostress()\nm\n</pre> m = hypercoast.Map(center=[34.5014, -120.4032], zoom=11) m.search_ecostress() m In\u00a0[\u00a0]: Copied! <pre># m._NASA_DATA_GDF.head()\n</pre> # m._NASA_DATA_GDF.head() In\u00a0[\u00a0]: Copied! <pre># hypercoast.download_ecostress(m._NASA_DATA_RESULTS[:2], out_dir=\"data\")\n</pre> # hypercoast.download_ecostress(m._NASA_DATA_RESULTS[:2], out_dir=\"data\") In\u00a0[\u00a0]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/raster/ECOv002_L2T_LSTE_26860_001_10SGD_20230401T203733_0710_01_LST.tif\"\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/raster/ECOv002_L2T_LSTE_26860_001_10SGD_20230401T203733_0710_01_LST.tif\" In\u00a0[\u00a0]: Copied! <pre>filepath = \"data/ECOv002_L2T_LSTE_26860_001_10SGD_20230401T203733_0710_01_LST.tif\"\nhypercoast.download_file(url, filepath)\n</pre> filepath = \"data/ECOv002_L2T_LSTE_26860_001_10SGD_20230401T203733_0710_01_LST.tif\" hypercoast.download_file(url, filepath) <p>Viusalize the data with HyperCoast.</p> In\u00a0[\u00a0]: Copied! <pre>m = hypercoast.Map()\nm.add_basemap(\"HYBRID\")\nm.add_raster(filepath, colormap=\"jet\", layer_name=\"LST\")\nm.add(\"spectral\")\nm\n</pre> m = hypercoast.Map() m.add_basemap(\"HYBRID\") m.add_raster(filepath, colormap=\"jet\", layer_name=\"LST\") m.add(\"spectral\") m <p></p>"},{"location":"examples/ecostress/#search-and-download-nasa-ecostress-data-with-hypercoast","title":"Search and download NASA ECOSTRESS data with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to search and visualize NASA ECOSTRESS temperature data with HyperCoast.</p>"},{"location":"examples/ecostress/#search-for-ecostress-data-programmatically","title":"Search for ECOSTRESS data programmatically\u00b6","text":""},{"location":"examples/ecostress/#download-ecostress-data","title":"Download ECOSTRESS data\u00b6","text":""},{"location":"examples/ecostress/#search-for-ecostress-data-interactively","title":"Search for ECOSTRESS data interactively\u00b6","text":""},{"location":"examples/ecostress/#visualize-ecostress-data","title":"Visualize ECOSTRESS data\u00b6","text":"<p>Download a sample ECOSTRESS data file and visualize it with HyperCoast.</p>"},{"location":"examples/emit/","title":"Emit","text":"In\u00a0[1]: Copied! <pre># %pip install hypercoast\n</pre> # %pip install hypercoast In\u00a0[2]: Copied! <pre>import hypercoast\n</pre> import hypercoast <p>Download a sample EMIT data file from here.</p> In\u00a0[3]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/netcdf/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\"\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/netcdf/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\" In\u00a0[4]: Copied! <pre>filepath = \"EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\"\nhypercoast.download_file(url)\n</pre> filepath = \"EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\" hypercoast.download_file(url) <pre>Downloading...\nFrom: https://github.com/opengeos/datasets/releases/download/netcdf/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\nTo: /home/runner/work/HyperCoast/HyperCoast/docs/examples/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\n</pre> <pre>\r  0%|          | 0.00/1.85G [00:00&lt;?, ?B/s]</pre> <pre>\r  0%|          | 524k/1.85G [00:00&lt;14:50, 2.08MB/s]</pre> <pre>\r  0%|          | 1.05M/1.85G [00:00&lt;14:40, 2.10MB/s]</pre> <pre>\r  0%|          | 1.57M/1.85G [00:00&lt;19:47, 1.56MB/s]</pre> <pre>\r  0%|          | 2.10M/1.85G [00:01&lt;22:28, 1.37MB/s]</pre> <pre>\r  0%|          | 2.62M/1.85G [00:01&lt;22:48, 1.35MB/s]</pre> <pre>\r  0%|          | 3.15M/1.85G [00:02&lt;19:58, 1.54MB/s]</pre> <pre>\r  0%|          | 3.67M/1.85G [00:02&lt;18:08, 1.70MB/s]</pre> <pre>\r  0%|          | 4.19M/1.85G [00:02&lt;19:40, 1.56MB/s]</pre> <pre>\r  0%|          | 4.72M/1.85G [00:02&lt;18:06, 1.70MB/s]</pre> <pre>\r  0%|          | 5.24M/1.85G [00:03&lt;20:06, 1.53MB/s]</pre> <pre>\r  0%|          | 5.77M/1.85G [00:03&lt;21:06, 1.46MB/s]</pre> <pre>\r  0%|          | 6.29M/1.85G [00:04&lt;22:02, 1.39MB/s]</pre> <pre>\r  0%|          | 6.82M/1.85G [00:04&lt;22:40, 1.36MB/s]</pre> <pre>\r  0%|          | 7.34M/1.85G [00:04&lt;22:20, 1.38MB/s]</pre> <pre>\r  0%|          | 7.86M/1.85G [00:05&lt;22:24, 1.37MB/s]</pre> <pre>\r  0%|          | 8.39M/1.85G [00:05&lt;21:21, 1.44MB/s]</pre> <pre>\r  0%|          | 8.91M/1.85G [00:05&lt;18:09, 1.69MB/s]</pre> <pre>\r  1%|          | 9.44M/1.85G [00:06&lt;16:45, 1.83MB/s]</pre> <pre>\r  1%|          | 9.96M/1.85G [00:06&lt;15:35, 1.97MB/s]</pre> <pre>\r  1%|          | 10.5M/1.85G [00:06&lt;17:50, 1.72MB/s]</pre> <pre>\r  1%|          | 11.0M/1.85G [00:06&lt;17:09, 1.79MB/s]</pre> <pre>\r  1%|          | 11.5M/1.85G [00:07&lt;15:29, 1.98MB/s]</pre> <pre>\r  1%|          | 12.1M/1.85G [00:07&lt;14:25, 2.13MB/s]</pre> <pre>\r  1%|          | 12.6M/1.85G [00:07&lt;14:24, 2.13MB/s]</pre> <pre>\r  1%|          | 13.1M/1.85G [00:07&lt;14:02, 2.18MB/s]</pre> <pre>\r  1%|          | 13.6M/1.85G [00:08&lt;13:28, 2.27MB/s]</pre> <pre>\r  1%|          | 14.2M/1.85G [00:08&lt;17:16, 1.77MB/s]</pre> <pre>\r  1%|          | 14.7M/1.85G [00:08&lt;18:16, 1.68MB/s]</pre> <pre>\r  1%|          | 15.2M/1.85G [00:09&lt;18:03, 1.69MB/s]</pre> <pre>\r  1%|          | 15.7M/1.85G [00:09&lt;17:11, 1.78MB/s]</pre> <pre>\r  1%|          | 16.3M/1.85G [00:09&lt;19:07, 1.60MB/s]</pre> <pre>\r  1%|          | 16.8M/1.85G [00:10&lt;19:00, 1.61MB/s]</pre> <pre>\r  1%|          | 17.3M/1.85G [00:10&lt;18:25, 1.66MB/s]</pre> <pre>\r  1%|          | 17.8M/1.85G [00:10&lt;15:50, 1.93MB/s]</pre> <pre>\r  1%|          | 18.4M/1.85G [00:10&lt;15:10, 2.01MB/s]</pre> <pre>\r  1%|          | 18.9M/1.85G [00:11&lt;15:22, 1.99MB/s]</pre> <pre>\r  1%|          | 19.4M/1.85G [00:11&lt;16:11, 1.89MB/s]</pre> <pre>\r  1%|          | 19.9M/1.85G [00:11&lt;15:07, 2.02MB/s]</pre> <pre>\r  1%|          | 20.4M/1.85G [00:11&lt;15:04, 2.02MB/s]</pre> <pre>\r  1%|          | 21.0M/1.85G [00:12&lt;16:15, 1.88MB/s]</pre> <pre>\r  1%|          | 21.5M/1.85G [00:12&lt;15:29, 1.97MB/s]</pre> <pre>\r  1%|          | 22.0M/1.85G [00:12&lt;16:40, 1.83MB/s]</pre> <pre>\r  1%|          | 22.5M/1.85G [00:12&lt;15:26, 1.97MB/s]</pre> <pre>\r  1%|          | 23.1M/1.85G [00:13&lt;22:16, 1.37MB/s]</pre> <pre>\r  1%|\u258f         | 23.6M/1.85G [00:14&lt;22:58, 1.33MB/s]</pre> <pre>\r  1%|\u258f         | 24.1M/1.85G [00:14&lt;23:11, 1.31MB/s]</pre> <pre>\r  1%|\u258f         | 24.6M/1.85G [00:14&lt;20:53, 1.46MB/s]</pre> <pre>\r  1%|\u258f         | 25.2M/1.85G [00:15&lt;19:48, 1.54MB/s]</pre> <pre>\r  1%|\u258f         | 25.7M/1.85G [00:15&lt;20:26, 1.49MB/s]</pre> <pre>\r  1%|\u258f         | 26.2M/1.85G [00:15&lt;20:40, 1.47MB/s]</pre> <pre>\r  1%|\u258f         | 26.7M/1.85G [00:15&lt;18:13, 1.67MB/s]</pre> <pre>\r  1%|\u258f         | 27.3M/1.85G [00:16&lt;17:59, 1.69MB/s]</pre> <pre>\r  2%|\u258f         | 27.8M/1.85G [00:16&lt;18:09, 1.67MB/s]</pre> <pre>\r  2%|\u258f         | 28.3M/1.85G [00:16&lt;19:03, 1.59MB/s]</pre> <pre>\r  2%|\u258f         | 28.8M/1.85G [00:17&lt;16:46, 1.81MB/s]</pre> <pre>\r  2%|\u258f         | 29.4M/1.85G [00:17&lt;16:28, 1.84MB/s]</pre> <pre>\r  2%|\u258f         | 29.9M/1.85G [00:17&lt;15:30, 1.96MB/s]</pre> <pre>\r  2%|\u258f         | 30.4M/1.85G [00:17&lt;14:46, 2.05MB/s]</pre> <pre>\r  2%|\u258f         | 30.9M/1.85G [00:18&lt;13:47, 2.20MB/s]</pre> <pre>\r  2%|\u258f         | 31.5M/1.85G [00:18&lt;13:41, 2.22MB/s]</pre> <pre>\r  2%|\u258f         | 32.0M/1.85G [00:18&lt;15:00, 2.02MB/s]</pre> <pre>\r  2%|\u258f         | 32.5M/1.85G [00:19&lt;18:17, 1.66MB/s]</pre> <pre>\r  2%|\u258f         | 33.0M/1.85G [00:19&lt;20:06, 1.51MB/s]</pre> <pre>\r  2%|\u258f         | 33.6M/1.85G [00:19&lt;19:33, 1.55MB/s]</pre> <pre>\r  2%|\u258f         | 34.1M/1.85G [00:20&lt;19:42, 1.54MB/s]</pre> <pre>\r  2%|\u258f         | 34.6M/1.85G [00:20&lt;19:03, 1.59MB/s]</pre> <pre>\r  2%|\u258f         | 35.1M/1.85G [00:20&lt;16:35, 1.82MB/s]</pre> <pre>\r  2%|\u258f         | 35.7M/1.85G [00:20&lt;15:24, 1.96MB/s]</pre> <pre>\r  2%|\u258f         | 36.2M/1.85G [00:21&lt;15:53, 1.90MB/s]</pre> <pre>\r  2%|\u258f         | 36.7M/1.85G [00:21&lt;18:21, 1.65MB/s]</pre> <pre>\r  2%|\u258f         | 37.2M/1.85G [00:21&lt;18:39, 1.62MB/s]</pre> <pre>\r  2%|\u258f         | 37.7M/1.85G [00:22&lt;16:43, 1.81MB/s]</pre> <pre>\r  2%|\u258f         | 38.3M/1.85G [00:22&lt;15:54, 1.90MB/s]</pre> <pre>\r  2%|\u258f         | 38.8M/1.85G [00:22&lt;17:17, 1.75MB/s]</pre> <pre>\r  2%|\u258f         | 39.3M/1.85G [00:22&lt;15:40, 1.93MB/s]</pre> <pre>\r  2%|\u258f         | 39.8M/1.85G [00:23&lt;17:57, 1.68MB/s]</pre> <pre>\r  2%|\u258f         | 40.4M/1.85G [00:23&lt;16:52, 1.79MB/s]</pre> <pre>\r  2%|\u258f         | 40.9M/1.85G [00:23&lt;16:41, 1.81MB/s]</pre> <pre>\r  2%|\u258f         | 41.4M/1.85G [00:24&lt;16:59, 1.78MB/s]</pre> <pre>\r  2%|\u258f         | 41.9M/1.85G [00:24&lt;16:31, 1.83MB/s]</pre> <pre>\r  2%|\u258f         | 42.5M/1.85G [00:24&lt;18:17, 1.65MB/s]</pre> <pre>\r  2%|\u258f         | 43.0M/1.85G [00:25&lt;17:45, 1.70MB/s]</pre> <pre>\r  2%|\u258f         | 43.5M/1.85G [00:25&lt;17:21, 1.74MB/s]</pre> <pre>\r  2%|\u258f         | 44.0M/1.85G [00:25&lt;18:52, 1.60MB/s]</pre> <pre>\r  2%|\u258f         | 44.6M/1.85G [00:26&lt;20:50, 1.45MB/s]</pre> <pre>\r  2%|\u258f         | 45.1M/1.85G [00:26&lt;18:37, 1.62MB/s]</pre> <pre>\r  2%|\u258f         | 45.6M/1.85G [00:26&lt;16:09, 1.86MB/s]</pre> <pre>\r  2%|\u258f         | 46.1M/1.85G [00:27&lt;17:50, 1.69MB/s]</pre> <pre>\r  3%|\u258e         | 46.7M/1.85G [00:27&lt;18:47, 1.60MB/s]</pre> <pre>\r  3%|\u258e         | 47.2M/1.85G [00:27&lt;17:35, 1.71MB/s]</pre> <pre>\r  3%|\u258e         | 47.7M/1.85G [00:28&lt;17:59, 1.67MB/s]</pre> <pre>\r  3%|\u258e         | 48.2M/1.85G [00:28&lt;17:44, 1.69MB/s]</pre> <pre>\r  3%|\u258e         | 48.8M/1.85G [00:28&lt;17:24, 1.73MB/s]</pre> <pre>\r  3%|\u258e         | 49.3M/1.85G [00:29&lt;19:38, 1.53MB/s]</pre> <pre>\r  3%|\u258e         | 49.8M/1.85G [00:29&lt;19:24, 1.55MB/s]</pre> <pre>\r  3%|\u258e         | 50.3M/1.85G [00:29&lt;21:20, 1.41MB/s]</pre> <pre>\r  3%|\u258e         | 50.9M/1.85G [00:30&lt;22:53, 1.31MB/s]</pre> <pre>\r  3%|\u258e         | 51.4M/1.85G [00:30&lt;20:43, 1.45MB/s]</pre> <pre>\r  3%|\u258e         | 51.9M/1.85G [00:30&lt;20:36, 1.45MB/s]</pre> <pre>\r  3%|\u258e         | 52.4M/1.85G [00:31&lt;23:20, 1.28MB/s]</pre> <pre>\r  3%|\u258e         | 53.0M/1.85G [00:31&lt;21:13, 1.41MB/s]</pre> <pre>\r  3%|\u258e         | 53.5M/1.85G [00:31&lt;18:44, 1.60MB/s]</pre> <pre>\r  3%|\u258e         | 54.0M/1.85G [00:32&lt;18:47, 1.59MB/s]</pre> <pre>\r  3%|\u258e         | 54.5M/1.85G [00:32&lt;16:57, 1.76MB/s]</pre> <pre>\r  3%|\u258e         | 55.1M/1.85G [00:32&lt;14:58, 2.00MB/s]</pre> <pre>\r  3%|\u258e         | 55.6M/1.85G [00:33&lt;16:42, 1.79MB/s]</pre> <pre>\r  3%|\u258e         | 56.1M/1.85G [00:33&lt;16:24, 1.82MB/s]</pre> <pre>\r  3%|\u258e         | 56.6M/1.85G [00:33&lt;16:57, 1.76MB/s]</pre> <pre>\r  3%|\u258e         | 57.1M/1.85G [00:33&lt;17:45, 1.68MB/s]</pre> <pre>\r  3%|\u258e         | 57.7M/1.85G [00:34&lt;14:48, 2.02MB/s]</pre> <pre>\r  3%|\u258e         | 58.2M/1.85G [00:34&lt;18:02, 1.66MB/s]</pre> <pre>\r  3%|\u258e         | 58.7M/1.85G [00:34&lt;17:18, 1.73MB/s]</pre> <pre>\r  3%|\u258e         | 59.2M/1.85G [00:35&lt;16:35, 1.80MB/s]</pre> <pre>\r  3%|\u258e         | 59.8M/1.85G [00:35&lt;15:58, 1.87MB/s]</pre> <pre>\r  3%|\u258e         | 60.3M/1.85G [00:35&lt;16:58, 1.76MB/s]</pre> <pre>\r  3%|\u258e         | 60.8M/1.85G [00:36&lt;16:55, 1.76MB/s]</pre> <pre>\r  3%|\u258e         | 61.3M/1.85G [00:36&lt;17:09, 1.74MB/s]</pre> <pre>\r  3%|\u258e         | 61.9M/1.85G [00:36&lt;15:55, 1.87MB/s]</pre> <pre>\r  3%|\u258e         | 62.4M/1.85G [00:36&lt;13:24, 2.22MB/s]</pre> <pre>\r  3%|\u258e         | 62.9M/1.85G [00:36&lt;14:00, 2.13MB/s]</pre> <pre>\r  3%|\u258e         | 63.4M/1.85G [00:37&lt;13:13, 2.25MB/s]</pre> <pre>\r  3%|\u258e         | 64.0M/1.85G [00:37&lt;16:32, 1.80MB/s]</pre> <pre>\r  3%|\u258e         | 64.5M/1.85G [00:37&lt;18:06, 1.64MB/s]</pre> <pre>\r  4%|\u258e         | 65.0M/1.85G [00:38&lt;17:50, 1.67MB/s]</pre> <pre>\r  4%|\u258e         | 65.5M/1.85G [00:38&lt;18:18, 1.63MB/s]</pre> <pre>\r  4%|\u258e         | 66.1M/1.85G [00:38&lt;18:15, 1.63MB/s]</pre> <pre>\r  4%|\u258e         | 66.6M/1.85G [00:39&lt;16:41, 1.78MB/s]</pre> <pre>\r  4%|\u258e         | 67.1M/1.85G [00:39&lt;15:13, 1.95MB/s]</pre> <pre>\r  4%|\u258e         | 67.6M/1.85G [00:39&lt;18:28, 1.61MB/s]</pre> <pre>\r  4%|\u258e         | 68.2M/1.85G [00:40&lt;17:10, 1.73MB/s]</pre> <pre>\r  4%|\u258e         | 68.7M/1.85G [00:40&lt;16:53, 1.76MB/s]</pre> <pre>\r  4%|\u258e         | 69.2M/1.85G [00:40&lt;18:52, 1.57MB/s]</pre> <pre>\r  4%|\u258d         | 69.7M/1.85G [00:41&lt;18:09, 1.63MB/s]</pre> <pre>\r  4%|\u258d         | 70.3M/1.85G [00:41&lt;17:57, 1.65MB/s]</pre> <pre>\r  4%|\u258d         | 70.8M/1.85G [00:41&lt;18:09, 1.63MB/s]</pre> <pre>\r  4%|\u258d         | 71.3M/1.85G [00:41&lt;16:43, 1.77MB/s]</pre> <pre>\r  4%|\u258d         | 71.8M/1.85G [00:42&lt;15:34, 1.90MB/s]</pre> <pre>\r  4%|\u258d         | 72.4M/1.85G [00:42&lt;14:03, 2.11MB/s]</pre> <pre>\r  4%|\u258d         | 72.9M/1.85G [00:42&lt;15:30, 1.91MB/s]</pre> <pre>\r  4%|\u258d         | 73.4M/1.85G [00:42&lt;14:50, 2.00MB/s]</pre> <pre>\r  4%|\u258d         | 73.9M/1.85G [00:43&lt;14:41, 2.02MB/s]</pre> <pre>\r  4%|\u258d         | 74.4M/1.85G [00:43&lt;14:52, 1.99MB/s]</pre> <pre>\r  4%|\u258d         | 75.0M/1.85G [00:43&lt;14:16, 2.07MB/s]</pre> <pre>\r  4%|\u258d         | 75.5M/1.85G [00:43&lt;13:55, 2.12MB/s]</pre> <pre>\r  4%|\u258d         | 76.0M/1.85G [00:44&lt;15:56, 1.86MB/s]</pre> <pre>\r  4%|\u258d         | 76.5M/1.85G [00:44&lt;15:14, 1.94MB/s]</pre> <pre>\r  4%|\u258d         | 77.1M/1.85G [00:44&lt;16:08, 1.83MB/s]</pre> <pre>\r  4%|\u258d         | 77.6M/1.85G [00:45&lt;18:20, 1.61MB/s]</pre> <pre>\r  4%|\u258d         | 78.1M/1.85G [00:45&lt;16:43, 1.77MB/s]</pre> <pre>\r  4%|\u258d         | 78.6M/1.85G [00:45&lt;16:17, 1.81MB/s]</pre> <pre>\r  4%|\u258d         | 79.2M/1.85G [00:46&lt;17:30, 1.69MB/s]</pre> <pre>\r  4%|\u258d         | 79.7M/1.85G [00:46&lt;16:33, 1.78MB/s]</pre> <pre>\r  4%|\u258d         | 80.2M/1.85G [00:46&lt;14:48, 1.99MB/s]</pre> <pre>\r  4%|\u258d         | 80.7M/1.85G [00:46&lt;13:59, 2.11MB/s]</pre> <pre>\r  4%|\u258d         | 81.3M/1.85G [00:47&lt;13:33, 2.18MB/s]</pre> <pre>\r  4%|\u258d         | 81.8M/1.85G [00:47&lt;15:43, 1.87MB/s]</pre> <pre>\r  4%|\u258d         | 82.3M/1.85G [00:47&lt;15:55, 1.85MB/s]</pre> <pre>\r  4%|\u258d         | 82.8M/1.85G [00:47&lt;14:22, 2.05MB/s]</pre> <pre>\r  5%|\u258d         | 83.4M/1.85G [00:48&lt;13:14, 2.23MB/s]</pre> <pre>\r  5%|\u258d         | 83.9M/1.85G [00:48&lt;13:17, 2.22MB/s]</pre> <pre>\r  5%|\u258d         | 84.4M/1.85G [00:48&lt;14:19, 2.06MB/s]</pre> <pre>\r  5%|\u258d         | 84.9M/1.85G [00:48&lt;16:41, 1.76MB/s]</pre> <pre>\r  5%|\u258d         | 85.5M/1.85G [00:49&lt;17:05, 1.72MB/s]</pre> <pre>\r  5%|\u258d         | 86.0M/1.85G [00:49&lt;14:44, 2.00MB/s]</pre> <pre>\r  5%|\u258d         | 86.5M/1.85G [00:49&lt;13:50, 2.12MB/s]</pre> <pre>\r  5%|\u258d         | 87.0M/1.85G [00:49&lt;12:45, 2.30MB/s]</pre> <pre>\r  5%|\u258d         | 87.6M/1.85G [00:50&lt;12:50, 2.29MB/s]</pre> <pre>\r  5%|\u258d         | 88.1M/1.85G [00:50&lt;13:57, 2.11MB/s]</pre> <pre>\r  5%|\u258d         | 88.6M/1.85G [00:50&lt;14:45, 1.99MB/s]</pre> <pre>\r  5%|\u258d         | 89.1M/1.85G [00:51&lt;18:38, 1.58MB/s]</pre> <pre>\r  5%|\u258d         | 89.7M/1.85G [00:51&lt;19:15, 1.52MB/s]</pre> <pre>\r  5%|\u258d         | 90.2M/1.85G [00:51&lt;16:51, 1.74MB/s]</pre> <pre>\r  5%|\u258d         | 90.7M/1.85G [00:51&lt;15:37, 1.88MB/s]</pre> <pre>\r  5%|\u258d         | 91.2M/1.85G [00:52&lt;15:07, 1.94MB/s]</pre> <pre>\r  5%|\u258d         | 91.8M/1.85G [00:52&lt;15:03, 1.95MB/s]</pre> <pre>\r  5%|\u258d         | 92.3M/1.85G [00:52&lt;15:24, 1.90MB/s]</pre> <pre>\r  5%|\u258c         | 92.8M/1.85G [00:53&lt;17:56, 1.63MB/s]</pre> <pre>\r  5%|\u258c         | 93.3M/1.85G [00:53&lt;19:07, 1.53MB/s]</pre> <pre>\r  5%|\u258c         | 93.8M/1.85G [00:54&lt;20:19, 1.44MB/s]</pre> <pre>\r  5%|\u258c         | 94.4M/1.85G [00:54&lt;19:02, 1.54MB/s]</pre> <pre>\r  5%|\u258c         | 94.9M/1.85G [00:54&lt;19:09, 1.53MB/s]</pre> <pre>\r  5%|\u258c         | 95.4M/1.85G [00:54&lt;17:46, 1.65MB/s]</pre> <pre>\r  5%|\u258c         | 95.9M/1.85G [00:55&lt;20:12, 1.45MB/s]</pre> <pre>\r  5%|\u258c         | 96.5M/1.85G [00:55&lt;19:18, 1.51MB/s]</pre> <pre>\r  5%|\u258c         | 97.0M/1.85G [00:56&lt;22:17, 1.31MB/s]</pre> <pre>\r  5%|\u258c         | 97.5M/1.85G [00:56&lt;19:55, 1.47MB/s]</pre> <pre>\r  5%|\u258c         | 98.0M/1.85G [00:56&lt;18:08, 1.61MB/s]</pre> <pre>\r  5%|\u258c         | 98.6M/1.85G [00:57&lt;19:13, 1.52MB/s]</pre> <pre>\r  5%|\u258c         | 99.1M/1.85G [00:57&lt;16:58, 1.72MB/s]</pre> <pre>\r  5%|\u258c         | 99.6M/1.85G [00:57&lt;16:55, 1.72MB/s]</pre> <pre>\r  5%|\u258c         | 100M/1.85G [00:57&lt;16:32, 1.76MB/s] </pre> <pre>\r  5%|\u258c         | 101M/1.85G [00:58&lt;15:36, 1.87MB/s]</pre> <pre>\r  5%|\u258c         | 101M/1.85G [00:58&lt;15:02, 1.94MB/s]</pre> <pre>\r  5%|\u258c         | 102M/1.85G [00:58&lt;16:25, 1.77MB/s]</pre> <pre>\r  6%|\u258c         | 102M/1.85G [00:59&lt;15:49, 1.84MB/s]</pre> <pre>\r  6%|\u258c         | 103M/1.85G [00:59&lt;16:36, 1.75MB/s]</pre> <pre>\r  6%|\u258c         | 103M/1.85G [00:59&lt;17:31, 1.66MB/s]</pre> <pre>\r  6%|\u258c         | 104M/1.85G [01:00&lt;18:23, 1.58MB/s]</pre> <pre>\r  6%|\u258c         | 104M/1.85G [01:00&lt;17:33, 1.66MB/s]</pre> <pre>\r  6%|\u258c         | 105M/1.85G [01:00&lt;18:35, 1.56MB/s]</pre> <pre>\r  6%|\u258c         | 105M/1.85G [01:01&lt;18:33, 1.57MB/s]</pre> <pre>\r  6%|\u258c         | 106M/1.85G [01:01&lt;16:45, 1.74MB/s]</pre> <pre>\r  6%|\u258c         | 106M/1.85G [01:01&lt;16:59, 1.71MB/s]</pre> <pre>\r  6%|\u258c         | 107M/1.85G [01:01&lt;18:05, 1.61MB/s]</pre> <pre>\r  6%|\u258c         | 107M/1.85G [01:02&lt;16:17, 1.78MB/s]</pre> <pre>\r  6%|\u258c         | 108M/1.85G [01:02&lt;17:15, 1.68MB/s]</pre> <pre>\r  6%|\u258c         | 109M/1.85G [01:02&lt;18:20, 1.58MB/s]</pre> <pre>\r  6%|\u258c         | 109M/1.85G [01:03&lt;16:56, 1.71MB/s]</pre> <pre>\r  6%|\u258c         | 110M/1.85G [01:03&lt;16:22, 1.77MB/s]</pre> <pre>\r  6%|\u258c         | 110M/1.85G [01:03&lt;16:04, 1.81MB/s]</pre> <pre>\r  6%|\u258c         | 111M/1.85G [01:03&lt;15:21, 1.89MB/s]</pre> <pre>\r  6%|\u258c         | 111M/1.85G [01:04&lt;13:27, 2.16MB/s]</pre> <pre>\r  6%|\u258c         | 112M/1.85G [01:04&lt;13:30, 2.15MB/s]</pre> <pre>\r  6%|\u258c         | 112M/1.85G [01:04&lt;17:10, 1.69MB/s]</pre> <pre>\r  6%|\u258c         | 113M/1.85G [01:05&lt;17:21, 1.67MB/s]</pre> <pre>\r  6%|\u258c         | 113M/1.85G [01:05&lt;18:43, 1.55MB/s]</pre> <pre>\r  6%|\u258c         | 114M/1.85G [01:05&lt;17:45, 1.63MB/s]</pre> <pre>\r  6%|\u258c         | 114M/1.85G [01:06&lt;16:05, 1.80MB/s]</pre> <pre>\r  6%|\u258c         | 115M/1.85G [01:06&lt;15:55, 1.82MB/s]</pre> <pre>\r  6%|\u258c         | 115M/1.85G [01:06&lt;17:57, 1.61MB/s]</pre> <pre>\r  6%|\u258b         | 116M/1.85G [01:06&lt;15:53, 1.82MB/s]</pre> <pre>\r  6%|\u258b         | 116M/1.85G [01:07&lt;14:14, 2.03MB/s]</pre> <pre>\r  6%|\u258b         | 117M/1.85G [01:07&lt;14:45, 1.96MB/s]</pre> <pre>\r  6%|\u258b         | 117M/1.85G [01:07&lt;14:06, 2.05MB/s]</pre> <pre>\r  6%|\u258b         | 118M/1.85G [01:07&lt;12:41, 2.28MB/s]</pre> <pre>\r  6%|\u258b         | 118M/1.85G [01:08&lt;12:40, 2.28MB/s]</pre> <pre>\r  6%|\u258b         | 119M/1.85G [01:08&lt;17:00, 1.70MB/s]</pre> <pre>\r  6%|\u258b         | 120M/1.85G [01:08&lt;19:00, 1.52MB/s]</pre> <pre>\r  6%|\u258b         | 120M/1.85G [01:09&lt;18:33, 1.55MB/s]</pre> <pre>\r  7%|\u258b         | 121M/1.85G [01:09&lt;17:13, 1.67MB/s]</pre> <pre>\r  7%|\u258b         | 121M/1.85G [01:09&lt;16:15, 1.77MB/s]</pre> <pre>\r  7%|\u258b         | 122M/1.85G [01:10&lt;15:16, 1.89MB/s]</pre> <pre>\r  7%|\u258b         | 122M/1.85G [01:10&lt;14:43, 1.96MB/s]</pre> <pre>\r  7%|\u258b         | 123M/1.85G [01:10&lt;12:30, 2.30MB/s]</pre> <pre>\r  7%|\u258b         | 123M/1.85G [01:10&lt;12:08, 2.37MB/s]</pre> <pre>\r  7%|\u258b         | 124M/1.85G [01:10&lt;12:30, 2.30MB/s]</pre> <pre>\r  7%|\u258b         | 124M/1.85G [01:11&lt;12:22, 2.33MB/s]</pre> <pre>\r  7%|\u258b         | 125M/1.85G [01:11&lt;13:47, 2.09MB/s]</pre> <pre>\r  7%|\u258b         | 125M/1.85G [01:11&lt;14:33, 1.98MB/s]</pre> <pre>\r  7%|\u258b         | 126M/1.85G [01:12&lt;17:37, 1.63MB/s]</pre> <pre>\r  7%|\u258b         | 126M/1.85G [01:12&lt;16:21, 1.76MB/s]</pre> <pre>\r  7%|\u258b         | 127M/1.85G [01:12&lt;14:10, 2.03MB/s]</pre> <pre>\r  7%|\u258b         | 127M/1.85G [01:12&lt;14:18, 2.01MB/s]</pre> <pre>\r  7%|\u258b         | 128M/1.85G [01:13&lt;15:37, 1.84MB/s]</pre> <pre>\r  7%|\u258b         | 128M/1.85G [01:13&lt;18:33, 1.55MB/s]</pre> <pre>\r  7%|\u258b         | 129M/1.85G [01:13&lt;18:11, 1.58MB/s]</pre> <pre>\r  7%|\u258b         | 129M/1.85G [01:14&lt;17:47, 1.61MB/s]</pre> <pre>\r  7%|\u258b         | 130M/1.85G [01:14&lt;17:09, 1.67MB/s]</pre> <pre>\r  7%|\u258b         | 131M/1.85G [01:14&lt;17:18, 1.66MB/s]</pre> <pre>\r  7%|\u258b         | 131M/1.85G [01:15&lt;18:15, 1.57MB/s]</pre> <pre>\r  7%|\u258b         | 132M/1.85G [01:15&lt;19:26, 1.47MB/s]</pre> <pre>\r  7%|\u258b         | 132M/1.85G [01:15&lt;16:38, 1.72MB/s]</pre> <pre>\r  7%|\u258b         | 133M/1.85G [01:16&lt;14:20, 2.00MB/s]</pre> <pre>\r  7%|\u258b         | 133M/1.85G [01:16&lt;14:29, 1.98MB/s]</pre> <pre>\r  7%|\u258b         | 134M/1.85G [01:16&lt;15:37, 1.83MB/s]</pre> <pre>\r  7%|\u258b         | 134M/1.85G [01:16&lt;14:43, 1.94MB/s]</pre> <pre>\r  7%|\u258b         | 135M/1.85G [01:17&lt;15:18, 1.87MB/s]</pre> <pre>\r  7%|\u258b         | 135M/1.85G [01:17&lt;13:26, 2.13MB/s]</pre> <pre>\r  7%|\u258b         | 136M/1.85G [01:17&lt;13:47, 2.07MB/s]</pre> <pre>\r  7%|\u258b         | 136M/1.85G [01:17&lt;14:44, 1.94MB/s]</pre> <pre>\r  7%|\u258b         | 137M/1.85G [01:18&lt;15:05, 1.89MB/s]</pre> <pre>\r  7%|\u258b         | 137M/1.85G [01:18&lt;13:53, 2.06MB/s]</pre> <pre>\r  7%|\u258b         | 138M/1.85G [01:18&lt;17:24, 1.64MB/s]</pre> <pre>\r  7%|\u258b         | 138M/1.85G [01:19&lt;17:58, 1.59MB/s]</pre> <pre>\r  8%|\u258a         | 139M/1.85G [01:19&lt;17:45, 1.61MB/s]</pre> <pre>\r  8%|\u258a         | 139M/1.85G [01:19&lt;17:49, 1.60MB/s]</pre> <pre>\r  8%|\u258a         | 140M/1.85G [01:20&lt;18:48, 1.52MB/s]</pre> <pre>\r  8%|\u258a         | 141M/1.85G [01:20&lt;16:48, 1.70MB/s]</pre> <pre>\r  8%|\u258a         | 141M/1.85G [01:20&lt;14:32, 1.96MB/s]</pre> <pre>\r  8%|\u258a         | 142M/1.85G [01:21&lt;15:53, 1.79MB/s]</pre> <pre>\r  8%|\u258a         | 142M/1.85G [01:21&lt;15:49, 1.80MB/s]</pre> <pre>\r  8%|\u258a         | 143M/1.85G [01:21&lt;15:04, 1.89MB/s]</pre> <pre>\r  8%|\u258a         | 143M/1.85G [01:21&lt;12:57, 2.20MB/s]</pre> <pre>\r  8%|\u258a         | 144M/1.85G [01:21&lt;12:10, 2.34MB/s]</pre> <pre>\r  8%|\u258a         | 144M/1.85G [01:22&lt;15:47, 1.80MB/s]</pre> <pre>\r  8%|\u258a         | 145M/1.85G [01:22&lt;15:47, 1.80MB/s]</pre> <pre>\r  8%|\u258a         | 145M/1.85G [01:22&lt;14:54, 1.91MB/s]</pre> <pre>\r  8%|\u258a         | 146M/1.85G [01:23&lt;16:02, 1.77MB/s]</pre> <pre>\r  8%|\u258a         | 146M/1.85G [01:23&lt;16:12, 1.75MB/s]</pre> <pre>\r  8%|\u258a         | 147M/1.85G [01:23&lt;15:02, 1.89MB/s]</pre> <pre>\r  8%|\u258a         | 147M/1.85G [01:24&lt;15:54, 1.79MB/s]</pre> <pre>\r  8%|\u258a         | 148M/1.85G [01:24&lt;14:57, 1.90MB/s]</pre> <pre>\r  8%|\u258a         | 148M/1.85G [01:24&lt;13:01, 2.18MB/s]</pre> <pre>\r  8%|\u258a         | 149M/1.85G [01:24&lt;11:28, 2.47MB/s]</pre> <pre>\r  8%|\u258a         | 149M/1.85G [01:24&lt;11:45, 2.41MB/s]</pre> <pre>\r  8%|\u258a         | 150M/1.85G [01:25&lt;11:29, 2.47MB/s]</pre> <pre>\r  8%|\u258a         | 150M/1.85G [01:25&lt;11:18, 2.51MB/s]</pre> <pre>\r  8%|\u258a         | 151M/1.85G [01:25&lt;10:12, 2.77MB/s]</pre> <pre>\r  8%|\u258a         | 152M/1.85G [01:25&lt;09:48, 2.89MB/s]</pre> <pre>\r  8%|\u258a         | 152M/1.85G [01:25&lt;09:41, 2.92MB/s]</pre> <pre>\r  8%|\u258a         | 153M/1.85G [01:25&lt;09:38, 2.94MB/s]</pre> <pre>\r  8%|\u258a         | 153M/1.85G [01:26&lt;10:35, 2.67MB/s]</pre> <pre>\r  8%|\u258a         | 154M/1.85G [01:26&lt;10:18, 2.75MB/s]</pre> <pre>\r  8%|\u258a         | 154M/1.85G [01:26&lt;11:38, 2.43MB/s]</pre> <pre>\r  8%|\u258a         | 155M/1.85G [01:26&lt;12:33, 2.25MB/s]</pre> <pre>\r  8%|\u258a         | 155M/1.85G [01:27&lt;13:38, 2.07MB/s]</pre> <pre>\r  8%|\u258a         | 156M/1.85G [01:27&lt;13:46, 2.05MB/s]</pre> <pre>\r  8%|\u258a         | 156M/1.85G [01:27&lt;15:36, 1.81MB/s]</pre> <pre>\r  8%|\u258a         | 157M/1.85G [01:28&lt;14:42, 1.92MB/s]</pre> <pre>\r  8%|\u258a         | 157M/1.85G [01:28&lt;12:58, 2.18MB/s]</pre> <pre>\r  9%|\u258a         | 158M/1.85G [01:28&lt;12:05, 2.33MB/s]</pre> <pre>\r  9%|\u258a         | 158M/1.85G [01:28&lt;12:09, 2.32MB/s]</pre> <pre>\r  9%|\u258a         | 159M/1.85G [01:28&lt;11:27, 2.46MB/s]</pre> <pre>\r  9%|\u258a         | 159M/1.85G [01:28&lt;10:31, 2.68MB/s]</pre> <pre>\r  9%|\u258a         | 160M/1.85G [01:29&lt;12:32, 2.25MB/s]</pre> <pre>\r  9%|\u258a         | 160M/1.85G [01:29&lt;13:25, 2.10MB/s]</pre> <pre>\r  9%|\u258a         | 161M/1.85G [01:29&lt;14:28, 1.95MB/s]</pre> <pre>\r  9%|\u258a         | 161M/1.85G [01:30&lt;15:25, 1.83MB/s]</pre> <pre>\r  9%|\u2589         | 162M/1.85G [01:30&lt;15:20, 1.83MB/s]</pre> <pre>\r  9%|\u2589         | 163M/1.85G [01:30&lt;13:19, 2.11MB/s]</pre> <pre>\r  9%|\u2589         | 163M/1.85G [01:30&lt;11:53, 2.37MB/s]</pre> <pre>\r  9%|\u2589         | 164M/1.85G [01:31&lt;11:58, 2.35MB/s]</pre> <pre>\r  9%|\u2589         | 164M/1.85G [01:31&lt;12:14, 2.30MB/s]</pre> <pre>\r  9%|\u2589         | 165M/1.85G [01:31&lt;11:17, 2.49MB/s]</pre> <pre>\r  9%|\u2589         | 165M/1.85G [01:31&lt;11:33, 2.43MB/s]</pre> <pre>\r  9%|\u2589         | 166M/1.85G [01:31&lt;11:59, 2.34MB/s]</pre> <pre>\r  9%|\u2589         | 166M/1.85G [01:32&lt;13:56, 2.01MB/s]</pre> <pre>\r  9%|\u2589         | 167M/1.85G [01:32&lt;12:46, 2.20MB/s]</pre> <pre>\r  9%|\u2589         | 167M/1.85G [01:32&lt;12:21, 2.27MB/s]</pre> <pre>\r  9%|\u2589         | 168M/1.85G [01:32&lt;11:40, 2.40MB/s]</pre> <pre>\r  9%|\u2589         | 168M/1.85G [01:33&lt;11:40, 2.40MB/s]</pre> <pre>\r  9%|\u2589         | 169M/1.85G [01:33&lt;13:14, 2.12MB/s]</pre> <pre>\r  9%|\u2589         | 169M/1.85G [01:33&lt;13:42, 2.04MB/s]</pre> <pre>\r  9%|\u2589         | 170M/1.85G [01:33&lt;13:21, 2.10MB/s]</pre> <pre>\r  9%|\u2589         | 170M/1.85G [01:34&lt;12:01, 2.33MB/s]</pre> <pre>\r  9%|\u2589         | 171M/1.85G [01:34&lt;10:56, 2.56MB/s]</pre> <pre>\r  9%|\u2589         | 171M/1.85G [01:34&lt;11:35, 2.41MB/s]</pre> <pre>\r  9%|\u2589         | 172M/1.85G [01:34&lt;12:04, 2.32MB/s]</pre> <pre>\r  9%|\u2589         | 172M/1.85G [01:34&lt;13:03, 2.14MB/s]</pre> <pre>\r  9%|\u2589         | 173M/1.85G [01:35&lt;14:23, 1.94MB/s]</pre> <pre>\r  9%|\u2589         | 174M/1.85G [01:35&lt;13:51, 2.02MB/s]</pre> <pre>\r  9%|\u2589         | 174M/1.85G [01:35&lt;12:03, 2.32MB/s]</pre> <pre>\r  9%|\u2589         | 175M/1.85G [01:35&lt;11:11, 2.50MB/s]</pre> <pre>\r  9%|\u2589         | 175M/1.85G [01:36&lt;10:19, 2.71MB/s]</pre> <pre>\r  9%|\u2589         | 176M/1.85G [01:36&lt;10:15, 2.72MB/s]</pre> <pre>\r 10%|\u2589         | 176M/1.85G [01:36&lt;10:34, 2.64MB/s]</pre> <pre>\r 10%|\u2589         | 177M/1.85G [01:36&lt;10:38, 2.62MB/s]</pre> <pre>\r 10%|\u2589         | 177M/1.85G [01:36&lt;11:27, 2.44MB/s]</pre> <pre>\r 10%|\u2589         | 178M/1.85G [01:37&lt;11:03, 2.52MB/s]</pre> <pre>\r 10%|\u2589         | 178M/1.85G [01:37&lt;10:33, 2.64MB/s]</pre> <pre>\r 10%|\u2589         | 179M/1.85G [01:37&lt;10:53, 2.56MB/s]</pre> <pre>\r 10%|\u2589         | 179M/1.85G [01:37&lt;11:08, 2.50MB/s]</pre> <pre>\r 10%|\u2589         | 180M/1.85G [01:37&lt;10:56, 2.55MB/s]</pre> <pre>\r 10%|\u2589         | 180M/1.85G [01:38&lt;10:04, 2.76MB/s]</pre> <pre>\r 10%|\u2589         | 181M/1.85G [01:38&lt;09:05, 3.06MB/s]</pre> <pre>\r 10%|\u2589         | 181M/1.85G [01:38&lt;08:03, 3.45MB/s]</pre> <pre>\r 10%|\u2589         | 182M/1.85G [01:38&lt;07:49, 3.56MB/s]</pre> <pre>\r 10%|\u2589         | 182M/1.85G [01:38&lt;07:07, 3.90MB/s]</pre> <pre>\r 10%|\u2589         | 183M/1.85G [01:38&lt;07:23, 3.76MB/s]</pre> <pre>\r 10%|\u2589         | 184M/1.85G [01:38&lt;07:45, 3.58MB/s]</pre> <pre>\r 10%|\u2589         | 184M/1.85G [01:39&lt;08:57, 3.10MB/s]</pre> <pre>\r 10%|\u2589         | 185M/1.85G [01:39&lt;09:18, 2.99MB/s]</pre> <pre>\r 10%|\u2589         | 185M/1.85G [01:39&lt;09:12, 3.01MB/s]</pre> <pre>\r 10%|\u2588         | 186M/1.85G [01:39&lt;09:45, 2.85MB/s]</pre> <pre>\r 10%|\u2588         | 186M/1.85G [01:39&lt;10:29, 2.64MB/s]</pre> <pre>\r 10%|\u2588         | 187M/1.85G [01:40&lt;11:14, 2.47MB/s]</pre> <pre>\r 10%|\u2588         | 187M/1.85G [01:40&lt;10:54, 2.54MB/s]</pre> <pre>\r 10%|\u2588         | 188M/1.85G [01:40&lt;10:48, 2.56MB/s]</pre> <pre>\r 10%|\u2588         | 188M/1.85G [01:40&lt;10:11, 2.72MB/s]</pre> <pre>\r 10%|\u2588         | 189M/1.85G [01:40&lt;10:05, 2.75MB/s]</pre> <pre>\r 10%|\u2588         | 189M/1.85G [01:41&lt;09:48, 2.83MB/s]</pre> <pre>\r 10%|\u2588         | 190M/1.85G [01:41&lt;09:53, 2.80MB/s]</pre> <pre>\r 10%|\u2588         | 190M/1.85G [01:41&lt;09:31, 2.91MB/s]</pre> <pre>\r 10%|\u2588         | 191M/1.85G [01:41&lt;11:39, 2.37MB/s]</pre> <pre>\r 10%|\u2588         | 191M/1.85G [01:41&lt;10:34, 2.62MB/s]</pre> <pre>\r 10%|\u2588         | 192M/1.85G [01:42&lt;08:41, 3.18MB/s]</pre> <pre>\r 10%|\u2588         | 193M/1.85G [01:42&lt;09:06, 3.03MB/s]</pre> <pre>\r 10%|\u2588         | 193M/1.85G [01:42&lt;09:10, 3.01MB/s]</pre> <pre>\r 10%|\u2588         | 194M/1.85G [01:42&lt;08:50, 3.12MB/s]</pre> <pre>\r 11%|\u2588         | 195M/1.85G [01:42&lt;08:47, 3.14MB/s]</pre> <pre>\r 11%|\u2588         | 195M/1.85G [01:42&lt;08:49, 3.13MB/s]</pre> <pre>\r 11%|\u2588         | 196M/1.85G [01:43&lt;11:11, 2.47MB/s]</pre> <pre>\r 11%|\u2588         | 196M/1.85G [01:43&lt;15:50, 1.74MB/s]</pre> <pre>\r 11%|\u2588         | 197M/1.85G [01:44&lt;15:15, 1.81MB/s]</pre> <pre>\r 11%|\u2588         | 197M/1.85G [01:44&lt;13:50, 1.99MB/s]</pre> <pre>\r 11%|\u2588         | 198M/1.85G [01:44&lt;13:31, 2.04MB/s]</pre> <pre>\r 11%|\u2588         | 198M/1.85G [01:44&lt;11:27, 2.40MB/s]</pre> <pre>\r 11%|\u2588         | 199M/1.85G [01:44&lt;10:19, 2.67MB/s]</pre> <pre>\r 11%|\u2588         | 199M/1.85G [01:45&lt;12:17, 2.24MB/s]</pre> <pre>\r 11%|\u2588         | 200M/1.85G [01:45&lt;11:05, 2.48MB/s]</pre> <pre>\r 11%|\u2588         | 200M/1.85G [01:45&lt;10:06, 2.72MB/s]</pre> <pre>\r 11%|\u2588         | 201M/1.85G [01:45&lt;09:49, 2.80MB/s]</pre> <pre>\r 11%|\u2588         | 201M/1.85G [01:45&lt;09:38, 2.85MB/s]</pre> <pre>\r 11%|\u2588         | 202M/1.85G [01:46&lt;10:47, 2.55MB/s]</pre> <pre>\r 11%|\u2588         | 202M/1.85G [01:46&lt;09:32, 2.88MB/s]</pre> <pre>\r 11%|\u2588         | 203M/1.85G [01:46&lt;08:11, 3.35MB/s]</pre> <pre>\r 11%|\u2588         | 204M/1.85G [01:46&lt;09:17, 2.96MB/s]</pre> <pre>\r 11%|\u2588         | 204M/1.85G [01:46&lt;10:18, 2.66MB/s]</pre> <pre>\r 11%|\u2588         | 205M/1.85G [01:47&lt;10:01, 2.74MB/s]</pre> <pre>\r 11%|\u2588         | 206M/1.85G [01:47&lt;09:18, 2.95MB/s]</pre> <pre>\r 11%|\u2588         | 206M/1.85G [01:47&lt;09:03, 3.02MB/s]</pre> <pre>\r 11%|\u2588         | 207M/1.85G [01:47&lt;10:10, 2.69MB/s]</pre> <pre>\r 11%|\u2588         | 207M/1.85G [01:47&lt;09:27, 2.90MB/s]</pre> <pre>\r 11%|\u2588         | 208M/1.85G [01:47&lt;08:40, 3.16MB/s]</pre> <pre>\r 11%|\u2588         | 208M/1.85G [01:48&lt;08:29, 3.22MB/s]</pre> <pre>\r 11%|\u2588\u258f        | 209M/1.85G [01:48&lt;07:39, 3.57MB/s]</pre> <pre>\r 11%|\u2588\u258f        | 209M/1.85G [01:48&lt;07:18, 3.74MB/s]</pre> <pre>\r 11%|\u2588\u258f        | 210M/1.85G [01:48&lt;08:58, 3.05MB/s]</pre> <pre>\r 11%|\u2588\u258f        | 210M/1.85G [01:48&lt;09:03, 3.02MB/s]</pre> <pre>\r 11%|\u2588\u258f        | 211M/1.85G [01:48&lt;09:04, 3.01MB/s]</pre> <pre>\r 11%|\u2588\u258f        | 211M/1.85G [01:49&lt;09:34, 2.85MB/s]</pre> <pre>\r 11%|\u2588\u258f        | 212M/1.85G [01:49&lt;09:19, 2.93MB/s]</pre> <pre>\r 11%|\u2588\u258f        | 212M/1.85G [01:49&lt;11:21, 2.40MB/s]</pre> <pre>\r 11%|\u2588\u258f        | 213M/1.85G [01:49&lt;11:11, 2.44MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 213M/1.85G [01:49&lt;10:37, 2.57MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 214M/1.85G [01:50&lt;09:40, 2.82MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 214M/1.85G [01:50&lt;09:39, 2.83MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 215M/1.85G [01:50&lt;09:43, 2.80MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 215M/1.85G [01:50&lt;09:43, 2.80MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 216M/1.85G [01:50&lt;09:07, 2.99MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 217M/1.85G [01:51&lt;10:03, 2.71MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 217M/1.85G [01:51&lt;09:31, 2.86MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 218M/1.85G [01:51&lt;10:14, 2.66MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 218M/1.85G [01:51&lt;10:08, 2.68MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 219M/1.85G [01:51&lt;10:03, 2.71MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 219M/1.85G [01:51&lt;09:22, 2.90MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 220M/1.85G [01:52&lt;09:29, 2.87MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 220M/1.85G [01:52&lt;08:30, 3.20MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 221M/1.85G [01:52&lt;08:20, 3.26MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 221M/1.85G [01:52&lt;08:23, 3.23MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 222M/1.85G [01:52&lt;08:08, 3.34MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 222M/1.85G [01:52&lt;09:14, 2.94MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 223M/1.85G [01:53&lt;09:04, 2.99MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 223M/1.85G [01:53&lt;09:30, 2.85MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 224M/1.85G [01:53&lt;10:03, 2.70MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 224M/1.85G [01:53&lt;09:35, 2.82MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 225M/1.85G [01:53&lt;09:36, 2.82MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 225M/1.85G [01:54&lt;09:42, 2.79MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 226M/1.85G [01:54&lt;10:28, 2.59MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 226M/1.85G [01:54&lt;10:09, 2.67MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 227M/1.85G [01:54&lt;09:57, 2.72MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 228M/1.85G [01:54&lt;09:23, 2.88MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 228M/1.85G [01:55&lt;09:59, 2.71MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 229M/1.85G [01:55&lt;10:56, 2.47MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 229M/1.85G [01:55&lt;09:32, 2.83MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 230M/1.85G [01:55&lt;08:33, 3.16MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 230M/1.85G [01:55&lt;08:03, 3.35MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 231M/1.85G [01:55&lt;08:19, 3.24MB/s]</pre> <pre>\r 12%|\u2588\u258f        | 231M/1.85G [01:55&lt;07:28, 3.61MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 232M/1.85G [01:56&lt;07:08, 3.78MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 232M/1.85G [01:56&lt;09:06, 2.96MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 233M/1.85G [01:56&lt;09:35, 2.81MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 233M/1.85G [01:56&lt;09:00, 2.99MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 234M/1.85G [01:56&lt;08:35, 3.13MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 234M/1.85G [01:57&lt;08:02, 3.35MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 235M/1.85G [01:57&lt;08:49, 3.05MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 235M/1.85G [01:57&lt;08:30, 3.16MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 236M/1.85G [01:57&lt;09:27, 2.85MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 236M/1.85G [01:57&lt;11:49, 2.28MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 237M/1.85G [01:58&lt;12:39, 2.13MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 238M/1.85G [01:58&lt;11:58, 2.25MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 238M/1.85G [01:58&lt;10:56, 2.46MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 239M/1.85G [01:58&lt;11:09, 2.41MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 239M/1.85G [01:59&lt;11:53, 2.26MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 240M/1.85G [01:59&lt;10:40, 2.52MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 240M/1.85G [01:59&lt;09:26, 2.84MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 241M/1.85G [01:59&lt;09:32, 2.81MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 241M/1.85G [01:59&lt;10:14, 2.62MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 242M/1.85G [02:00&lt;10:54, 2.46MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 242M/1.85G [02:00&lt;09:47, 2.74MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 243M/1.85G [02:00&lt;09:25, 2.84MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 243M/1.85G [02:00&lt;09:16, 2.89MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 244M/1.85G [02:00&lt;09:41, 2.76MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 244M/1.85G [02:00&lt;09:27, 2.83MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 245M/1.85G [02:01&lt;09:32, 2.81MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 245M/1.85G [02:01&lt;09:30, 2.82MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 246M/1.85G [02:01&lt;09:40, 2.77MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 246M/1.85G [02:01&lt;09:58, 2.68MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 247M/1.85G [02:01&lt;09:44, 2.74MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 247M/1.85G [02:02&lt;09:22, 2.85MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 248M/1.85G [02:02&lt;09:12, 2.90MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 249M/1.85G [02:02&lt;08:55, 2.99MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 249M/1.85G [02:02&lt;09:31, 2.80MB/s]</pre> <pre>\r 13%|\u2588\u258e        | 250M/1.85G [02:02&lt;09:04, 2.94MB/s]</pre> <pre>\r 14%|\u2588\u258e        | 250M/1.85G [02:02&lt;08:57, 2.98MB/s]</pre> <pre>\r 14%|\u2588\u258e        | 251M/1.85G [02:03&lt;08:40, 3.07MB/s]</pre> <pre>\r 14%|\u2588\u258e        | 251M/1.85G [02:03&lt;08:16, 3.22MB/s]</pre> <pre>\r 14%|\u2588\u258e        | 252M/1.85G [02:03&lt;08:28, 3.14MB/s]</pre> <pre>\r 14%|\u2588\u258e        | 252M/1.85G [02:03&lt;07:53, 3.38MB/s]</pre> <pre>\r 14%|\u2588\u258e        | 253M/1.85G [02:03&lt;07:19, 3.64MB/s]</pre> <pre>\r 14%|\u2588\u258e        | 253M/1.85G [02:03&lt;07:24, 3.60MB/s]</pre> <pre>\r 14%|\u2588\u258e        | 254M/1.85G [02:03&lt;07:21, 3.61MB/s]</pre> <pre>\r 14%|\u2588\u258e        | 254M/1.85G [02:04&lt;07:49, 3.40MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 255M/1.85G [02:04&lt;08:16, 3.21MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 255M/1.85G [02:04&lt;09:38, 2.76MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 256M/1.85G [02:04&lt;09:19, 2.85MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 256M/1.85G [02:04&lt;09:54, 2.68MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 257M/1.85G [02:05&lt;09:37, 2.76MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 257M/1.85G [02:05&lt;09:04, 2.93MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 258M/1.85G [02:05&lt;09:06, 2.92MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 258M/1.85G [02:05&lt;08:13, 3.23MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 260M/1.85G [02:05&lt;06:37, 4.00MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 261M/1.85G [02:06&lt;06:39, 3.98MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 261M/1.85G [02:06&lt;06:54, 3.84MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 262M/1.85G [02:06&lt;07:27, 3.55MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 262M/1.85G [02:06&lt;07:09, 3.70MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 263M/1.85G [02:06&lt;07:15, 3.65MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 263M/1.85G [02:06&lt;07:21, 3.60MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 264M/1.85G [02:06&lt;07:08, 3.71MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 264M/1.85G [02:07&lt;07:11, 3.68MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 265M/1.85G [02:07&lt;05:56, 4.44MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 266M/1.85G [02:07&lt;05:10, 5.10MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 267M/1.85G [02:07&lt;05:12, 5.07MB/s]</pre> <pre>\r 14%|\u2588\u258d        | 268M/1.85G [02:07&lt;04:49, 5.47MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 269M/1.85G [02:07&lt;05:40, 4.65MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 269M/1.85G [02:08&lt;05:51, 4.49MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 270M/1.85G [02:08&lt;06:42, 3.93MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 271M/1.85G [02:08&lt;06:49, 3.86MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 271M/1.85G [02:08&lt;07:07, 3.69MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 272M/1.85G [02:08&lt;07:11, 3.66MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 272M/1.85G [02:08&lt;07:35, 3.47MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 273M/1.85G [02:09&lt;07:45, 3.39MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 273M/1.85G [02:09&lt;07:31, 3.49MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 274M/1.85G [02:09&lt;07:53, 3.33MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 274M/1.85G [02:09&lt;08:17, 3.17MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 275M/1.85G [02:09&lt;08:25, 3.12MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 275M/1.85G [02:09&lt;08:08, 3.23MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 276M/1.85G [02:10&lt;07:46, 3.38MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 276M/1.85G [02:10&lt;07:30, 3.49MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 277M/1.85G [02:10&lt;07:13, 3.63MB/s]</pre> <pre>\r 15%|\u2588\u258d        | 277M/1.85G [02:10&lt;07:00, 3.75MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 278M/1.85G [02:10&lt;06:31, 4.02MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 278M/1.85G [02:10&lt;07:30, 3.49MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 279M/1.85G [02:10&lt;08:19, 3.15MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 279M/1.85G [02:11&lt;08:20, 3.14MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 280M/1.85G [02:11&lt;07:22, 3.55MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 280M/1.85G [02:11&lt;06:45, 3.87MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 281M/1.85G [02:11&lt;06:26, 4.06MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 282M/1.85G [02:11&lt;07:09, 3.65MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 282M/1.85G [02:11&lt;07:47, 3.35MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 283M/1.85G [02:11&lt;08:16, 3.16MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 283M/1.85G [02:12&lt;08:08, 3.21MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 284M/1.85G [02:12&lt;07:54, 3.30MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 284M/1.85G [02:12&lt;07:59, 3.27MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 285M/1.85G [02:12&lt;07:25, 3.52MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 285M/1.85G [02:12&lt;07:56, 3.29MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 286M/1.85G [02:12&lt;08:17, 3.14MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 286M/1.85G [02:13&lt;07:50, 3.32MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 287M/1.85G [02:13&lt;07:24, 3.52MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 287M/1.85G [02:13&lt;07:19, 3.56MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 288M/1.85G [02:13&lt;06:46, 3.84MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 288M/1.85G [02:13&lt;06:21, 4.10MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 289M/1.85G [02:13&lt;05:40, 4.59MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 290M/1.85G [02:13&lt;06:08, 4.24MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 290M/1.85G [02:14&lt;06:36, 3.93MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 291M/1.85G [02:14&lt;07:54, 3.29MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 292M/1.85G [02:14&lt;08:59, 2.89MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 292M/1.85G [02:14&lt;09:10, 2.83MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 293M/1.85G [02:15&lt;10:41, 2.43MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 293M/1.85G [02:15&lt;10:26, 2.49MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 294M/1.85G [02:15&lt;09:50, 2.64MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 294M/1.85G [02:15&lt;10:02, 2.58MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 295M/1.85G [02:15&lt;09:23, 2.76MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 295M/1.85G [02:15&lt;09:49, 2.64MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 296M/1.85G [02:16&lt;11:11, 2.32MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 296M/1.85G [02:16&lt;12:36, 2.06MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 297M/1.85G [02:16&lt;14:38, 1.77MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 297M/1.85G [02:17&lt;13:17, 1.95MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 298M/1.85G [02:17&lt;11:29, 2.25MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 298M/1.85G [02:17&lt;09:52, 2.62MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 299M/1.85G [02:17&lt;09:52, 2.62MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 299M/1.85G [02:17&lt;10:03, 2.57MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 300M/1.85G [02:18&lt;10:58, 2.35MB/s]</pre> <pre>\r 16%|\u2588\u258c        | 300M/1.85G [02:18&lt;09:43, 2.66MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 301M/1.85G [02:18&lt;09:28, 2.73MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 301M/1.85G [02:18&lt;10:23, 2.48MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 302M/1.85G [02:18&lt;10:06, 2.55MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 303M/1.85G [02:19&lt;10:09, 2.54MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 303M/1.85G [02:19&lt;10:11, 2.53MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 304M/1.85G [02:19&lt;11:35, 2.22MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 304M/1.85G [02:19&lt;11:26, 2.25MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 305M/1.85G [02:20&lt;11:32, 2.23MB/s]</pre> <pre>\r 16%|\u2588\u258b        | 305M/1.85G [02:20&lt;09:59, 2.58MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 306M/1.85G [02:20&lt;09:05, 2.84MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 306M/1.85G [02:20&lt;08:52, 2.90MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 307M/1.85G [02:20&lt;08:24, 3.06MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 307M/1.85G [02:20&lt;08:27, 3.04MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 308M/1.85G [02:21&lt;08:58, 2.86MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 308M/1.85G [02:21&lt;08:11, 3.14MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 309M/1.85G [02:21&lt;08:37, 2.98MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 309M/1.85G [02:21&lt;09:43, 2.64MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 310M/1.85G [02:21&lt;09:06, 2.82MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 310M/1.85G [02:21&lt;08:04, 3.18MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 311M/1.85G [02:22&lt;07:12, 3.56MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 311M/1.85G [02:22&lt;07:22, 3.48MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 312M/1.85G [02:22&lt;08:52, 2.89MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 312M/1.85G [02:22&lt;08:08, 3.15MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 313M/1.85G [02:22&lt;07:59, 3.21MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 314M/1.85G [02:22&lt;08:26, 3.03MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 314M/1.85G [02:23&lt;08:29, 3.02MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 315M/1.85G [02:23&lt;08:14, 3.11MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 315M/1.85G [02:23&lt;08:27, 3.03MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 316M/1.85G [02:23&lt;08:20, 3.07MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 316M/1.85G [02:23&lt;08:55, 2.87MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 317M/1.85G [02:23&lt;08:29, 3.01MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 317M/1.85G [02:24&lt;08:32, 2.99MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 318M/1.85G [02:24&lt;08:17, 3.08MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 318M/1.85G [02:24&lt;08:01, 3.18MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 319M/1.85G [02:24&lt;07:58, 3.20MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 319M/1.85G [02:24&lt;07:46, 3.29MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 320M/1.85G [02:24&lt;07:40, 3.32MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 320M/1.85G [02:25&lt;08:02, 3.17MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 321M/1.85G [02:25&lt;09:00, 2.83MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 321M/1.85G [02:25&lt;08:37, 2.96MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 322M/1.85G [02:25&lt;08:10, 3.12MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 322M/1.85G [02:25&lt;08:45, 2.91MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 323M/1.85G [02:25&lt;08:16, 3.08MB/s]</pre> <pre>\r 17%|\u2588\u258b        | 323M/1.85G [02:26&lt;07:50, 3.24MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 324M/1.85G [02:26&lt;07:03, 3.61MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 325M/1.85G [02:26&lt;06:53, 3.69MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 326M/1.85G [02:26&lt;07:10, 3.54MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 326M/1.85G [02:26&lt;07:06, 3.57MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 327M/1.85G [02:26&lt;07:22, 3.45MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 327M/1.85G [02:27&lt;08:05, 3.14MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 328M/1.85G [02:27&lt;09:07, 2.78MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 328M/1.85G [02:27&lt;09:41, 2.62MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 329M/1.85G [02:27&lt;11:07, 2.28MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 329M/1.85G [02:28&lt;10:33, 2.40MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 330M/1.85G [02:28&lt;11:16, 2.25MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 330M/1.85G [02:28&lt;10:30, 2.41MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 331M/1.85G [02:28&lt;10:20, 2.45MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 331M/1.85G [02:29&lt;10:11, 2.49MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 332M/1.85G [02:29&lt;09:48, 2.58MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 332M/1.85G [02:29&lt;08:33, 2.96MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 333M/1.85G [02:29&lt;08:11, 3.09MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 333M/1.85G [02:29&lt;08:25, 3.00MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 334M/1.85G [02:29&lt;08:39, 2.92MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 334M/1.85G [02:30&lt;08:17, 3.05MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 335M/1.85G [02:30&lt;07:30, 3.36MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 336M/1.85G [02:30&lt;08:19, 3.03MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 336M/1.85G [02:30&lt;08:45, 2.88MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 337M/1.85G [02:30&lt;08:18, 3.04MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 337M/1.85G [02:30&lt;08:31, 2.96MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 338M/1.85G [02:31&lt;07:56, 3.18MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 338M/1.85G [02:31&lt;07:47, 3.23MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 339M/1.85G [02:31&lt;07:08, 3.53MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 339M/1.85G [02:31&lt;07:15, 3.47MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 340M/1.85G [02:31&lt;09:03, 2.78MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 340M/1.85G [02:31&lt;09:50, 2.56MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 341M/1.85G [02:32&lt;09:28, 2.66MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 341M/1.85G [02:32&lt;09:51, 2.55MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 342M/1.85G [02:32&lt;10:10, 2.47MB/s]</pre> <pre>\r 18%|\u2588\u258a        | 342M/1.85G [02:32&lt;09:41, 2.59MB/s]</pre> <pre>\r 19%|\u2588\u258a        | 343M/1.85G [02:32&lt;08:25, 2.98MB/s]</pre> <pre>\r 19%|\u2588\u258a        | 344M/1.85G [02:33&lt;06:23, 3.93MB/s]</pre> <pre>\r 19%|\u2588\u258a        | 344M/1.85G [02:33&lt;06:11, 4.05MB/s]</pre> <pre>\r 19%|\u2588\u258a        | 345M/1.85G [02:33&lt;07:12, 3.48MB/s]</pre> <pre>\r 19%|\u2588\u258a        | 346M/1.85G [02:33&lt;08:27, 2.97MB/s]</pre> <pre>\r 19%|\u2588\u258a        | 346M/1.85G [02:33&lt;09:03, 2.77MB/s]</pre> <pre>\r 19%|\u2588\u258a        | 347M/1.85G [02:34&lt;10:07, 2.48MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 347M/1.85G [02:34&lt;11:00, 2.28MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 348M/1.85G [02:34&lt;12:04, 2.07MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 348M/1.85G [02:34&lt;11:48, 2.12MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 349M/1.85G [02:35&lt;12:43, 1.97MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 349M/1.85G [02:35&lt;12:01, 2.08MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 350M/1.85G [02:35&lt;11:25, 2.19MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 350M/1.85G [02:35&lt;10:13, 2.45MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 351M/1.85G [02:36&lt;09:46, 2.56MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 351M/1.85G [02:36&lt;10:01, 2.49MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 352M/1.85G [02:36&lt;09:56, 2.51MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 352M/1.85G [02:36&lt;10:47, 2.32MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 353M/1.85G [02:36&lt;09:45, 2.56MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 353M/1.85G [02:37&lt;09:44, 2.56MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 354M/1.85G [02:37&lt;09:09, 2.72MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 354M/1.85G [02:37&lt;08:08, 3.06MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 355M/1.85G [02:37&lt;07:18, 3.41MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 356M/1.85G [02:37&lt;06:30, 3.83MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 357M/1.85G [02:37&lt;06:27, 3.86MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 357M/1.85G [02:37&lt;06:39, 3.74MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 358M/1.85G [02:38&lt;07:30, 3.31MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 358M/1.85G [02:38&lt;08:14, 3.02MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 359M/1.85G [02:38&lt;08:15, 3.01MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 359M/1.85G [02:38&lt;07:20, 3.39MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 360M/1.85G [02:38&lt;06:01, 4.12MB/s]</pre> <pre>\r 19%|\u2588\u2589        | 361M/1.85G [02:39&lt;06:21, 3.91MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 361M/1.85G [02:39&lt;07:03, 3.52MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 362M/1.85G [02:39&lt;07:05, 3.50MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 362M/1.85G [02:39&lt;07:00, 3.54MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 363M/1.85G [02:39&lt;07:57, 3.11MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 363M/1.85G [02:39&lt;08:26, 2.94MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 364M/1.85G [02:40&lt;09:23, 2.64MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 364M/1.85G [02:40&lt;08:52, 2.79MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 365M/1.85G [02:40&lt;08:19, 2.98MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 365M/1.85G [02:40&lt;08:44, 2.83MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 366M/1.85G [02:40&lt;09:09, 2.70MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 366M/1.85G [02:41&lt;08:31, 2.90MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 367M/1.85G [02:41&lt;08:58, 2.75MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 368M/1.85G [02:41&lt;08:26, 2.93MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 368M/1.85G [02:41&lt;07:48, 3.16MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 369M/1.85G [02:41&lt;07:12, 3.43MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 369M/1.85G [02:41&lt;06:37, 3.73MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 370M/1.85G [02:42&lt;07:28, 3.30MB/s]</pre> <pre>\r 20%|\u2588\u2589        | 370M/1.85G [02:42&lt;08:08, 3.03MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 371M/1.85G [02:42&lt;08:39, 2.85MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 371M/1.85G [02:42&lt;08:40, 2.84MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 372M/1.85G [02:42&lt;08:06, 3.04MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 372M/1.85G [02:42&lt;08:00, 3.08MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 373M/1.85G [02:43&lt;08:01, 3.07MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 373M/1.85G [02:43&lt;07:33, 3.26MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 374M/1.85G [02:43&lt;08:10, 3.01MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 374M/1.85G [02:43&lt;09:05, 2.71MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 375M/1.85G [02:43&lt;09:51, 2.49MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 375M/1.85G [02:44&lt;08:57, 2.75MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 376M/1.85G [02:44&lt;08:15, 2.98MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 376M/1.85G [02:44&lt;07:40, 3.20MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 377M/1.85G [02:44&lt;07:15, 3.38MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 377M/1.85G [02:44&lt;06:37, 3.70MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 378M/1.85G [02:44&lt;06:41, 3.66MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 379M/1.85G [02:44&lt;06:37, 3.70MB/s]</pre> <pre>\r 20%|\u2588\u2588        | 379M/1.85G [02:45&lt;06:32, 3.75MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 380M/1.85G [02:45&lt;07:04, 3.47MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 380M/1.85G [02:45&lt;07:00, 3.50MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 381M/1.85G [02:45&lt;06:32, 3.75MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 381M/1.85G [02:45&lt;06:08, 3.99MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 382M/1.85G [02:45&lt;06:10, 3.97MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 382M/1.85G [02:45&lt;06:09, 3.98MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 383M/1.85G [02:45&lt;05:47, 4.23MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 383M/1.85G [02:46&lt;05:30, 4.44MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 384M/1.85G [02:46&lt;04:44, 5.15MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 385M/1.85G [02:46&lt;04:52, 5.02MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 385M/1.85G [02:46&lt;05:43, 4.27MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 386M/1.85G [02:46&lt;06:23, 3.82MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 386M/1.85G [02:46&lt;06:24, 3.81MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 387M/1.85G [02:47&lt;07:13, 3.38MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 387M/1.85G [02:47&lt;07:50, 3.11MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 388M/1.85G [02:47&lt;07:15, 3.36MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 388M/1.85G [02:47&lt;06:42, 3.63MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 389M/1.85G [02:47&lt;06:30, 3.74MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 390M/1.85G [02:47&lt;06:56, 3.51MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 390M/1.85G [02:48&lt;08:33, 2.84MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 391M/1.85G [02:48&lt;08:45, 2.78MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 391M/1.85G [02:48&lt;08:44, 2.78MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 392M/1.85G [02:48&lt;08:28, 2.87MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 392M/1.85G [02:48&lt;09:02, 2.69MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 393M/1.85G [02:49&lt;09:12, 2.64MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 393M/1.85G [02:49&lt;09:06, 2.67MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 394M/1.85G [02:49&lt;08:37, 2.81MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 394M/1.85G [02:49&lt;09:42, 2.50MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 395M/1.85G [02:49&lt;10:22, 2.34MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 395M/1.85G [02:50&lt;10:38, 2.28MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 396M/1.85G [02:50&lt;09:58, 2.43MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 396M/1.85G [02:50&lt;09:13, 2.63MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 397M/1.85G [02:50&lt;08:20, 2.90MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 397M/1.85G [02:50&lt;08:32, 2.84MB/s]</pre> <pre>\r 21%|\u2588\u2588\u258f       | 398M/1.85G [02:50&lt;08:43, 2.78MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 398M/1.85G [02:51&lt;08:54, 2.72MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 399M/1.85G [02:51&lt;08:23, 2.89MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 400M/1.85G [02:51&lt;08:06, 2.98MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 400M/1.85G [02:51&lt;07:36, 3.18MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 401M/1.85G [02:51&lt;07:10, 3.37MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 401M/1.85G [02:51&lt;07:14, 3.33MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 402M/1.85G [02:52&lt;08:19, 2.90MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 402M/1.85G [02:52&lt;08:43, 2.77MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 403M/1.85G [02:52&lt;08:21, 2.89MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 403M/1.85G [02:52&lt;08:07, 2.97MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 404M/1.85G [02:52&lt;07:27, 3.24MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 404M/1.85G [02:53&lt;07:18, 3.30MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 405M/1.85G [02:53&lt;07:10, 3.36MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 405M/1.85G [02:53&lt;06:48, 3.54MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 406M/1.85G [02:53&lt;05:31, 4.36MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 407M/1.85G [02:53&lt;04:53, 4.92MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 408M/1.85G [02:53&lt;04:24, 5.45MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 409M/1.85G [02:53&lt;04:24, 5.44MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 411M/1.85G [02:54&lt;04:58, 4.82MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 411M/1.85G [02:54&lt;05:11, 4.62MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 412M/1.85G [02:54&lt;05:20, 4.49MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 413M/1.85G [02:54&lt;05:04, 4.72MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 413M/1.85G [02:54&lt;05:31, 4.34MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 414M/1.85G [02:55&lt;05:48, 4.12MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 414M/1.85G [02:55&lt;06:50, 3.50MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 415M/1.85G [02:55&lt;07:33, 3.17MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 415M/1.85G [02:55&lt;08:24, 2.84MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 416M/1.85G [02:55&lt;08:08, 2.94MB/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 416M/1.85G [02:56&lt;08:02, 2.97MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 417M/1.85G [02:56&lt;08:23, 2.85MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 417M/1.85G [02:56&lt;07:59, 2.99MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 418M/1.85G [02:56&lt;07:19, 3.26MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 418M/1.85G [02:56&lt;07:38, 3.13MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 419M/1.85G [02:56&lt;07:31, 3.17MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 419M/1.85G [02:57&lt;07:32, 3.17MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 420M/1.85G [02:57&lt;08:19, 2.86MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 420M/1.85G [02:57&lt;07:56, 3.00MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 421M/1.85G [02:57&lt;07:12, 3.31MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 422M/1.85G [02:57&lt;07:26, 3.20MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 422M/1.85G [02:57&lt;06:53, 3.46MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 423M/1.85G [02:57&lt;06:31, 3.65MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 423M/1.85G [02:58&lt;06:28, 3.68MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 424M/1.85G [02:58&lt;07:24, 3.21MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 424M/1.85G [02:58&lt;08:18, 2.86MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 425M/1.85G [02:58&lt;09:12, 2.58MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 425M/1.85G [02:58&lt;09:02, 2.63MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 426M/1.85G [02:59&lt;08:51, 2.68MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 426M/1.85G [02:59&lt;07:54, 3.00MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 427M/1.85G [02:59&lt;07:31, 3.15MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 427M/1.85G [02:59&lt;07:19, 3.24MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 428M/1.85G [02:59&lt;08:09, 2.91MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 428M/1.85G [02:59&lt;08:10, 2.90MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 429M/1.85G [03:00&lt;07:38, 3.10MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 429M/1.85G [03:00&lt;06:57, 3.40MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 430M/1.85G [03:00&lt;07:33, 3.13MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 430M/1.85G [03:00&lt;08:17, 2.85MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 431M/1.85G [03:00&lt;08:16, 2.86MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 431M/1.85G [03:01&lt;08:42, 2.72MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 432M/1.85G [03:01&lt;08:49, 2.68MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 433M/1.85G [03:01&lt;07:59, 2.96MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 433M/1.85G [03:01&lt;07:31, 3.14MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 434M/1.85G [03:01&lt;07:17, 3.24MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 434M/1.85G [03:01&lt;08:02, 2.93MB/s]</pre> <pre>\r 23%|\u2588\u2588\u258e       | 435M/1.85G [03:02&lt;07:44, 3.05MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 435M/1.85G [03:02&lt;07:03, 3.34MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 436M/1.85G [03:02&lt;07:50, 3.01MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 436M/1.85G [03:02&lt;07:54, 2.98MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 437M/1.85G [03:02&lt;07:26, 3.17MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 437M/1.85G [03:02&lt;06:48, 3.46MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 438M/1.85G [03:02&lt;06:28, 3.64MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 438M/1.85G [03:03&lt;06:33, 3.59MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 439M/1.85G [03:03&lt;06:55, 3.40MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 439M/1.85G [03:03&lt;07:00, 3.36MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 440M/1.85G [03:03&lt;06:20, 3.70MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 440M/1.85G [03:03&lt;05:52, 4.01MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 441M/1.85G [03:03&lt;04:57, 4.74MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 442M/1.85G [03:03&lt;05:01, 4.67MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 442M/1.85G [03:04&lt;05:08, 4.56MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 443M/1.85G [03:04&lt;05:21, 4.38MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 444M/1.85G [03:04&lt;05:10, 4.53MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 444M/1.85G [03:04&lt;05:32, 4.23MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 445M/1.85G [03:04&lt;05:16, 4.44MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 446M/1.85G [03:04&lt;05:42, 4.11MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 446M/1.85G [03:05&lt;07:06, 3.30MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 447M/1.85G [03:05&lt;07:37, 3.07MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 447M/1.85G [03:05&lt;07:04, 3.31MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 448M/1.85G [03:05&lt;06:51, 3.41MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 448M/1.85G [03:05&lt;08:10, 2.86MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 449M/1.85G [03:06&lt;08:53, 2.63MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 449M/1.85G [03:06&lt;08:22, 2.79MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 450M/1.85G [03:06&lt;07:34, 3.08MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 450M/1.85G [03:06&lt;07:01, 3.32MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 451M/1.85G [03:06&lt;06:44, 3.46MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 451M/1.85G [03:06&lt;06:35, 3.54MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 452M/1.85G [03:06&lt;07:01, 3.32MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 452M/1.85G [03:07&lt;08:08, 2.87MB/s]</pre> <pre>\r 24%|\u2588\u2588\u258d       | 453M/1.85G [03:07&lt;07:52, 2.96MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 454M/1.85G [03:07&lt;07:11, 3.24MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 454M/1.85G [03:07&lt;06:44, 3.46MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 455M/1.85G [03:07&lt;06:39, 3.49MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 455M/1.85G [03:07&lt;06:24, 3.63MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 456M/1.85G [03:08&lt;06:24, 3.63MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 456M/1.85G [03:08&lt;06:40, 3.48MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 457M/1.85G [03:08&lt;06:05, 3.82MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 457M/1.85G [03:08&lt;05:39, 4.11MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 458M/1.85G [03:08&lt;04:45, 4.88MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 459M/1.85G [03:08&lt;04:49, 4.82MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 459M/1.85G [03:08&lt;04:48, 4.83MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 460M/1.85G [03:08&lt;04:56, 4.70MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 460M/1.85G [03:09&lt;04:59, 4.64MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 461M/1.85G [03:09&lt;04:50, 4.79MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 461M/1.85G [03:09&lt;04:56, 4.69MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 462M/1.85G [03:09&lt;05:27, 4.25MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258d       | 462M/1.85G [03:09&lt;05:44, 4.03MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 463M/1.85G [03:09&lt;05:48, 3.99MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 463M/1.85G [03:09&lt;05:49, 3.97MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 465M/1.85G [03:09&lt;05:06, 4.52MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 466M/1.85G [03:10&lt;04:46, 4.84MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 466M/1.85G [03:10&lt;05:18, 4.34MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 467M/1.85G [03:10&lt;05:25, 4.25MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 467M/1.85G [03:10&lt;06:12, 3.72MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 468M/1.85G [03:10&lt;06:34, 3.50MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 468M/1.85G [03:10&lt;06:16, 3.67MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 469M/1.85G [03:11&lt;06:26, 3.58MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 469M/1.85G [03:11&lt;06:30, 3.54MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 470M/1.85G [03:11&lt;05:54, 3.89MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 470M/1.85G [03:11&lt;06:37, 3.48MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 471M/1.85G [03:11&lt;07:08, 3.22MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 471M/1.85G [03:11&lt;06:38, 3.46MB/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 472M/1.85G [03:12&lt;07:13, 3.18MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 472M/1.85G [03:12&lt;07:02, 3.27MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 473M/1.85G [03:12&lt;06:28, 3.55MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 473M/1.85G [03:12&lt;06:32, 3.51MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 474M/1.85G [03:12&lt;06:19, 3.62MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 474M/1.85G [03:12&lt;06:05, 3.76MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 476M/1.85G [03:12&lt;05:27, 4.20MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 476M/1.85G [03:13&lt;05:33, 4.13MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 477M/1.85G [03:13&lt;05:26, 4.21MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 478M/1.85G [03:13&lt;04:39, 4.91MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 479M/1.85G [03:13&lt;05:23, 4.24MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 479M/1.85G [03:13&lt;05:56, 3.84MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 480M/1.85G [03:14&lt;06:13, 3.67MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 480M/1.85G [03:14&lt;06:11, 3.69MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 481M/1.85G [03:14&lt;06:25, 3.55MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 481M/1.85G [03:14&lt;06:53, 3.32MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 482M/1.85G [03:14&lt;07:00, 3.25MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 482M/1.85G [03:14&lt;06:52, 3.32MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 483M/1.85G [03:15&lt;07:27, 3.06MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 483M/1.85G [03:15&lt;08:17, 2.75MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 484M/1.85G [03:15&lt;07:54, 2.88MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 484M/1.85G [03:15&lt;07:08, 3.19MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 485M/1.85G [03:15&lt;05:31, 4.11MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 487M/1.85G [03:15&lt;04:32, 5.00MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 487M/1.85G [03:16&lt;04:47, 4.74MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 488M/1.85G [03:16&lt;05:29, 4.14MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 488M/1.85G [03:16&lt;05:52, 3.86MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 489M/1.85G [03:16&lt;06:23, 3.55MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 489M/1.85G [03:16&lt;06:36, 3.43MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 490M/1.85G [03:16&lt;07:08, 3.18MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258b       | 490M/1.85G [03:17&lt;07:21, 3.08MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 491M/1.85G [03:17&lt;07:29, 3.03MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 491M/1.85G [03:17&lt;07:20, 3.09MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 492M/1.85G [03:17&lt;07:05, 3.20MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 492M/1.85G [03:17&lt;06:18, 3.59MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 493M/1.85G [03:17&lt;05:43, 3.95MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 493M/1.85G [03:17&lt;05:52, 3.85MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 494M/1.85G [03:18&lt;05:46, 3.92MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 494M/1.85G [03:18&lt;05:23, 4.19MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 495M/1.85G [03:18&lt;05:39, 3.99MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 495M/1.85G [03:18&lt;05:27, 4.13MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 496M/1.85G [03:18&lt;06:20, 3.57MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 497M/1.85G [03:18&lt;06:51, 3.29MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 497M/1.85G [03:18&lt;07:00, 3.22MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 498M/1.85G [03:19&lt;07:23, 3.05MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 498M/1.85G [03:19&lt;06:43, 3.35MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 499M/1.85G [03:19&lt;06:40, 3.38MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 499M/1.85G [03:19&lt;06:01, 3.73MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 500M/1.85G [03:19&lt;05:34, 4.04MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 500M/1.85G [03:19&lt;05:13, 4.30MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 501M/1.85G [03:19&lt;05:04, 4.43MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 501M/1.85G [03:19&lt;04:59, 4.51MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 502M/1.85G [03:20&lt;04:48, 4.67MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 502M/1.85G [03:20&lt;05:06, 4.41MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 503M/1.85G [03:20&lt;05:26, 4.13MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 503M/1.85G [03:20&lt;05:54, 3.80MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 504M/1.85G [03:20&lt;05:40, 3.96MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 505M/1.85G [03:20&lt;04:58, 4.51MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 505M/1.85G [03:20&lt;04:58, 4.51MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 506M/1.85G [03:21&lt;04:50, 4.63MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 506M/1.85G [03:21&lt;04:50, 4.63MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 507M/1.85G [03:21&lt;04:54, 4.57MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 508M/1.85G [03:21&lt;05:02, 4.44MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 508M/1.85G [03:21&lt;05:42, 3.92MB/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 509M/1.85G [03:21&lt;06:23, 3.50MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 509M/1.85G [03:21&lt;06:51, 3.26MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 510M/1.85G [03:22&lt;06:53, 3.24MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 510M/1.85G [03:22&lt;07:25, 3.01MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 511M/1.85G [03:22&lt;07:35, 2.94MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 511M/1.85G [03:22&lt;07:17, 3.06MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 512M/1.85G [03:22&lt;06:51, 3.25MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 513M/1.85G [03:22&lt;05:25, 4.11MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 514M/1.85G [03:23&lt;04:42, 4.74MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 514M/1.85G [03:23&lt;04:37, 4.82MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 515M/1.85G [03:23&lt;04:53, 4.56MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 515M/1.85G [03:23&lt;05:13, 4.25MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 516M/1.85G [03:23&lt;05:19, 4.18MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 516M/1.85G [03:23&lt;05:06, 4.36MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 517M/1.85G [03:24&lt;05:25, 4.10MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 518M/1.85G [03:24&lt;05:44, 3.87MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 519M/1.85G [03:24&lt;06:14, 3.56MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 519M/1.85G [03:24&lt;07:29, 2.97MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 520M/1.85G [03:24&lt;07:19, 3.03MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 520M/1.85G [03:25&lt;07:51, 2.82MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 521M/1.85G [03:25&lt;08:18, 2.67MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 521M/1.85G [03:25&lt;07:36, 2.91MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 522M/1.85G [03:25&lt;06:43, 3.30MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 522M/1.85G [03:25&lt;05:59, 3.70MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 523M/1.85G [03:25&lt;05:24, 4.09MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 524M/1.85G [03:26&lt;06:16, 3.53MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 524M/1.85G [03:26&lt;07:08, 3.10MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 525M/1.85G [03:26&lt;07:46, 2.84MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 525M/1.85G [03:26&lt;07:49, 2.82MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 526M/1.85G [03:26&lt;07:14, 3.05MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 526M/1.85G [03:26&lt;06:26, 3.43MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 527M/1.85G [03:27&lt;05:50, 3.77MB/s]</pre> <pre>\r 28%|\u2588\u2588\u258a       | 527M/1.85G [03:27&lt;06:01, 3.66MB/s]</pre> <pre>\r 29%|\u2588\u2588\u258a       | 528M/1.85G [03:27&lt;06:09, 3.58MB/s]</pre> <pre>\r 29%|\u2588\u2588\u258a       | 528M/1.85G [03:27&lt;06:06, 3.61MB/s]</pre> <pre>\r 29%|\u2588\u2588\u258a       | 529M/1.85G [03:27&lt;06:04, 3.62MB/s]</pre> <pre>\r 29%|\u2588\u2588\u258a       | 530M/1.85G [03:27&lt;05:52, 3.75MB/s]</pre> <pre>\r 29%|\u2588\u2588\u258a       | 530M/1.85G [03:27&lt;05:42, 3.86MB/s]</pre> <pre>\r 29%|\u2588\u2588\u258a       | 531M/1.85G [03:28&lt;05:02, 4.37MB/s]</pre> <pre>\r 29%|\u2588\u2588\u258a       | 532M/1.85G [03:28&lt;05:09, 4.26MB/s]</pre> <pre>\r 29%|\u2588\u2588\u258a       | 532M/1.85G [03:28&lt;05:37, 3.90MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 533M/1.85G [03:28&lt;05:55, 3.71MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 533M/1.85G [03:28&lt;06:42, 3.28MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 534M/1.85G [03:28&lt;06:27, 3.40MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 534M/1.85G [03:29&lt;06:40, 3.29MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 535M/1.85G [03:29&lt;06:16, 3.50MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 535M/1.85G [03:29&lt;06:31, 3.36MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 536M/1.85G [03:29&lt;06:43, 3.26MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 536M/1.85G [03:29&lt;06:20, 3.45MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 537M/1.85G [03:29&lt;06:23, 3.43MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 537M/1.85G [03:30&lt;06:58, 3.14MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 538M/1.85G [03:30&lt;07:00, 3.12MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 538M/1.85G [03:30&lt;07:12, 3.03MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 539M/1.85G [03:30&lt;07:39, 2.85MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 539M/1.85G [03:30&lt;07:16, 3.01MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 540M/1.85G [03:30&lt;06:47, 3.22MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 541M/1.85G [03:31&lt;07:03, 3.10MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 541M/1.85G [03:31&lt;08:04, 2.70MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 542M/1.85G [03:31&lt;08:35, 2.54MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 542M/1.85G [03:31&lt;08:29, 2.57MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 543M/1.85G [03:31&lt;08:02, 2.71MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 543M/1.85G [03:32&lt;08:00, 2.72MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 544M/1.85G [03:32&lt;08:31, 2.56MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 544M/1.85G [03:32&lt;09:06, 2.39MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 545M/1.85G [03:32&lt;08:14, 2.64MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 545M/1.85G [03:32&lt;07:01, 3.09MB/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 546M/1.85G [03:33&lt;07:15, 3.00MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 546M/1.85G [03:33&lt;06:54, 3.15MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 547M/1.85G [03:33&lt;06:25, 3.38MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 547M/1.85G [03:33&lt;06:16, 3.46MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 548M/1.85G [03:33&lt;07:05, 3.06MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 548M/1.85G [03:33&lt;07:21, 2.95MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 549M/1.85G [03:33&lt;06:44, 3.22MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 550M/1.85G [03:34&lt;05:27, 3.97MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 551M/1.85G [03:34&lt;05:33, 3.90MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 551M/1.85G [03:34&lt;05:46, 3.76MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 552M/1.85G [03:34&lt;05:28, 3.96MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 553M/1.85G [03:34&lt;04:30, 4.80MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 554M/1.85G [03:34&lt;04:31, 4.77MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 554M/1.85G [03:35&lt;04:44, 4.56MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 555M/1.85G [03:35&lt;05:54, 3.65MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2589       | 555M/1.85G [03:35&lt;05:44, 3.77MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 556M/1.85G [03:35&lt;05:18, 4.06MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 556M/1.85G [03:35&lt;05:22, 4.01MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 557M/1.85G [03:35&lt;05:33, 3.88MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 557M/1.85G [03:35&lt;05:33, 3.87MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 558M/1.85G [03:36&lt;05:36, 3.84MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 559M/1.85G [03:36&lt;04:55, 4.38MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 559M/1.85G [03:36&lt;05:15, 4.09MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 560M/1.85G [03:36&lt;06:12, 3.47MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 560M/1.85G [03:36&lt;06:08, 3.50MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 561M/1.85G [03:36&lt;06:15, 3.43MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 562M/1.85G [03:37&lt;06:49, 3.15MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 562M/1.85G [03:37&lt;06:31, 3.29MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 563M/1.85G [03:37&lt;06:26, 3.34MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 563M/1.85G [03:37&lt;06:43, 3.19MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 564M/1.85G [03:37&lt;06:39, 3.22MB/s]</pre> <pre>\r 30%|\u2588\u2588\u2588       | 564M/1.85G [03:37&lt;06:38, 3.23MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 565M/1.85G [03:38&lt;06:20, 3.38MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 565M/1.85G [03:38&lt;06:01, 3.55MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 566M/1.85G [03:38&lt;04:55, 4.35MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 567M/1.85G [03:38&lt;04:56, 4.33MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 568M/1.85G [03:38&lt;04:32, 4.70MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 568M/1.85G [03:38&lt;04:36, 4.64MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 569M/1.85G [03:38&lt;04:32, 4.70MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 569M/1.85G [03:39&lt;05:31, 3.87MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 570M/1.85G [03:39&lt;07:24, 2.88MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 570M/1.85G [03:39&lt;07:03, 3.02MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 571M/1.85G [03:39&lt;06:29, 3.29MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 571M/1.85G [03:39&lt;05:51, 3.64MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 572M/1.85G [03:40&lt;05:52, 3.63MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 573M/1.85G [03:40&lt;06:14, 3.41MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 573M/1.85G [03:40&lt;06:11, 3.44MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 574M/1.85G [03:40&lt;06:36, 3.23MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 574M/1.85G [03:40&lt;05:54, 3.60MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 575M/1.85G [03:40&lt;04:41, 4.53MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 576M/1.85G [03:40&lt;04:12, 5.05MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 577M/1.85G [03:41&lt;04:10, 5.08MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 577M/1.85G [03:41&lt;04:29, 4.73MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 578M/1.85G [03:41&lt;04:27, 4.76MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588\u258f      | 579M/1.85G [03:41&lt;04:18, 4.92MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588\u258f      | 579M/1.85G [03:41&lt;04:22, 4.84MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588\u258f      | 580M/1.85G [03:41&lt;05:02, 4.20MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588\u258f      | 580M/1.85G [03:41&lt;05:38, 3.75MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588\u258f      | 581M/1.85G [03:42&lt;05:45, 3.68MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588\u258f      | 581M/1.85G [03:42&lt;05:42, 3.71MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588\u258f      | 582M/1.85G [03:42&lt;05:14, 4.03MB/s]</pre> <pre>\r 31%|\u2588\u2588\u2588\u258f      | 583M/1.85G [03:42&lt;04:42, 4.49MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 584M/1.85G [03:42&lt;04:49, 4.38MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 584M/1.85G [03:42&lt;05:31, 3.82MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 585M/1.85G [03:43&lt;05:38, 3.74MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 585M/1.85G [03:43&lt;06:13, 3.39MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 586M/1.85G [03:43&lt;06:24, 3.29MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 586M/1.85G [03:43&lt;06:13, 3.39MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 587M/1.85G [03:43&lt;05:53, 3.58MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 587M/1.85G [03:43&lt;06:32, 3.22MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 588M/1.85G [03:44&lt;06:30, 3.24MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 588M/1.85G [03:44&lt;06:13, 3.38MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 589M/1.85G [03:44&lt;05:34, 3.78MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 590M/1.85G [03:44&lt;05:01, 4.18MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 590M/1.85G [03:44&lt;05:52, 3.57MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 591M/1.85G [03:44&lt;05:42, 3.68MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 591M/1.85G [03:44&lt;05:54, 3.56MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 592M/1.85G [03:45&lt;06:38, 3.16MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 592M/1.85G [03:45&lt;06:27, 3.25MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 593M/1.85G [03:45&lt;06:32, 3.21MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 593M/1.85G [03:45&lt;06:29, 3.22MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 594M/1.85G [03:45&lt;05:50, 3.59MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 595M/1.85G [03:45&lt;05:21, 3.91MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 595M/1.85G [03:46&lt;05:25, 3.86MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 596M/1.85G [03:46&lt;05:07, 4.09MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 596M/1.85G [03:46&lt;05:20, 3.92MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 597M/1.85G [03:46&lt;05:46, 3.62MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 597M/1.85G [03:46&lt;06:13, 3.36MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 598M/1.85G [03:46&lt;06:07, 3.41MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 598M/1.85G [03:46&lt;05:51, 3.57MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 599M/1.85G [03:47&lt;05:44, 3.63MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 599M/1.85G [03:47&lt;05:22, 3.88MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 600M/1.85G [03:47&lt;05:02, 4.13MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 600M/1.85G [03:47&lt;05:28, 3.81MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 601M/1.85G [03:47&lt;05:37, 3.71MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 601M/1.85G [03:47&lt;05:37, 3.70MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 602M/1.85G [03:47&lt;05:27, 3.81MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 602M/1.85G [03:48&lt;05:48, 3.58MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 603M/1.85G [03:48&lt;05:58, 3.48MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 603M/1.85G [03:48&lt;06:15, 3.32MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 604M/1.85G [03:48&lt;05:53, 3.53MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 605M/1.85G [03:48&lt;05:55, 3.51MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 605M/1.85G [03:48&lt;05:46, 3.60MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 606M/1.85G [03:48&lt;05:50, 3.55MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 606M/1.85G [03:49&lt;06:10, 3.36MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 607M/1.85G [03:49&lt;05:44, 3.61MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 607M/1.85G [03:49&lt;05:24, 3.84MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 608M/1.85G [03:49&lt;06:25, 3.22MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 608M/1.85G [03:49&lt;07:30, 2.76MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 609M/1.85G [03:50&lt;07:22, 2.80MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 609M/1.85G [03:50&lt;07:28, 2.77MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 610M/1.85G [03:50&lt;07:38, 2.71MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 610M/1.85G [03:50&lt;06:59, 2.96MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 611M/1.85G [03:50&lt;06:17, 3.29MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 611M/1.85G [03:50&lt;05:41, 3.63MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 612M/1.85G [03:50&lt;05:24, 3.82MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 612M/1.85G [03:51&lt;05:49, 3.55MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 613M/1.85G [03:51&lt;05:33, 3.72MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 613M/1.85G [03:51&lt;05:50, 3.53MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 614M/1.85G [03:51&lt;05:49, 3.54MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 614M/1.85G [03:51&lt;05:42, 3.61MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 615M/1.85G [03:51&lt;05:27, 3.78MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 616M/1.85G [03:51&lt;05:09, 3.99MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 616M/1.85G [03:52&lt;06:14, 3.30MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 617M/1.85G [03:52&lt;07:20, 2.80MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 617M/1.85G [03:52&lt;07:13, 2.84MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 618M/1.85G [03:52&lt;06:31, 3.15MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 618M/1.85G [03:52&lt;06:25, 3.20MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 619M/1.85G [03:52&lt;05:50, 3.52MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 619M/1.85G [03:53&lt;05:46, 3.55MB/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 620M/1.85G [03:53&lt;05:27, 3.76MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 620M/1.85G [03:53&lt;05:38, 3.64MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 621M/1.85G [03:53&lt;05:12, 3.94MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 621M/1.85G [03:53&lt;05:15, 3.90MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 622M/1.85G [03:53&lt;05:21, 3.82MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 622M/1.85G [03:53&lt;05:34, 3.67MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 623M/1.85G [03:54&lt;05:30, 3.72MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 623M/1.85G [03:54&lt;05:18, 3.85MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 624M/1.85G [03:54&lt;05:48, 3.52MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258e      | 624M/1.85G [03:54&lt;06:05, 3.36MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 625M/1.85G [03:54&lt;06:53, 2.96MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 625M/1.85G [03:54&lt;07:10, 2.85MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 626M/1.85G [03:55&lt;06:53, 2.97MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 627M/1.85G [03:55&lt;08:00, 2.55MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 627M/1.85G [03:55&lt;07:38, 2.67MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 628M/1.85G [03:55&lt;07:22, 2.77MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 628M/1.85G [03:55&lt;07:31, 2.71MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 629M/1.85G [03:56&lt;06:50, 2.98MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 629M/1.85G [03:56&lt;06:20, 3.21MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 630M/1.85G [03:56&lt;06:17, 3.23MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 630M/1.85G [03:56&lt;06:37, 3.07MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 631M/1.85G [03:56&lt;06:18, 3.23MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 631M/1.85G [03:56&lt;06:45, 3.01MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 632M/1.85G [03:57&lt;06:57, 2.92MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 632M/1.85G [03:57&lt;06:22, 3.18MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 633M/1.85G [03:57&lt;06:03, 3.35MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 633M/1.85G [03:57&lt;06:12, 3.26MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 634M/1.85G [03:57&lt;07:00, 2.90MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 634M/1.85G [03:57&lt;07:31, 2.70MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 635M/1.85G [03:58&lt;07:27, 2.72MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 635M/1.85G [03:58&lt;07:40, 2.64MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 636M/1.85G [03:58&lt;07:36, 2.66MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 636M/1.85G [03:58&lt;08:29, 2.39MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 637M/1.85G [03:59&lt;08:04, 2.50MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 638M/1.85G [03:59&lt;07:25, 2.72MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 638M/1.85G [03:59&lt;07:59, 2.53MB/s]</pre> <pre>\r 34%|\u2588\u2588\u2588\u258d      | 639M/1.85G [03:59&lt;07:37, 2.65MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 639M/1.85G [03:59&lt;07:26, 2.71MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 640M/1.85G [03:59&lt;06:30, 3.10MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 641M/1.85G [04:00&lt;05:34, 3.62MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 641M/1.85G [04:00&lt;05:27, 3.69MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 642M/1.85G [04:00&lt;05:51, 3.44MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 642M/1.85G [04:00&lt;05:58, 3.38MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 643M/1.85G [04:00&lt;06:07, 3.29MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 643M/1.85G [04:00&lt;05:39, 3.55MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 644M/1.85G [04:01&lt;06:08, 3.28MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 644M/1.85G [04:01&lt;05:41, 3.54MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 645M/1.85G [04:01&lt;05:27, 3.68MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 646M/1.85G [04:01&lt;05:42, 3.51MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 646M/1.85G [04:01&lt;06:09, 3.26MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 647M/1.85G [04:02&lt;06:20, 3.17MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 647M/1.85G [04:02&lt;05:42, 3.51MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 649M/1.85G [04:02&lt;05:09, 3.88MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 649M/1.85G [04:02&lt;04:57, 4.04MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 650M/1.85G [04:02&lt;05:30, 3.63MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 650M/1.85G [04:02&lt;05:18, 3.77MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 651M/1.85G [04:02&lt;05:25, 3.68MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 651M/1.85G [04:03&lt;06:21, 3.14MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 652M/1.85G [04:03&lt;06:31, 3.06MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 652M/1.85G [04:03&lt;06:31, 3.07MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 653M/1.85G [04:03&lt;06:38, 3.00MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 653M/1.85G [04:03&lt;06:04, 3.29MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 654M/1.85G [04:03&lt;05:57, 3.35MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 654M/1.85G [04:04&lt;07:11, 2.77MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 655M/1.85G [04:04&lt;07:58, 2.50MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 655M/1.85G [04:04&lt;08:09, 2.44MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 656M/1.85G [04:04&lt;07:48, 2.55MB/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258c      | 656M/1.85G [04:05&lt;06:52, 2.90MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 657M/1.85G [04:05&lt;05:51, 3.39MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 658M/1.85G [04:05&lt;06:25, 3.10MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 659M/1.85G [04:05&lt;06:11, 3.21MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 659M/1.85G [04:05&lt;06:14, 3.18MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 660M/1.85G [04:06&lt;06:40, 2.98MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 660M/1.85G [04:06&lt;07:05, 2.80MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 661M/1.85G [04:06&lt;07:35, 2.62MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 661M/1.85G [04:06&lt;07:15, 2.73MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 662M/1.85G [04:06&lt;06:46, 2.93MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 662M/1.85G [04:06&lt;06:38, 2.98MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 663M/1.85G [04:07&lt;07:20, 2.70MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 663M/1.85G [04:07&lt;07:54, 2.50MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 664M/1.85G [04:07&lt;07:21, 2.69MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 664M/1.85G [04:07&lt;06:21, 3.11MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 665M/1.85G [04:07&lt;05:42, 3.46MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 666M/1.85G [04:08&lt;04:58, 3.97MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 666M/1.85G [04:08&lt;05:36, 3.52MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 667M/1.85G [04:08&lt;06:55, 2.85MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 667M/1.85G [04:08&lt;07:19, 2.69MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 668M/1.85G [04:08&lt;07:11, 2.74MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 668M/1.85G [04:09&lt;06:57, 2.83MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 669M/1.85G [04:09&lt;07:35, 2.60MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 670M/1.85G [04:09&lt;07:20, 2.68MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 670M/1.85G [04:09&lt;07:07, 2.76MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258c      | 671M/1.85G [04:09&lt;08:21, 2.36MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 671M/1.85G [04:10&lt;07:47, 2.52MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 672M/1.85G [04:10&lt;07:05, 2.77MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 672M/1.85G [04:10&lt;06:41, 2.93MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 673M/1.85G [04:10&lt;08:19, 2.36MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 673M/1.85G [04:11&lt;08:21, 2.35MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 674M/1.85G [04:11&lt;07:45, 2.53MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 674M/1.85G [04:11&lt;07:45, 2.53MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 675M/1.85G [04:11&lt;07:39, 2.56MB/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 675M/1.85G [04:11&lt;07:29, 2.62MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 676M/1.85G [04:11&lt;07:27, 2.63MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 676M/1.85G [04:12&lt;07:00, 2.80MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 677M/1.85G [04:12&lt;06:20, 3.09MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 677M/1.85G [04:12&lt;06:10, 3.16MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 678M/1.85G [04:12&lt;07:47, 2.51MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 678M/1.85G [04:12&lt;07:31, 2.59MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 679M/1.85G [04:13&lt;07:55, 2.46MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 679M/1.85G [04:13&lt;08:04, 2.42MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 680M/1.85G [04:13&lt;08:40, 2.25MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 681M/1.85G [04:13&lt;08:26, 2.31MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 681M/1.85G [04:14&lt;07:51, 2.48MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 682M/1.85G [04:14&lt;07:08, 2.73MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 682M/1.85G [04:14&lt;08:20, 2.34MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 683M/1.85G [04:14&lt;08:08, 2.39MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 683M/1.85G [04:14&lt;07:27, 2.61MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 684M/1.85G [04:14&lt;06:50, 2.84MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 684M/1.85G [04:15&lt;07:08, 2.72MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 685M/1.85G [04:15&lt;07:22, 2.64MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 685M/1.85G [04:15&lt;07:40, 2.53MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 686M/1.85G [04:15&lt;07:54, 2.46MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 686M/1.85G [04:16&lt;08:32, 2.27MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 687M/1.85G [04:16&lt;07:55, 2.45MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 687M/1.85G [04:16&lt;07:21, 2.64MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 688M/1.85G [04:16&lt;06:53, 2.81MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 688M/1.85G [04:16&lt;06:24, 3.03MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 689M/1.85G [04:16&lt;06:02, 3.21MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 689M/1.85G [04:17&lt;06:39, 2.91MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 690M/1.85G [04:17&lt;08:40, 2.23MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 690M/1.85G [04:17&lt;08:57, 2.16MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 691M/1.85G [04:17&lt;08:11, 2.36MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 692M/1.85G [04:18&lt;08:08, 2.37MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 692M/1.85G [04:18&lt;08:44, 2.21MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 693M/1.85G [04:18&lt;08:07, 2.38MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 693M/1.85G [04:18&lt;08:15, 2.34MB/s]</pre> <pre>\r 37%|\u2588\u2588\u2588\u258b      | 694M/1.85G [04:19&lt;08:03, 2.40MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 694M/1.85G [04:19&lt;08:29, 2.27MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 695M/1.85G [04:19&lt;07:52, 2.44MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 695M/1.85G [04:19&lt;07:41, 2.50MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 696M/1.85G [04:19&lt;07:12, 2.67MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 696M/1.85G [04:20&lt;07:31, 2.56MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 697M/1.85G [04:20&lt;07:10, 2.68MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 697M/1.85G [04:20&lt;07:04, 2.72MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 698M/1.85G [04:20&lt;07:49, 2.46MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 698M/1.85G [04:20&lt;08:05, 2.37MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 699M/1.85G [04:21&lt;07:15, 2.65MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 699M/1.85G [04:21&lt;07:24, 2.59MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 700M/1.85G [04:21&lt;06:53, 2.79MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 700M/1.85G [04:21&lt;06:38, 2.89MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 701M/1.85G [04:21&lt;07:59, 2.40MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 701M/1.85G [04:22&lt;07:38, 2.51MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 702M/1.85G [04:22&lt;07:23, 2.59MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 703M/1.85G [04:22&lt;06:53, 2.77MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 703M/1.85G [04:22&lt;06:16, 3.05MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 704M/1.85G [04:22&lt;06:07, 3.12MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 704M/1.85G [04:22&lt;05:33, 3.44MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 705M/1.85G [04:23&lt;04:21, 4.39MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 706M/1.85G [04:23&lt;04:18, 4.42MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 707M/1.85G [04:23&lt;04:41, 4.07MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 707M/1.85G [04:23&lt;04:52, 3.91MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 708M/1.85G [04:23&lt;05:28, 3.48MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 708M/1.85G [04:23&lt;06:11, 3.07MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 709M/1.85G [04:24&lt;05:41, 3.34MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 709M/1.85G [04:24&lt;05:07, 3.71MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 710M/1.85G [04:24&lt;04:42, 4.03MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 711M/1.85G [04:24&lt;04:11, 4.52MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 711M/1.85G [04:24&lt;04:21, 4.36MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 712M/1.85G [04:24&lt;04:34, 4.14MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 713M/1.85G [04:24&lt;04:21, 4.36MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u258a      | 714M/1.85G [04:25&lt;04:15, 4.45MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u258a      | 714M/1.85G [04:25&lt;04:29, 4.22MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u258a      | 715M/1.85G [04:25&lt;04:45, 3.98MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u258a      | 715M/1.85G [04:25&lt;04:36, 4.11MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u258a      | 716M/1.85G [04:25&lt;04:05, 4.61MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u258a      | 717M/1.85G [04:25&lt;03:45, 5.03MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 718M/1.85G [04:26&lt;03:52, 4.88MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 718M/1.85G [04:26&lt;04:39, 4.06MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 719M/1.85G [04:26&lt;04:55, 3.83MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 719M/1.85G [04:26&lt;05:02, 3.74MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 720M/1.85G [04:26&lt;04:45, 3.96MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 720M/1.85G [04:26&lt;04:34, 4.13MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 721M/1.85G [04:26&lt;04:52, 3.87MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 721M/1.85G [04:27&lt;05:04, 3.70MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 722M/1.85G [04:27&lt;05:27, 3.45MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 722M/1.85G [04:27&lt;04:59, 3.76MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 723M/1.85G [04:27&lt;04:55, 3.82MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 724M/1.85G [04:27&lt;04:46, 3.93MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 724M/1.85G [04:27&lt;04:54, 3.83MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 725M/1.85G [04:27&lt;05:18, 3.54MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 725M/1.85G [04:28&lt;05:16, 3.56MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 726M/1.85G [04:28&lt;05:03, 3.70MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 726M/1.85G [04:28&lt;04:53, 3.83MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 727M/1.85G [04:28&lt;04:52, 3.84MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 728M/1.85G [04:28&lt;04:24, 4.25MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 728M/1.85G [04:28&lt;04:47, 3.91MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 729M/1.85G [04:28&lt;04:51, 3.85MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 729M/1.85G [04:29&lt;05:11, 3.60MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 730M/1.85G [04:29&lt;05:33, 3.37MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 730M/1.85G [04:29&lt;05:28, 3.41MB/s]</pre> <pre>\r 39%|\u2588\u2588\u2588\u2589      | 731M/1.85G [04:29&lt;05:23, 3.47MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 731M/1.85G [04:29&lt;05:14, 3.56MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 732M/1.85G [04:29&lt;04:24, 4.22MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 733M/1.85G [04:30&lt;03:49, 4.88MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 735M/1.85G [04:30&lt;03:14, 5.75MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 736M/1.85G [04:30&lt;03:16, 5.69MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 737M/1.85G [04:30&lt;03:43, 5.00MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 738M/1.85G [04:30&lt;03:30, 5.28MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 739M/1.85G [04:31&lt;03:26, 5.37MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 740M/1.85G [04:31&lt;04:07, 4.49MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2589      | 740M/1.85G [04:31&lt;04:06, 4.51MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 741M/1.85G [04:31&lt;03:45, 4.92MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 742M/1.85G [04:31&lt;03:27, 5.33MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 743M/1.85G [04:32&lt;03:42, 4.98MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 744M/1.85G [04:32&lt;03:57, 4.65MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 744M/1.85G [04:32&lt;04:03, 4.55MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 745M/1.85G [04:32&lt;03:56, 4.67MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 746M/1.85G [04:32&lt;04:02, 4.55MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 746M/1.85G [04:32&lt;03:58, 4.63MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 747M/1.85G [04:32&lt;03:40, 5.01MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 748M/1.85G [04:33&lt;04:08, 4.44MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 748M/1.85G [04:33&lt;04:51, 3.78MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 749M/1.85G [04:33&lt;05:06, 3.60MB/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 749M/1.85G [04:33&lt;05:24, 3.39MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 750M/1.85G [04:33&lt;05:35, 3.28MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 750M/1.85G [04:33&lt;05:06, 3.59MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 751M/1.85G [04:34&lt;05:11, 3.53MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 751M/1.85G [04:34&lt;05:05, 3.59MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 752M/1.85G [04:34&lt;05:20, 3.43MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 752M/1.85G [04:34&lt;04:59, 3.67MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 753M/1.85G [04:34&lt;04:51, 3.77MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 753M/1.85G [04:34&lt;04:45, 3.85MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 754M/1.85G [04:34&lt;04:30, 4.05MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 754M/1.85G [04:34&lt;04:32, 4.03MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 755M/1.85G [04:35&lt;03:52, 4.71MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 757M/1.85G [04:35&lt;03:47, 4.81MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 757M/1.85G [04:35&lt;03:57, 4.60MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 758M/1.85G [04:35&lt;04:06, 4.43MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 758M/1.85G [04:35&lt;04:24, 4.13MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 759M/1.85G [04:35&lt;04:58, 3.66MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 759M/1.85G [04:36&lt;05:03, 3.60MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 760M/1.85G [04:36&lt;05:06, 3.56MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 760M/1.85G [04:36&lt;05:11, 3.50MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 761M/1.85G [04:36&lt;05:13, 3.48MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 761M/1.85G [04:36&lt;04:45, 3.81MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 762M/1.85G [04:36&lt;04:46, 3.81MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 762M/1.85G [04:36&lt;05:05, 3.56MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 763M/1.85G [04:37&lt;04:47, 3.79MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588      | 763M/1.85G [04:37&lt;04:26, 4.08MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588\u258f     | 764M/1.85G [04:37&lt;03:54, 4.63MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588\u258f     | 765M/1.85G [04:37&lt;03:33, 5.07MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588\u258f     | 767M/1.85G [04:37&lt;03:28, 5.21MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588\u258f     | 768M/1.85G [04:37&lt;03:28, 5.19MB/s]</pre> <pre>\r 41%|\u2588\u2588\u2588\u2588\u258f     | 768M/1.85G [04:38&lt;03:35, 5.02MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 769M/1.85G [04:38&lt;03:42, 4.86MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 769M/1.85G [04:38&lt;03:43, 4.85MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 770M/1.85G [04:38&lt;03:57, 4.55MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 770M/1.85G [04:38&lt;04:37, 3.89MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 771M/1.85G [04:38&lt;04:29, 4.00MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 771M/1.85G [04:38&lt;04:42, 3.82MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 772M/1.85G [04:39&lt;04:28, 4.02MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 772M/1.85G [04:39&lt;04:24, 4.08MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 773M/1.85G [04:39&lt;04:08, 4.33MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 773M/1.85G [04:39&lt;04:04, 4.40MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 774M/1.85G [04:39&lt;04:13, 4.26MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 774M/1.85G [04:39&lt;04:21, 4.11MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 775M/1.85G [04:39&lt;04:22, 4.10MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 775M/1.85G [04:39&lt;04:37, 3.87MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 776M/1.85G [04:40&lt;04:23, 4.07MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 776M/1.85G [04:40&lt;04:17, 4.18MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 777M/1.85G [04:40&lt;04:46, 3.74MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 778M/1.85G [04:40&lt;04:41, 3.81MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 778M/1.85G [04:40&lt;04:41, 3.81MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 779M/1.85G [04:40&lt;04:23, 4.06MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 779M/1.85G [04:40&lt;04:06, 4.34MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 780M/1.85G [04:40&lt;04:07, 4.33MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 780M/1.85G [04:41&lt;03:57, 4.51MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 781M/1.85G [04:41&lt;03:49, 4.66MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 782M/1.85G [04:41&lt;03:32, 5.03MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 783M/1.85G [04:41&lt;03:32, 5.02MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 783M/1.85G [04:41&lt;03:50, 4.63MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 784M/1.85G [04:41&lt;04:30, 3.95MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 784M/1.85G [04:41&lt;04:21, 4.08MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 785M/1.85G [04:42&lt;04:14, 4.19MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 785M/1.85G [04:42&lt;04:06, 4.33MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 786M/1.85G [04:42&lt;03:35, 4.95MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 787M/1.85G [04:42&lt;03:16, 5.42MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 789M/1.85G [04:42&lt;03:02, 5.83MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 790M/1.85G [04:42&lt;03:07, 5.67MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 791M/1.85G [04:43&lt;03:22, 5.24MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 792M/1.85G [04:43&lt;03:07, 5.64MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 793M/1.85G [04:43&lt;02:58, 5.94MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 794M/1.85G [04:43&lt;02:50, 6.20MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 795M/1.85G [04:43&lt;03:15, 5.41MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 796M/1.85G [04:44&lt;03:53, 4.53MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 796M/1.85G [04:44&lt;03:56, 4.46MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 797M/1.85G [04:44&lt;05:00, 3.51MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 797M/1.85G [04:44&lt;06:38, 2.64MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 798M/1.85G [04:45&lt;06:30, 2.70MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 798M/1.85G [04:45&lt;06:01, 2.91MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 799M/1.85G [04:45&lt;05:19, 3.29MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 800M/1.85G [04:45&lt;05:03, 3.47MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 800M/1.85G [04:45&lt;05:00, 3.50MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 801M/1.85G [04:45&lt;04:45, 3.68MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 801M/1.85G [04:45&lt;04:20, 4.03MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 802M/1.85G [04:46&lt;03:35, 4.87MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 803M/1.85G [04:46&lt;03:48, 4.59MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 803M/1.85G [04:46&lt;03:54, 4.46MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 804M/1.85G [04:46&lt;03:57, 4.41MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 804M/1.85G [04:46&lt;04:03, 4.31MB/s]</pre> <pre>\r 43%|\u2588\u2588\u2588\u2588\u258e     | 805M/1.85G [04:46&lt;04:18, 4.04MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 805M/1.85G [04:46&lt;04:15, 4.10MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 806M/1.85G [04:46&lt;04:31, 3.84MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 806M/1.85G [04:47&lt;05:08, 3.39MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 807M/1.85G [04:47&lt;05:46, 3.01MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 807M/1.85G [04:47&lt;06:07, 2.84MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 808M/1.85G [04:47&lt;06:36, 2.63MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 808M/1.85G [04:48&lt;06:51, 2.53MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 809M/1.85G [04:48&lt;06:09, 2.82MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 810M/1.85G [04:48&lt;05:22, 3.23MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 810M/1.85G [04:48&lt;04:46, 3.64MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 811M/1.85G [04:48&lt;04:41, 3.70MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 811M/1.85G [04:48&lt;04:49, 3.60MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 812M/1.85G [04:48&lt;04:26, 3.90MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 812M/1.85G [04:48&lt;04:18, 4.02MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 813M/1.85G [04:49&lt;04:05, 4.23MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 814M/1.85G [04:49&lt;03:34, 4.84MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 815M/1.85G [04:49&lt;03:38, 4.74MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 815M/1.85G [04:49&lt;03:35, 4.81MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 816M/1.85G [04:49&lt;03:39, 4.72MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 816M/1.85G [04:49&lt;03:41, 4.67MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 817M/1.85G [04:49&lt;03:33, 4.84MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 818M/1.85G [04:50&lt;03:57, 4.35MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 818M/1.85G [04:50&lt;04:12, 4.10MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 819M/1.85G [04:50&lt;04:18, 4.00MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 819M/1.85G [04:50&lt;04:23, 3.92MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 820M/1.85G [04:50&lt;04:14, 4.05MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 821M/1.85G [04:50&lt;04:36, 3.73MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 821M/1.85G [04:50&lt;04:39, 3.68MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 822M/1.85G [04:51&lt;03:51, 4.45MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 823M/1.85G [04:51&lt;03:27, 4.95MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258d     | 824M/1.85G [04:51&lt;03:13, 5.29MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258d     | 825M/1.85G [04:51&lt;02:53, 5.91MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258d     | 826M/1.85G [04:51&lt;02:50, 5.99MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258d     | 827M/1.85G [04:51&lt;02:43, 6.25MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258d     | 828M/1.85G [04:52&lt;02:28, 6.89MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258d     | 829M/1.85G [04:52&lt;02:24, 7.09MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258d     | 830M/1.85G [04:52&lt;02:36, 6.50MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258d     | 832M/1.85G [04:52&lt;02:48, 6.05MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258d     | 833M/1.85G [04:52&lt;02:51, 5.95MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 834M/1.85G [04:52&lt;02:46, 6.12MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 835M/1.85G [04:53&lt;03:17, 5.15MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 836M/1.85G [04:53&lt;03:11, 5.29MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 837M/1.85G [04:53&lt;02:55, 5.78MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 838M/1.85G [04:53&lt;02:46, 6.10MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 839M/1.85G [04:53&lt;02:29, 6.75MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 840M/1.85G [04:53&lt;02:28, 6.81MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 841M/1.85G [04:54&lt;02:26, 6.91MB/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 842M/1.85G [04:54&lt;02:52, 5.86MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 843M/1.85G [04:54&lt;03:10, 5.29MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 844M/1.85G [04:54&lt;03:08, 5.36MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 845M/1.85G [04:55&lt;03:13, 5.19MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 846M/1.85G [04:55&lt;03:16, 5.11MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 847M/1.85G [04:55&lt;03:42, 4.51MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 848M/1.85G [04:55&lt;03:54, 4.28MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 848M/1.85G [04:55&lt;03:55, 4.26MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 849M/1.85G [04:55&lt;03:50, 4.35MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 849M/1.85G [04:56&lt;03:55, 4.25MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 850M/1.85G [04:56&lt;04:11, 3.98MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 850M/1.85G [04:56&lt;04:42, 3.54MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 851M/1.85G [04:56&lt;04:55, 3.38MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 851M/1.85G [04:56&lt;04:59, 3.34MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 852M/1.85G [04:56&lt;05:13, 3.19MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 852M/1.85G [04:57&lt;05:09, 3.23MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 853M/1.85G [04:57&lt;05:08, 3.24MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 854M/1.85G [04:57&lt;04:42, 3.53MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 854M/1.85G [04:57&lt;04:37, 3.59MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 855M/1.85G [04:57&lt;04:27, 3.72MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 855M/1.85G [04:57&lt;04:04, 4.07MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258c     | 856M/1.85G [04:57&lt;04:10, 3.97MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258b     | 856M/1.85G [04:57&lt;03:56, 4.21MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258b     | 857M/1.85G [04:58&lt;04:02, 4.09MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258b     | 857M/1.85G [04:58&lt;04:06, 4.04MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258b     | 858M/1.85G [04:58&lt;04:30, 3.67MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258b     | 858M/1.85G [04:58&lt;04:20, 3.82MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258b     | 859M/1.85G [04:58&lt;03:34, 4.63MB/s]</pre> <pre>\r 46%|\u2588\u2588\u2588\u2588\u258b     | 860M/1.85G [04:58&lt;03:02, 5.43MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 861M/1.85G [04:59&lt;03:18, 4.99MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 862M/1.85G [04:59&lt;03:38, 4.52MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 862M/1.85G [04:59&lt;03:33, 4.62MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 864M/1.85G [04:59&lt;03:08, 5.23MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 865M/1.85G [04:59&lt;02:40, 6.13MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 866M/1.85G [04:59&lt;02:39, 6.19MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 867M/1.85G [05:00&lt;03:03, 5.36MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 868M/1.85G [05:00&lt;03:23, 4.84MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 869M/1.85G [05:00&lt;03:05, 5.28MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 870M/1.85G [05:00&lt;02:48, 5.83MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 871M/1.85G [05:00&lt;03:13, 5.05MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 872M/1.85G [05:01&lt;03:17, 4.97MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 873M/1.85G [05:01&lt;03:24, 4.77MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 873M/1.85G [05:01&lt;03:27, 4.71MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 874M/1.85G [05:01&lt;03:37, 4.48MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 875M/1.85G [05:01&lt;03:44, 4.35MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 875M/1.85G [05:01&lt;03:35, 4.53MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 876M/1.85G [05:01&lt;03:46, 4.32MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 876M/1.85G [05:02&lt;03:35, 4.52MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 877M/1.85G [05:02&lt;03:17, 4.92MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 878M/1.85G [05:02&lt;03:26, 4.71MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 878M/1.85G [05:02&lt;03:55, 4.13MB/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 879M/1.85G [05:02&lt;04:02, 4.01MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 879M/1.85G [05:02&lt;04:14, 3.81MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 880M/1.85G [05:02&lt;04:05, 3.95MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 880M/1.85G [05:03&lt;04:07, 3.93MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 881M/1.85G [05:03&lt;04:13, 3.83MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 881M/1.85G [05:03&lt;04:51, 3.32MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 882M/1.85G [05:03&lt;04:46, 3.39MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 882M/1.85G [05:03&lt;04:28, 3.61MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 883M/1.85G [05:03&lt;04:10, 3.87MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 883M/1.85G [05:03&lt;03:55, 4.12MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 884M/1.85G [05:04&lt;03:46, 4.28MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 885M/1.85G [05:04&lt;03:26, 4.67MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 886M/1.85G [05:04&lt;02:58, 5.39MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 887M/1.85G [05:04&lt;02:45, 5.82MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 888M/1.85G [05:04&lt;03:24, 4.70MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 889M/1.85G [05:04&lt;03:24, 4.72MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 889M/1.85G [05:05&lt;03:26, 4.66MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 890M/1.85G [05:05&lt;03:27, 4.62MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 890M/1.85G [05:05&lt;03:50, 4.17MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 891M/1.85G [05:05&lt;03:59, 4.01MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 891M/1.85G [05:05&lt;03:46, 4.24MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 892M/1.85G [05:05&lt;03:50, 4.16MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 892M/1.85G [05:05&lt;03:45, 4.25MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 893M/1.85G [05:05&lt;03:39, 4.36MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 894M/1.85G [05:06&lt;03:05, 5.15MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 895M/1.85G [05:06&lt;02:44, 5.82MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 896M/1.85G [05:06&lt;02:30, 6.34MB/s]</pre> <pre>\r 48%|\u2588\u2588\u2588\u2588\u258a     | 897M/1.85G [05:06&lt;03:15, 4.88MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u258a     | 898M/1.85G [05:07&lt;03:40, 4.32MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u258a     | 899M/1.85G [05:07&lt;03:26, 4.62MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u258a     | 900M/1.85G [05:07&lt;03:28, 4.55MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u258a     | 900M/1.85G [05:07&lt;03:30, 4.52MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u258a     | 901M/1.85G [05:07&lt;03:41, 4.30MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u258a     | 901M/1.85G [05:07&lt;03:45, 4.22MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u258a     | 902M/1.85G [05:07&lt;03:14, 4.87MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 903M/1.85G [05:08&lt;02:44, 5.76MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 904M/1.85G [05:08&lt;02:35, 6.08MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 905M/1.85G [05:08&lt;02:35, 6.08MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 906M/1.85G [05:08&lt;02:29, 6.33MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 908M/1.85G [05:08&lt;02:23, 6.55MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 909M/1.85G [05:08&lt;02:39, 5.91MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 910M/1.85G [05:09&lt;02:34, 6.11MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 911M/1.85G [05:09&lt;02:19, 6.74MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 912M/1.85G [05:09&lt;02:09, 7.23MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 913M/1.85G [05:09&lt;02:11, 7.13MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 914M/1.85G [05:09&lt;02:18, 6.78MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 915M/1.85G [05:09&lt;02:21, 6.62MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 916M/1.85G [05:09&lt;02:25, 6.45MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 917M/1.85G [05:10&lt;03:02, 5.11MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 918M/1.85G [05:10&lt;03:13, 4.82MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 919M/1.85G [05:10&lt;03:33, 4.36MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 919M/1.85G [05:10&lt;03:53, 3.99MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 920M/1.85G [05:10&lt;03:44, 4.15MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 921M/1.85G [05:11&lt;03:09, 4.90MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 922M/1.85G [05:11&lt;02:50, 5.46MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 923M/1.85G [05:11&lt;02:30, 6.18MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 924M/1.85G [05:11&lt;02:11, 7.03MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2589     | 925M/1.85G [05:11&lt;02:00, 7.71MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 926M/1.85G [05:11&lt;01:54, 8.07MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 927M/1.85G [05:11&lt;02:02, 7.53MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 928M/1.85G [05:12&lt;02:38, 5.82MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 929M/1.85G [05:12&lt;02:43, 5.63MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 930M/1.85G [05:12&lt;03:00, 5.09MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 931M/1.85G [05:12&lt;02:55, 5.23MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 932M/1.85G [05:12&lt;02:49, 5.43MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 933M/1.85G [05:13&lt;02:36, 5.88MB/s]</pre> <pre>\r 50%|\u2588\u2588\u2588\u2588\u2588     | 934M/1.85G [05:13&lt;02:46, 5.52MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 935M/1.85G [05:13&lt;03:02, 5.02MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 936M/1.85G [05:13&lt;02:50, 5.38MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 937M/1.85G [05:13&lt;02:48, 5.42MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 938M/1.85G [05:14&lt;03:06, 4.89MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 939M/1.85G [05:14&lt;03:08, 4.83MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 940M/1.85G [05:14&lt;03:06, 4.89MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 940M/1.85G [05:14&lt;03:28, 4.38MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 941M/1.85G [05:14&lt;03:49, 3.97MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 941M/1.85G [05:14&lt;03:45, 4.03MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 942M/1.85G [05:15&lt;03:53, 3.89MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 942M/1.85G [05:15&lt;03:38, 4.16MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 943M/1.85G [05:15&lt;03:27, 4.37MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 943M/1.85G [05:15&lt;03:26, 4.41MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 944M/1.85G [05:15&lt;02:57, 5.12MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 945M/1.85G [05:15&lt;02:28, 6.12MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 946M/1.85G [05:15&lt;02:07, 7.08MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 948M/1.85G [05:15&lt;01:49, 8.26MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588\u258f    | 949M/1.85G [05:16&lt;01:44, 8.64MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588\u258f    | 950M/1.85G [05:16&lt;01:46, 8.47MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588\u258f    | 951M/1.85G [05:16&lt;01:43, 8.68MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588\u258f    | 952M/1.85G [05:16&lt;01:44, 8.62MB/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588\u258f    | 953M/1.85G [05:16&lt;02:01, 7.37MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 954M/1.85G [05:16&lt;02:20, 6.40MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 955M/1.85G [05:16&lt;02:25, 6.15MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 956M/1.85G [05:17&lt;02:24, 6.21MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 957M/1.85G [05:17&lt;02:20, 6.34MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 958M/1.85G [05:17&lt;02:16, 6.54MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 959M/1.85G [05:17&lt;02:43, 5.46MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 960M/1.85G [05:17&lt;02:40, 5.54MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 962M/1.85G [05:18&lt;02:36, 5.68MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 963M/1.85G [05:18&lt;02:41, 5.51MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 964M/1.85G [05:18&lt;02:34, 5.74MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 965M/1.85G [05:18&lt;02:55, 5.04MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 966M/1.85G [05:19&lt;03:46, 3.92MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 966M/1.85G [05:19&lt;03:42, 3.98MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 967M/1.85G [05:19&lt;03:31, 4.17MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 968M/1.85G [05:19&lt;03:06, 4.73MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 969M/1.85G [05:19&lt;02:48, 5.22MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 970M/1.85G [05:19&lt;02:42, 5.43MB/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 971M/1.85G [05:19&lt;02:34, 5.71MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 972M/1.85G [05:20&lt;02:33, 5.73MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 973M/1.85G [05:20&lt;02:38, 5.53MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 974M/1.85G [05:20&lt;02:52, 5.08MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 975M/1.85G [05:20&lt;02:58, 4.91MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 976M/1.85G [05:20&lt;02:53, 5.03MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 977M/1.85G [05:21&lt;03:10, 4.60MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 977M/1.85G [05:21&lt;03:21, 4.34MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 978M/1.85G [05:21&lt;03:13, 4.52MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 979M/1.85G [05:21&lt;03:26, 4.22MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 979M/1.85G [05:21&lt;03:34, 4.06MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 980M/1.85G [05:22&lt;03:32, 4.09MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 980M/1.85G [05:22&lt;03:30, 4.13MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 981M/1.85G [05:22&lt;03:47, 3.82MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 981M/1.85G [05:22&lt;03:46, 3.83MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 982M/1.85G [05:22&lt;03:51, 3.75MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 983M/1.85G [05:22&lt;03:36, 4.01MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 983M/1.85G [05:22&lt;03:23, 4.27MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 984M/1.85G [05:22&lt;02:57, 4.87MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 985M/1.85G [05:23&lt;03:01, 4.78MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 986M/1.85G [05:23&lt;02:55, 4.94MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 986M/1.85G [05:23&lt;03:00, 4.79MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 987M/1.85G [05:23&lt;02:45, 5.21MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 988M/1.85G [05:23&lt;02:47, 5.16MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 988M/1.85G [05:23&lt;02:53, 4.97MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 989M/1.85G [05:23&lt;03:02, 4.73MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 989M/1.85G [05:24&lt;03:19, 4.33MB/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 990M/1.85G [05:24&lt;03:22, 4.25MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 991M/1.85G [05:24&lt;02:56, 4.87MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 992M/1.85G [05:24&lt;02:39, 5.38MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 993M/1.85G [05:24&lt;02:41, 5.30MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 994M/1.85G [05:24&lt;02:51, 5.01MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 995M/1.85G [05:25&lt;02:42, 5.27MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 996M/1.85G [05:25&lt;02:32, 5.60MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 997M/1.85G [05:25&lt;02:30, 5.69MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 998M/1.85G [05:25&lt;02:50, 5.00MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 999M/1.85G [05:25&lt;03:01, 4.71MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 999M/1.85G [05:26&lt;03:02, 4.67MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.00G/1.85G [05:26&lt;02:43, 5.20MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.00G/1.85G [05:26&lt;02:35, 5.47MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.00G/1.85G [05:26&lt;02:28, 5.71MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.00G/1.85G [05:26&lt;02:22, 5.94MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.00G/1.85G [05:26&lt;02:09, 6.51MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:27&lt;02:17, 6.17MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:27&lt;02:33, 5.50MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:27&lt;03:05, 4.55MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:27&lt;03:07, 4.49MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:27&lt;03:10, 4.42MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:27&lt;03:03, 4.58MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:28&lt;03:11, 4.40MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:28&lt;03:16, 4.27MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:28&lt;02:53, 4.85MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:28&lt;02:39, 5.25MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:28&lt;02:50, 4.92MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:28&lt;02:51, 4.88MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.01G/1.85G [05:28&lt;02:51, 4.87MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.02G/1.85G [05:29&lt;02:38, 5.28MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.02G/1.85G [05:29&lt;02:40, 5.20MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.02G/1.85G [05:29&lt;02:48, 4.94MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.02G/1.85G [05:29&lt;02:49, 4.93MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.02G/1.85G [05:29&lt;03:00, 4.63MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 1.02G/1.85G [05:29&lt;02:57, 4.70MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.02G/1.85G [05:29&lt;02:58, 4.66MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.02G/1.85G [05:30&lt;03:11, 4.34MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.02G/1.85G [05:30&lt;03:10, 4.35MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.02G/1.85G [05:30&lt;02:56, 4.72MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.02G/1.85G [05:30&lt;02:51, 4.84MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.02G/1.85G [05:30&lt;03:01, 4.57MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.02G/1.85G [05:30&lt;02:56, 4.70MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.02G/1.85G [05:30&lt;02:39, 5.19MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.02G/1.85G [05:31&lt;02:38, 5.22MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:31&lt;02:23, 5.75MB/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:31&lt;02:14, 6.13MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:31&lt;02:12, 6.19MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:31&lt;02:15, 6.08MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:31&lt;02:07, 6.44MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:32&lt;02:13, 6.16MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:32&lt;02:18, 5.90MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:32&lt;02:19, 5.86MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:32&lt;02:48, 4.86MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.03G/1.85G [05:32&lt;03:13, 4.22MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.04G/1.85G [05:33&lt;03:07, 4.36MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.04G/1.85G [05:33&lt;02:52, 4.73MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.04G/1.85G [05:33&lt;02:39, 5.11MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.04G/1.85G [05:33&lt;02:52, 4.70MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.04G/1.85G [05:33&lt;03:06, 4.35MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.04G/1.85G [05:33&lt;03:08, 4.31MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258c    | 1.04G/1.85G [05:34&lt;02:54, 4.64MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.04G/1.85G [05:34&lt;02:44, 4.93MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.04G/1.85G [05:34&lt;02:35, 5.21MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.04G/1.85G [05:34&lt;02:35, 5.19MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.04G/1.85G [05:34&lt;02:28, 5.43MB/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.04G/1.85G [05:34&lt;02:21, 5.69MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:35&lt;02:34, 5.22MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:35&lt;02:44, 4.89MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:35&lt;02:44, 4.87MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:35&lt;02:53, 4.64MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:35&lt;03:11, 4.18MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:35&lt;03:13, 4.13MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:36&lt;02:57, 4.51MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:36&lt;02:51, 4.67MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:36&lt;03:10, 4.20MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:36&lt;03:07, 4.26MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:36&lt;02:51, 4.66MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.05G/1.85G [05:36&lt;02:28, 5.35MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.06G/1.85G [05:37&lt;02:06, 6.28MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.06G/1.85G [05:37&lt;01:56, 6.84MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.06G/1.85G [05:37&lt;01:54, 6.94MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.06G/1.85G [05:37&lt;01:47, 7.37MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.06G/1.85G [05:37&lt;01:38, 8.01MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.06G/1.85G [05:37&lt;01:27, 9.06MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.06G/1.85G [05:37&lt;01:25, 9.22MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.06G/1.85G [05:37&lt;01:24, 9.35MB/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 1.06G/1.85G [05:38&lt;01:32, 8.52MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:38&lt;01:33, 8.44MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:38&lt;01:29, 8.81MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:38&lt;01:30, 8.63MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:38&lt;01:47, 7.28MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:38&lt;01:59, 6.55MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:39&lt;02:33, 5.09MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:39&lt;02:28, 5.24MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:39&lt;02:13, 5.83MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:39&lt;02:07, 6.10MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.07G/1.85G [05:39&lt;02:21, 5.49MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:40&lt;02:31, 5.12MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:40&lt;02:23, 5.39MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:40&lt;02:39, 4.84MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:40&lt;02:47, 4.60MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:40&lt;03:09, 4.07MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:40&lt;03:07, 4.11MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:41&lt;03:01, 4.26MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:41&lt;02:39, 4.83MB/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:41&lt;02:23, 5.35MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:41&lt;02:08, 5.97MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.08G/1.85G [05:41&lt;02:07, 6.01MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.09G/1.85G [05:42&lt;02:37, 4.86MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.09G/1.85G [05:42&lt;02:48, 4.53MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u258a    | 1.09G/1.85G [05:42&lt;02:33, 4.98MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.09G/1.85G [05:42&lt;02:30, 5.08MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.09G/1.85G [05:42&lt;02:37, 4.83MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.09G/1.85G [05:43&lt;02:40, 4.73MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.09G/1.85G [05:43&lt;02:26, 5.20MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.09G/1.85G [05:43&lt;02:15, 5.61MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.09G/1.85G [05:43&lt;02:14, 5.63MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.09G/1.85G [05:43&lt;02:20, 5.40MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:43&lt;02:26, 5.15MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:44&lt;02:17, 5.49MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:44&lt;02:01, 6.19MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:44&lt;01:49, 6.85MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:44&lt;01:50, 6.80MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:44&lt;02:07, 5.90MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:44&lt;02:12, 5.65MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:45&lt;02:03, 6.08MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:45&lt;01:49, 6.82MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.10G/1.85G [05:45&lt;01:43, 7.22MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.11G/1.85G [05:45&lt;02:10, 5.69MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.11G/1.85G [05:45&lt;02:25, 5.11MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.11G/1.85G [05:46&lt;02:30, 4.93MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.11G/1.85G [05:46&lt;02:21, 5.23MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2589    | 1.11G/1.85G [05:46&lt;02:16, 5.43MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.11G/1.85G [05:46&lt;02:22, 5.18MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.11G/1.85G [05:46&lt;02:27, 5.02MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.11G/1.85G [05:47&lt;02:27, 4.99MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.11G/1.85G [05:47&lt;02:31, 4.86MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.11G/1.85G [05:47&lt;02:19, 5.29MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.12G/1.85G [05:47&lt;02:01, 6.04MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.12G/1.85G [05:47&lt;01:49, 6.72MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.12G/1.85G [05:47&lt;01:42, 7.13MB/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.12G/1.85G [05:47&lt;01:47, 6.80MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.12G/1.85G [05:48&lt;01:53, 6.45MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.12G/1.85G [05:48&lt;01:51, 6.53MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.12G/1.85G [05:48&lt;01:42, 7.11MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.12G/1.85G [05:48&lt;01:42, 7.11MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.12G/1.85G [05:48&lt;02:23, 5.05MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:49&lt;02:28, 4.88MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:49&lt;02:39, 4.55MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:49&lt;02:48, 4.30MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:49&lt;02:52, 4.20MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:49&lt;02:55, 4.13MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:49&lt;02:46, 4.33MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:49&lt;02:40, 4.50MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:50&lt;02:25, 4.97MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:50&lt;02:14, 5.35MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:50&lt;02:03, 5.84MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588    | 1.13G/1.85G [05:50&lt;01:50, 6.53MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.13G/1.85G [05:50&lt;01:58, 6.05MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:50&lt;01:58, 6.06MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:51&lt;01:48, 6.56MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:51&lt;01:38, 7.22MB/s]</pre> <pre>\r 61%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:51&lt;01:36, 7.38MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:51&lt;01:56, 6.13MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:51&lt;02:16, 5.21MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:52&lt;02:24, 4.90MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:52&lt;02:18, 5.12MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:52&lt;02:07, 5.56MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.14G/1.85G [05:52&lt;01:57, 6.02MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:52&lt;01:58, 5.97MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:52&lt;01:59, 5.87MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:53&lt;01:53, 6.20MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:53&lt;02:09, 5.43MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:53&lt;02:21, 4.96MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:53&lt;02:31, 4.62MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:54&lt;02:38, 4.42MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:54&lt;02:41, 4.33MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:54&lt;02:54, 4.00MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:54&lt;02:53, 4.03MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:54&lt;03:02, 3.82MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:54&lt;02:54, 3.99MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.15G/1.85G [05:54&lt;02:49, 4.11MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.16G/1.85G [05:54&lt;03:00, 3.85MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.16G/1.85G [05:55&lt;02:54, 3.99MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.16G/1.85G [05:55&lt;03:02, 3.80MB/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 1.16G/1.85G [05:55&lt;03:05, 3.74MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:55&lt;03:02, 3.80MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:55&lt;03:05, 3.73MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:55&lt;03:42, 3.11MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:56&lt;03:31, 3.28MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:56&lt;03:07, 3.68MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:56&lt;02:59, 3.84MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:56&lt;03:03, 3.76MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:56&lt;02:57, 3.89MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:56&lt;02:53, 3.98MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:56&lt;02:48, 4.10MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:57&lt;02:31, 4.55MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:57&lt;02:44, 4.18MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:57&lt;02:44, 4.16MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.16G/1.85G [05:57&lt;02:36, 4.38MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:57&lt;02:28, 4.60MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:57&lt;02:21, 4.85MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:57&lt;02:23, 4.75MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:58&lt;02:23, 4.75MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:58&lt;02:21, 4.84MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:58&lt;02:12, 5.13MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:58&lt;02:23, 4.74MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:58&lt;02:33, 4.44MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:58&lt;02:31, 4.48MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:59&lt;02:28, 4.57MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:59&lt;02:24, 4.69MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:59&lt;02:16, 4.97MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.17G/1.85G [05:59&lt;02:18, 4.90MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.18G/1.85G [05:59&lt;02:03, 5.46MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.18G/1.85G [05:59&lt;01:53, 5.93MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.18G/1.85G [05:59&lt;02:04, 5.42MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.18G/1.85G [06:00&lt;02:02, 5.48MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 1.18G/1.85G [06:00&lt;01:52, 5.98MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.18G/1.85G [06:00&lt;01:52, 5.94MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.18G/1.85G [06:00&lt;01:49, 6.13MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.18G/1.85G [06:00&lt;01:45, 6.31MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.18G/1.85G [06:00&lt;01:45, 6.34MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.18G/1.85G [06:01&lt;01:45, 6.32MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:01&lt;01:47, 6.16MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:01&lt;01:58, 5.59MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:01&lt;02:12, 5.01MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:01&lt;02:21, 4.68MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:02&lt;02:28, 4.46MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:02&lt;02:20, 4.71MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:02&lt;02:17, 4.79MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:02&lt;02:15, 4.85MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:02&lt;02:21, 4.65MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:02&lt;02:25, 4.54MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:02&lt;02:31, 4.35MB/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:03&lt;02:24, 4.55MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.19G/1.85G [06:03&lt;02:21, 4.65MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:03&lt;02:21, 4.64MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:03&lt;02:09, 5.06MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:03&lt;02:22, 4.58MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:03&lt;02:22, 4.58MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:04&lt;02:34, 4.23MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:04&lt;02:37, 4.13MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:04&lt;02:20, 4.62MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:04&lt;02:10, 4.99MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:04&lt;02:13, 4.88MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258d   | 1.20G/1.85G [06:04&lt;02:01, 5.33MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.20G/1.85G [06:05&lt;01:52, 5.75MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.20G/1.85G [06:05&lt;01:57, 5.52MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:05&lt;02:04, 5.18MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:05&lt;02:06, 5.10MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:05&lt;02:10, 4.92MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:05&lt;02:10, 4.91MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:06&lt;02:27, 4.36MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:06&lt;02:35, 4.14MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:06&lt;02:27, 4.34MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:06&lt;02:32, 4.20MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:06&lt;02:34, 4.14MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:06&lt;02:28, 4.30MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:06&lt;02:30, 4.25MB/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:07&lt;02:29, 4.27MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:07&lt;02:26, 4.37MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:07&lt;02:32, 4.18MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:07&lt;02:37, 4.06MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.21G/1.85G [06:07&lt;02:10, 4.86MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:07&lt;02:00, 5.27MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:07&lt;01:46, 5.94MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:08&lt;01:45, 5.98MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:08&lt;01:48, 5.82MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:08&lt;01:51, 5.64MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:08&lt;02:22, 4.42MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:08&lt;02:20, 4.48MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:09&lt;02:02, 5.12MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:09&lt;01:51, 5.65MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.22G/1.85G [06:09&lt;01:48, 5.77MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 1.23G/1.85G [06:09&lt;01:51, 5.58MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:09&lt;01:51, 5.60MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:10&lt;02:02, 5.08MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:10&lt;02:07, 4.86MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:10&lt;02:08, 4.82MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:10&lt;02:18, 4.50MB/s]</pre> <pre>\r 66%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:10&lt;02:17, 4.52MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:10&lt;02:00, 5.15MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:10&lt;01:50, 5.62MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:11&lt;01:39, 6.19MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.23G/1.85G [06:11&lt;01:40, 6.16MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.24G/1.85G [06:11&lt;01:44, 5.89MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.24G/1.85G [06:11&lt;01:39, 6.20MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.24G/1.85G [06:11&lt;01:35, 6.45MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.24G/1.85G [06:11&lt;01:32, 6.64MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.24G/1.85G [06:11&lt;01:26, 7.10MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.24G/1.85G [06:12&lt;01:29, 6.84MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.24G/1.85G [06:12&lt;01:41, 6.00MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.24G/1.85G [06:12&lt;01:39, 6.12MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.24G/1.85G [06:12&lt;01:39, 6.08MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.25G/1.85G [06:12&lt;01:45, 5.75MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.25G/1.85G [06:13&lt;01:51, 5.45MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.25G/1.85G [06:13&lt;01:47, 5.61MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.25G/1.85G [06:13&lt;01:48, 5.54MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 1.25G/1.85G [06:13&lt;01:49, 5.50MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.25G/1.85G [06:13&lt;01:49, 5.48MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.25G/1.85G [06:14&lt;01:48, 5.51MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.25G/1.85G [06:14&lt;01:45, 5.65MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.25G/1.85G [06:14&lt;01:51, 5.36MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.25G/1.85G [06:14&lt;01:43, 5.75MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.26G/1.85G [06:14&lt;01:41, 5.86MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.26G/1.85G [06:15&lt;01:49, 5.41MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.26G/1.85G [06:15&lt;01:45, 5.63MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.26G/1.85G [06:15&lt;01:42, 5.77MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.26G/1.85G [06:15&lt;01:37, 6.09MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.26G/1.85G [06:15&lt;01:36, 6.11MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.26G/1.85G [06:15&lt;01:37, 6.06MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.26G/1.85G [06:16&lt;01:30, 6.53MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.26G/1.85G [06:16&lt;01:26, 6.75MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.27G/1.85G [06:16&lt;01:36, 6.07MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.27G/1.85G [06:16&lt;01:36, 6.07MB/s]</pre> <pre>\r 68%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.27G/1.85G [06:16&lt;01:35, 6.09MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.27G/1.85G [06:16&lt;01:41, 5.76MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.27G/1.85G [06:17&lt;01:37, 5.94MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.27G/1.85G [06:17&lt;01:27, 6.62MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.27G/1.85G [06:17&lt;01:26, 6.67MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u258a   | 1.27G/1.85G [06:17&lt;01:18, 7.40MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.27G/1.85G [06:17&lt;01:07, 8.56MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.28G/1.85G [06:17&lt;01:02, 9.24MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.28G/1.85G [06:17&lt;00:59, 9.70MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.28G/1.85G [06:18&lt;01:02, 9.13MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.28G/1.85G [06:18&lt;01:11, 7.99MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.28G/1.85G [06:18&lt;01:15, 7.59MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.28G/1.85G [06:18&lt;01:12, 7.83MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.28G/1.85G [06:18&lt;01:09, 8.14MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.28G/1.85G [06:18&lt;01:12, 7.78MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.28G/1.85G [06:18&lt;01:13, 7.74MB/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:19&lt;01:12, 7.82MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:19&lt;01:12, 7.80MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:19&lt;01:12, 7.76MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:19&lt;01:17, 7.22MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:19&lt;01:30, 6.18MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:19&lt;01:38, 5.69MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:20&lt;01:34, 5.94MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:20&lt;01:27, 6.38MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:20&lt;01:18, 7.08MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 1.29G/1.85G [06:20&lt;01:13, 7.56MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.30G/1.85G [06:20&lt;01:14, 7.42MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.30G/1.85G [06:20&lt;01:17, 7.12MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.30G/1.85G [06:20&lt;01:12, 7.59MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.30G/1.85G [06:20&lt;01:10, 7.88MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.30G/1.85G [06:21&lt;01:07, 8.22MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.30G/1.85G [06:21&lt;01:03, 8.67MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.30G/1.85G [06:21&lt;01:02, 8.74MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.30G/1.85G [06:21&lt;01:00, 9.02MB/s]</pre> <pre>\r 70%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.30G/1.85G [06:21&lt;01:00, 9.05MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:21&lt;00:58, 9.35MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:21&lt;01:00, 9.04MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:21&lt;01:01, 8.90MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:22&lt;01:04, 8.37MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:22&lt;01:15, 7.13MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:22&lt;01:29, 6.04MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:22&lt;01:31, 5.91MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:22&lt;01:30, 5.93MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:23&lt;01:35, 5.65MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.31G/1.85G [06:23&lt;01:26, 6.16MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.32G/1.85G [06:23&lt;01:18, 6.78MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.32G/1.85G [06:23&lt;01:14, 7.17MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 1.32G/1.85G [06:23&lt;01:08, 7.82MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.32G/1.85G [06:23&lt;01:00, 8.76MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.32G/1.85G [06:23&lt;01:06, 7.96MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.32G/1.85G [06:24&lt;01:16, 6.95MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.32G/1.85G [06:24&lt;01:12, 7.28MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.32G/1.85G [06:24&lt;01:07, 7.87MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.32G/1.85G [06:24&lt;01:10, 7.50MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.33G/1.85G [06:24&lt;01:08, 7.64MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.33G/1.85G [06:24&lt;01:13, 7.16MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.33G/1.85G [06:24&lt;01:20, 6.49MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.33G/1.85G [06:25&lt;01:22, 6.34MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.33G/1.85G [06:25&lt;01:21, 6.36MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.33G/1.85G [06:25&lt;01:27, 5.93MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.33G/1.85G [06:25&lt;01:33, 5.57MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.33G/1.85G [06:25&lt;01:32, 5.58MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.33G/1.85G [06:25&lt;01:24, 6.11MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.34G/1.85G [06:26&lt;01:14, 6.92MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.34G/1.85G [06:26&lt;01:02, 8.19MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.34G/1.85G [06:26&lt;00:55, 9.25MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.34G/1.85G [06:26&lt;00:57, 8.92MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.34G/1.85G [06:26&lt;00:57, 8.93MB/s]</pre> <pre>\r 72%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f  | 1.34G/1.85G [06:26&lt;00:58, 8.77MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.34G/1.85G [06:26&lt;01:01, 8.31MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.34G/1.85G [06:27&lt;01:11, 7.12MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.34G/1.85G [06:27&lt;01:17, 6.49MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.35G/1.85G [06:27&lt;01:13, 6.87MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.35G/1.85G [06:27&lt;01:09, 7.24MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.35G/1.85G [06:27&lt;01:06, 7.55MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.35G/1.85G [06:27&lt;01:02, 8.04MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.35G/1.85G [06:27&lt;00:59, 8.37MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.35G/1.85G [06:27&lt;00:56, 8.81MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.35G/1.85G [06:28&lt;00:54, 9.12MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.35G/1.85G [06:28&lt;01:03, 7.88MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.35G/1.85G [06:28&lt;01:12, 6.81MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:28&lt;01:16, 6.50MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:28&lt;01:11, 6.94MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:28&lt;01:04, 7.65MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:29&lt;01:04, 7.66MB/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:29&lt;01:04, 7.68MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:29&lt;01:06, 7.42MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:29&lt;01:08, 7.17MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:29&lt;01:09, 6.99MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:29&lt;01:06, 7.38MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 1.36G/1.85G [06:29&lt;01:04, 7.49MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.37G/1.85G [06:30&lt;01:13, 6.63MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.37G/1.85G [06:30&lt;01:09, 6.92MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.37G/1.85G [06:30&lt;01:04, 7.52MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.37G/1.85G [06:30&lt;01:01, 7.78MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.37G/1.85G [06:30&lt;00:58, 8.28MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.37G/1.85G [06:30&lt;00:57, 8.39MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.37G/1.85G [06:30&lt;00:58, 8.24MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.37G/1.85G [06:30&lt;01:00, 7.86MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.37G/1.85G [06:31&lt;01:01, 7.77MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.38G/1.85G [06:31&lt;00:57, 8.34MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.38G/1.85G [06:31&lt;00:50, 9.32MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.38G/1.85G [06:31&lt;00:48, 9.80MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.38G/1.85G [06:31&lt;00:49, 9.47MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.38G/1.85G [06:31&lt;00:49, 9.46MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.38G/1.85G [06:31&lt;00:50, 9.21MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.38G/1.85G [06:31&lt;00:51, 9.08MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.38G/1.85G [06:32&lt;00:57, 8.15MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.38G/1.85G [06:32&lt;00:58, 7.99MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.39G/1.85G [06:32&lt;00:59, 7.85MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.39G/1.85G [06:32&lt;00:58, 7.90MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 1.39G/1.85G [06:32&lt;01:03, 7.28MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.39G/1.85G [06:32&lt;01:09, 6.66MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.39G/1.85G [06:33&lt;01:12, 6.33MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.39G/1.85G [06:33&lt;01:13, 6.22MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.39G/1.85G [06:33&lt;01:15, 6.09MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.39G/1.85G [06:33&lt;01:15, 6.04MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.39G/1.85G [06:33&lt;01:14, 6.11MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:33&lt;01:14, 6.11MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:34&lt;01:26, 5.26MB/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:34&lt;01:21, 5.57MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:34&lt;01:14, 6.09MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:34&lt;01:09, 6.54MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:34&lt;01:04, 7.03MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:34&lt;00:59, 7.49MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:35&lt;01:01, 7.25MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:35&lt;01:11, 6.22MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.40G/1.85G [06:35&lt;01:23, 5.36MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.41G/1.85G [06:35&lt;01:30, 4.91MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.41G/1.85G [06:35&lt;01:27, 5.06MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.41G/1.85G [06:36&lt;01:26, 5.15MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.41G/1.85G [06:36&lt;01:27, 5.07MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.41G/1.85G [06:36&lt;01:23, 5.27MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 1.41G/1.85G [06:36&lt;01:25, 5.15MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.41G/1.85G [06:36&lt;01:18, 5.63MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.41G/1.85G [06:37&lt;01:09, 6.28MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.41G/1.85G [06:37&lt;01:10, 6.18MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.42G/1.85G [06:37&lt;01:13, 5.96MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.42G/1.85G [06:37&lt;01:22, 5.28MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.42G/1.85G [06:37&lt;01:17, 5.62MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.42G/1.85G [06:37&lt;01:12, 5.99MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.42G/1.85G [06:38&lt;01:06, 6.53MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.42G/1.85G [06:38&lt;01:00, 7.13MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.42G/1.85G [06:38&lt;00:57, 7.51MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.42G/1.85G [06:38&lt;00:54, 7.84MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.42G/1.85G [06:38&lt;00:53, 8.04MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.43G/1.85G [06:38&lt;00:48, 8.85MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.43G/1.85G [06:38&lt;00:49, 8.56MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.43G/1.85G [06:38&lt;00:51, 8.28MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.43G/1.85G [06:39&lt;00:52, 8.13MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.43G/1.85G [06:39&lt;00:51, 8.20MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.43G/1.85G [06:39&lt;00:51, 8.14MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.43G/1.85G [06:39&lt;00:49, 8.51MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.43G/1.85G [06:39&lt;00:45, 9.10MB/s]</pre> <pre>\r 77%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 1.43G/1.85G [06:39&lt;00:51, 8.06MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.43G/1.85G [06:39&lt;00:58, 7.09MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.44G/1.85G [06:40&lt;01:01, 6.78MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.44G/1.85G [06:40&lt;01:04, 6.41MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.44G/1.85G [06:40&lt;01:03, 6.50MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.44G/1.85G [06:40&lt;01:05, 6.25MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.44G/1.85G [06:40&lt;01:05, 6.24MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.44G/1.85G [06:40&lt;01:01, 6.67MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.44G/1.85G [06:41&lt;01:07, 6.10MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.44G/1.85G [06:41&lt;01:04, 6.29MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.44G/1.85G [06:41&lt;00:59, 6.84MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:41&lt;01:01, 6.59MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:41&lt;00:58, 6.97MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:41&lt;01:00, 6.70MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:42&lt;01:00, 6.71MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:42&lt;01:10, 5.72MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:42&lt;01:18, 5.11MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:42&lt;01:23, 4.77MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:42&lt;01:24, 4.74MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:43&lt;01:15, 5.29MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.45G/1.85G [06:43&lt;01:13, 5.38MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.46G/1.85G [06:43&lt;01:06, 5.92MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.46G/1.85G [06:43&lt;01:01, 6.39MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 1.46G/1.85G [06:43&lt;00:58, 6.77MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.46G/1.85G [06:43&lt;01:00, 6.51MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.46G/1.85G [06:44&lt;01:02, 6.22MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.46G/1.85G [06:44&lt;01:02, 6.28MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.46G/1.85G [06:44&lt;01:03, 6.09MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.46G/1.85G [06:44&lt;01:02, 6.25MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.46G/1.85G [06:44&lt;01:03, 6.11MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.46G/1.85G [06:45&lt;01:12, 5.36MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.47G/1.85G [06:45&lt;01:08, 5.58MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.47G/1.85G [06:45&lt;01:06, 5.78MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.47G/1.85G [06:45&lt;01:02, 6.11MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.47G/1.85G [06:45&lt;00:57, 6.68MB/s]</pre> <pre>\r 79%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.47G/1.85G [06:45&lt;00:51, 7.43MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.47G/1.85G [06:45&lt;00:42, 8.96MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.47G/1.85G [06:45&lt;00:37, 10.2MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.48G/1.85G [06:46&lt;00:32, 11.7MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.48G/1.85G [06:46&lt;00:32, 11.7MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.48G/1.85G [06:46&lt;00:36, 10.1MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 1.48G/1.85G [06:46&lt;00:44, 8.26MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.48G/1.85G [06:46&lt;00:45, 8.06MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.48G/1.85G [06:46&lt;00:43, 8.39MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.48G/1.85G [06:47&lt;00:42, 8.56MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.48G/1.85G [06:47&lt;00:40, 8.97MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.49G/1.85G [06:47&lt;00:41, 8.91MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.49G/1.85G [06:47&lt;00:43, 8.40MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.49G/1.85G [06:47&lt;00:44, 8.13MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.49G/1.85G [06:47&lt;00:51, 7.08MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.49G/1.85G [06:47&lt;00:50, 7.22MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.49G/1.85G [06:48&lt;00:45, 7.85MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.49G/1.85G [06:48&lt;00:40, 8.95MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.49G/1.85G [06:48&lt;00:36, 9.70MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.49G/1.85G [06:48&lt;00:39, 8.97MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.50G/1.85G [06:48&lt;00:40, 8.69MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.50G/1.85G [06:48&lt;00:39, 9.03MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.50G/1.85G [06:48&lt;00:35, 9.94MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.50G/1.85G [06:48&lt;00:32, 10.7MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.50G/1.85G [06:49&lt;00:34, 10.1MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 1.50G/1.85G [06:49&lt;00:33, 10.3MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.50G/1.85G [06:49&lt;00:34, 10.1MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:49&lt;00:40, 8.58MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:49&lt;00:45, 7.57MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:49&lt;00:49, 6.92MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:50&lt;00:48, 7.02MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:50&lt;00:49, 6.94MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:50&lt;00:54, 6.30MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:50&lt;00:54, 6.28MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:50&lt;00:49, 6.91MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:50&lt;00:44, 7.66MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.51G/1.85G [06:50&lt;00:42, 7.98MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.52G/1.85G [06:51&lt;00:44, 7.46MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.52G/1.85G [06:51&lt;00:44, 7.55MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.52G/1.85G [06:51&lt;00:41, 8.02MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.52G/1.85G [06:51&lt;00:40, 8.15MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.52G/1.85G [06:51&lt;00:37, 8.72MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.52G/1.85G [06:51&lt;00:36, 8.92MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.52G/1.85G [06:51&lt;00:37, 8.89MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.52G/1.85G [06:51&lt;00:41, 7.84MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.52G/1.85G [06:52&lt;00:48, 6.72MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.53G/1.85G [06:52&lt;00:46, 7.05MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 1.53G/1.85G [06:52&lt;00:41, 7.77MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.53G/1.85G [06:52&lt;00:35, 9.06MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.53G/1.85G [06:52&lt;00:31, 10.2MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.53G/1.85G [06:52&lt;00:30, 10.5MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.53G/1.85G [06:52&lt;00:28, 11.3MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.53G/1.85G [06:53&lt;00:27, 11.3MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.54G/1.85G [06:53&lt;00:27, 11.3MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.54G/1.85G [06:53&lt;00:32, 9.77MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.54G/1.85G [06:53&lt;00:34, 8.98MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.54G/1.85G [06:53&lt;00:33, 9.19MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.54G/1.85G [06:53&lt;00:31, 9.76MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.54G/1.85G [06:53&lt;00:28, 10.8MB/s]</pre> <pre>\r 83%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.54G/1.85G [06:54&lt;00:29, 10.3MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.55G/1.85G [06:54&lt;00:36, 8.37MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.55G/1.85G [06:54&lt;00:43, 6.97MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.55G/1.85G [06:54&lt;00:46, 6.46MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.55G/1.85G [06:54&lt;00:44, 6.85MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 1.55G/1.85G [06:55&lt;00:40, 7.44MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.55G/1.85G [06:55&lt;00:38, 7.82MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.55G/1.85G [06:55&lt;00:38, 7.80MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.55G/1.85G [06:55&lt;00:36, 8.08MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.55G/1.85G [06:55&lt;00:32, 9.10MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.56G/1.85G [06:55&lt;00:30, 9.64MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.56G/1.85G [06:55&lt;00:32, 9.14MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.56G/1.85G [06:55&lt;00:34, 8.60MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.56G/1.85G [06:56&lt;00:32, 8.93MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.56G/1.85G [06:56&lt;00:33, 8.70MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.56G/1.85G [06:56&lt;00:38, 7.54MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.56G/1.85G [06:56&lt;00:38, 7.56MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.56G/1.85G [06:56&lt;00:35, 8.20MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.56G/1.85G [06:56&lt;00:30, 9.51MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.57G/1.85G [06:56&lt;00:25, 11.0MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.57G/1.85G [06:56&lt;00:22, 12.8MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.57G/1.85G [06:57&lt;00:21, 12.9MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 1.57G/1.85G [06:57&lt;00:22, 12.3MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.57G/1.85G [06:57&lt;00:22, 12.5MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.57G/1.85G [06:57&lt;00:20, 13.3MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.58G/1.85G [06:57&lt;00:21, 12.9MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.58G/1.85G [06:57&lt;00:21, 12.9MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.58G/1.85G [06:57&lt;00:22, 12.0MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.58G/1.85G [06:57&lt;00:24, 11.2MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.58G/1.85G [06:58&lt;00:26, 10.3MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.58G/1.85G [06:58&lt;00:24, 10.7MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.59G/1.85G [06:58&lt;00:24, 10.8MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.59G/1.85G [06:58&lt;00:26, 9.86MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.59G/1.85G [06:58&lt;00:27, 9.51MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.59G/1.85G [06:58&lt;00:26, 9.97MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.59G/1.85G [06:59&lt;00:25, 10.3MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.59G/1.85G [06:59&lt;00:24, 10.7MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.59G/1.85G [06:59&lt;00:25, 10.1MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 1.60G/1.85G [06:59&lt;00:26, 9.61MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.60G/1.85G [06:59&lt;00:27, 9.11MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.60G/1.85G [06:59&lt;00:27, 9.35MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.60G/1.85G [06:59&lt;00:25, 9.77MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.60G/1.85G [06:59&lt;00:26, 9.56MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.60G/1.85G [07:00&lt;00:26, 9.46MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.60G/1.85G [07:00&lt;00:24, 9.98MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.60G/1.85G [07:00&lt;00:24, 9.95MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.61G/1.85G [07:00&lt;00:23, 10.6MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.61G/1.85G [07:00&lt;00:20, 11.8MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.61G/1.85G [07:00&lt;00:18, 13.2MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.61G/1.85G [07:00&lt;00:16, 14.1MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.61G/1.85G [07:00&lt;00:16, 14.2MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.62G/1.85G [07:01&lt;00:15, 15.1MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.62G/1.85G [07:01&lt;00:14, 16.1MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 1.62G/1.85G [07:01&lt;00:14, 16.4MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.62G/1.85G [07:01&lt;00:13, 16.5MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.62G/1.85G [07:01&lt;00:13, 16.9MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.63G/1.85G [07:01&lt;00:13, 16.4MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.63G/1.85G [07:01&lt;00:13, 16.2MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.63G/1.85G [07:01&lt;00:14, 15.7MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.63G/1.85G [07:02&lt;00:13, 16.1MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.63G/1.85G [07:02&lt;00:13, 16.6MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.64G/1.85G [07:02&lt;00:11, 18.3MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.64G/1.85G [07:02&lt;00:10, 19.5MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 1.64G/1.85G [07:02&lt;00:10, 20.0MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.64G/1.85G [07:02&lt;00:11, 18.3MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.65G/1.85G [07:02&lt;00:12, 16.1MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.65G/1.85G [07:03&lt;00:13, 15.5MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.65G/1.85G [07:03&lt;00:12, 15.8MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.65G/1.85G [07:03&lt;00:12, 16.5MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.66G/1.85G [07:03&lt;00:10, 17.9MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.66G/1.85G [07:03&lt;00:10, 17.6MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.66G/1.85G [07:03&lt;00:13, 14.6MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.66G/1.85G [07:03&lt;00:14, 13.5MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.66G/1.85G [07:04&lt;00:15, 12.4MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.66G/1.85G [07:04&lt;00:15, 11.7MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 1.67G/1.85G [07:04&lt;00:15, 11.8MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.67G/1.85G [07:04&lt;00:14, 12.3MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.67G/1.85G [07:04&lt;00:15, 12.1MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.67G/1.85G [07:04&lt;00:14, 12.6MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.67G/1.85G [07:04&lt;00:13, 13.2MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.67G/1.85G [07:04&lt;00:13, 12.7MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.68G/1.85G [07:05&lt;00:14, 12.1MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.68G/1.85G [07:05&lt;00:15, 11.1MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.68G/1.85G [07:05&lt;00:17, 10.0MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.68G/1.85G [07:05&lt;00:19, 9.04MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.68G/1.85G [07:05&lt;00:19, 8.77MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.68G/1.85G [07:05&lt;00:18, 9.09MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.68G/1.85G [07:05&lt;00:16, 10.0MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.68G/1.85G [07:06&lt;00:16, 10.1MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.69G/1.85G [07:06&lt;00:15, 10.7MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.69G/1.85G [07:06&lt;00:14, 11.7MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 1.69G/1.85G [07:06&lt;00:14, 11.5MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.69G/1.85G [07:06&lt;00:14, 10.8MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.69G/1.85G [07:06&lt;00:15, 10.3MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.69G/1.85G [07:06&lt;00:16, 9.43MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.69G/1.85G [07:06&lt;00:16, 9.62MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:07&lt;00:16, 9.56MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:07&lt;00:16, 9.58MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:07&lt;00:15, 9.78MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:07&lt;00:18, 8.39MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:07&lt;00:19, 7.65MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:07&lt;00:20, 7.26MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:08&lt;00:20, 7.12MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:08&lt;00:25, 5.72MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:08&lt;00:25, 5.72MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.70G/1.85G [07:08&lt;00:22, 6.41MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.71G/1.85G [07:08&lt;00:18, 7.73MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.71G/1.85G [07:08&lt;00:15, 9.19MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.71G/1.85G [07:08&lt;00:13, 10.7MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 1.71G/1.85G [07:09&lt;00:10, 12.9MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.71G/1.85G [07:09&lt;00:09, 14.1MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.72G/1.85G [07:09&lt;00:09, 14.7MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.72G/1.85G [07:09&lt;00:09, 14.0MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.72G/1.85G [07:09&lt;00:10, 13.2MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.72G/1.85G [07:09&lt;00:09, 13.4MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.72G/1.85G [07:09&lt;00:08, 14.4MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.72G/1.85G [07:09&lt;00:08, 15.7MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.73G/1.85G [07:10&lt;00:07, 17.6MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.73G/1.85G [07:10&lt;00:06, 19.4MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 1.73G/1.85G [07:10&lt;00:05, 20.9MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 1.74G/1.85G [07:10&lt;00:04, 23.3MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 1.74G/1.85G [07:10&lt;00:04, 25.4MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 1.74G/1.85G [07:10&lt;00:03, 27.9MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 1.75G/1.85G [07:10&lt;00:04, 26.2MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 1.75G/1.85G [07:10&lt;00:04, 23.2MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 1.75G/1.85G [07:10&lt;00:04, 23.4MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 1.75G/1.85G [07:11&lt;00:04, 23.8MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 1.76G/1.85G [07:11&lt;00:03, 24.8MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 1.76G/1.85G [07:11&lt;00:03, 26.3MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 1.76G/1.85G [07:11&lt;00:03, 27.6MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 1.77G/1.85G [07:11&lt;00:02, 28.9MB/s]</pre> <pre>\r 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 1.77G/1.85G [07:11&lt;00:03, 23.3MB/s]</pre> <pre>\r 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 1.77G/1.85G [07:11&lt;00:04, 18.5MB/s]</pre> <pre>\r 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 1.78G/1.85G [07:12&lt;00:04, 17.6MB/s]</pre> <pre>\r 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 1.78G/1.85G [07:12&lt;00:04, 17.7MB/s]</pre> <pre>\r 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 1.78G/1.85G [07:12&lt;00:03, 18.4MB/s]</pre> <pre>\r 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 1.78G/1.85G [07:12&lt;00:03, 19.8MB/s]</pre> <pre>\r 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 1.79G/1.85G [07:12&lt;00:03, 21.0MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 1.79G/1.85G [07:12&lt;00:02, 22.8MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 1.79G/1.85G [07:12&lt;00:02, 24.8MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 1.80G/1.85G [07:12&lt;00:02, 27.2MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 1.80G/1.85G [07:13&lt;00:01, 29.2MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 1.80G/1.85G [07:13&lt;00:01, 30.3MB/s]</pre> <pre>\r 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 1.81G/1.85G [07:13&lt;00:01, 32.4MB/s]</pre> <pre>\r 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 1.81G/1.85G [07:13&lt;00:01, 34.5MB/s]</pre> <pre>\r 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 1.82G/1.85G [07:13&lt;00:00, 37.2MB/s]</pre> <pre>\r 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 1.82G/1.85G [07:13&lt;00:00, 35.8MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 1.82G/1.85G [07:13&lt;00:00, 31.9MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 1.83G/1.85G [07:13&lt;00:00, 30.1MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 1.83G/1.85G [07:13&lt;00:00, 29.8MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 1.83G/1.85G [07:14&lt;00:00, 30.2MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 1.84G/1.85G [07:14&lt;00:00, 30.7MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 1.84G/1.85G [07:14&lt;00:00, 23.7MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 1.84G/1.85G [07:14&lt;00:00, 20.9MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 1.85G/1.85G [07:14&lt;00:00, 19.2MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 1.85G/1.85G [07:14&lt;00:00, 15.3MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 1.85G/1.85G [07:15&lt;00:00, 13.0MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.85G/1.85G [07:15&lt;00:00, 4.25MB/s]</pre> <pre>\n</pre> Out[4]: <pre>'/home/runner/work/HyperCoast/HyperCoast/docs/examples/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc'</pre> <p>Load the dataset as a <code>xarray.Dataset</code> object.</p> In\u00a0[5]: Copied! <pre>dataset = hypercoast.read_emit(filepath)\n</pre> dataset = hypercoast.read_emit(filepath) <p>Visualize the data interactively with HyperCoast.</p> In\u00a0[6]: Copied! <pre>m = hypercoast.Map()\nm.add_basemap(\"SATELLITE\")\nm.add_emit(dataset, wavelengths=[1000, 600, 500], vmin=0, vmax=0.3, layer_name=\"EMIT\")\nm.add(\"spectral\")\nm\n</pre> m = hypercoast.Map() m.add_basemap(\"SATELLITE\") m.add_emit(dataset, wavelengths=[1000, 600, 500], vmin=0, vmax=0.3, layer_name=\"EMIT\") m.add(\"spectral\") m Out[6]: <p></p>"},{"location":"examples/emit/#visualizing-emit-data-interactively-with-hypercoast","title":"Visualizing EMIT data interactively with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to visualize Earth Surface Mineral Dust Source Investigation (EMIT) data interactively with HyperCoast. This notebook is inspired by the EMIT data visualization tutorial - Exploring_EMIT_L2A_Reflectance.ipynb. We have made it much easier to visualize the data interactively with HyperCoast.</p>"},{"location":"examples/image_cube/","title":"Image cube","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[\u00a0]: Copied! <pre>import hypercoast\n</pre> import hypercoast In\u00a0[\u00a0]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/NEON_D02_SERC_DP3_368000_4306000_reflectance.h5\"\nfilepath = \"data/neon.h5\"\nhypercoast.download_file(url, filepath)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/NEON_D02_SERC_DP3_368000_4306000_reflectance.h5\" filepath = \"data/neon.h5\" hypercoast.download_file(url, filepath) <p>Load the dataset as a <code>xarray.Dataset</code> object.</p> In\u00a0[\u00a0]: Copied! <pre>dataset = hypercoast.read_neon(filepath)\ndataset\n</pre> dataset = hypercoast.read_neon(filepath) dataset <p>Visualize the NEON AOP hyperspectral data in 3D with a selected band overlaid on top of the 3D plot.</p> In\u00a0[\u00a0]: Copied! <pre>cube = hypercoast.image_cube(\n    dataset,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.5),\n    rgb_wavelengths=[700],\n    title=\"Reflectance\",\n)\ncube.show()\n</pre> cube = hypercoast.image_cube(     dataset,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.5),     rgb_wavelengths=[700],     title=\"Reflectance\", ) cube.show() <p>Visualize the NEON AOP hyperspectral data in 3D with an RGB image overlaid on top of the 3D plot.</p> In\u00a0[\u00a0]: Copied! <pre>cube2 = hypercoast.image_cube(\n    dataset,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.5),\n    rgb_wavelengths=[1000, 700, 500],\n    rgb_gamma=2,\n    title=\"Reflectance\",\n)\ncube2.show()\n</pre> cube2 = hypercoast.image_cube(     dataset,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.5),     rgb_wavelengths=[1000, 700, 500],     rgb_gamma=2,     title=\"Reflectance\", ) cube2.show() <p></p> In\u00a0[\u00a0]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/netcdf/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\"\nfilepath = \"EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\"\nhypercoast.download_file(url)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/netcdf/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\" filepath = \"EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\" hypercoast.download_file(url) In\u00a0[\u00a0]: Copied! <pre>dataset = hypercoast.read_emit(filepath)\ndataset\n</pre> dataset = hypercoast.read_emit(filepath) dataset <p>Select a subset of the data to avoid nodata areas.</p> In\u00a0[\u00a0]: Copied! <pre>ds = dataset.sel(longitude=slice(-90.1482, -89.7321), latitude=slice(30.0225, 29.7451))\nds\n</pre> ds = dataset.sel(longitude=slice(-90.1482, -89.7321), latitude=slice(30.0225, 29.7451)) ds <p>Visualize the EMIT data in 3D with an RGB image overlaid on top of the 3D plot.</p> In\u00a0[\u00a0]: Copied! <pre>cube = hypercoast.image_cube(\n    ds,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.4),\n    rgb_wavelengths=[1000, 700, 500],\n    rgb_gamma=2,\n    title=\"EMIT Reflectance\",\n)\ncube.show()\n</pre> cube = hypercoast.image_cube(     ds,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.4),     rgb_wavelengths=[1000, 700, 500],     rgb_gamma=2,     title=\"EMIT Reflectance\", ) cube.show() <p></p>"},{"location":"examples/image_cube/#visualizing-hyperspectral-data-in-3d","title":"Visualizing Hyperspectral Data in 3D\u00b6","text":"<p>This notebook demonstrates how to visualize hyperspectral data in 3D using the PyVista plotting backend.</p>"},{"location":"examples/image_cube/#visualize-neon-aop-hyperspectral-data","title":"Visualize NEON AOP Hyperspectral Data\u00b6","text":"<p>Download a sample NEON AOP hyperspectral data.</p>"},{"location":"examples/image_cube/#visualize-nasa-emit-hyperspectral-data","title":"Visualize NASA EMIT Hyperspectral Data\u00b6","text":"<p>Download a sample EMIT data file from here.</p>"},{"location":"examples/image_slicing/","title":"Image slicing","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[\u00a0]: Copied! <pre>import hypercoast\n</pre> import hypercoast In\u00a0[\u00a0]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/NEON_D02_SERC_DP3_368000_4306000_reflectance.h5\"\nfilepath = \"data/neon.h5\"\nhypercoast.download_file(url, filepath)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/NEON_D02_SERC_DP3_368000_4306000_reflectance.h5\" filepath = \"data/neon.h5\" hypercoast.download_file(url, filepath) <p>Load the dataset as a <code>xarray.Dataset</code> object.</p> In\u00a0[\u00a0]: Copied! <pre>dataset = hypercoast.read_neon(filepath)\ndataset\n</pre> dataset = hypercoast.read_neon(filepath) dataset <p>Extract a small subset of the dataset for demonstration purposes.</p> In\u00a0[\u00a0]: Copied! <pre>ds = dataset.isel(x=slice(100, 200), y=slice(100, 200))\nds\n</pre> ds = dataset.isel(x=slice(100, 200), y=slice(100, 200)) ds <p>Interactive slicing along the z-axis (band)</p> In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    ds,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.5),\n    rgb_wavelengths=[1000, 700, 500],\n    rgb_gamma=2,\n    widget=\"slice\",\n)\np.add_text(\"Band slicing \", position=\"upper_right\", font_size=14)\np.show()\n</pre> p = hypercoast.image_cube(     ds,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.5),     rgb_wavelengths=[1000, 700, 500],     rgb_gamma=2,     widget=\"slice\", ) p.add_text(\"Band slicing \", position=\"upper_right\", font_size=14) p.show() <p></p> <p>Interactive slicing along the x-axis (longitude).</p> In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    ds,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.5),\n    rgb_wavelengths=[1000, 700, 500],\n    rgb_gamma=2,\n    widget=\"slice\",\n    normal=\"x\",\n)\np.add_text(\"X-axis slicing \", position=\"upper_right\", font_size=14)\np.show()\n</pre> p = hypercoast.image_cube(     ds,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.5),     rgb_wavelengths=[1000, 700, 500],     rgb_gamma=2,     widget=\"slice\",     normal=\"x\", ) p.add_text(\"X-axis slicing \", position=\"upper_right\", font_size=14) p.show() <p></p> <p>Orthogonal slicing.</p> In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    ds,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.5),\n    rgb_wavelengths=[1000, 700, 500],\n    rgb_gamma=2,\n    widget=\"orthogonal\",\n)\np.add_text(\"Orthogonal slicing\", position=\"upper_right\", font_size=14)\np.show()\n</pre> p = hypercoast.image_cube(     ds,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.5),     rgb_wavelengths=[1000, 700, 500],     rgb_gamma=2,     widget=\"orthogonal\", ) p.add_text(\"Orthogonal slicing\", position=\"upper_right\", font_size=14) p.show() <p></p> <p>Clip the image cube with a plane (band slicing).</p> In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    ds,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.5),\n    rgb_wavelengths=[1000, 700, 500],\n    rgb_gamma=2,\n    widget=\"plane\",\n)\np.add_text(\"Band slicing\", position=\"upper_right\", font_size=14)\np.show()\n</pre> p = hypercoast.image_cube(     ds,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.5),     rgb_wavelengths=[1000, 700, 500],     rgb_gamma=2,     widget=\"plane\", ) p.add_text(\"Band slicing\", position=\"upper_right\", font_size=14) p.show() <p></p> <p>Interactive thresholding.</p> In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    ds,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.5),\n    rgb_wavelengths=[1000, 700, 500],\n    rgb_gamma=2,\n    widget=\"threshold\",\n)\np.add_text(\"Thresholding\", position=\"upper_right\", font_size=14)\np.show()\n</pre> p = hypercoast.image_cube(     ds,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.5),     rgb_wavelengths=[1000, 700, 500],     rgb_gamma=2,     widget=\"threshold\", ) p.add_text(\"Thresholding\", position=\"upper_right\", font_size=14) p.show() <p></p> In\u00a0[\u00a0]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/netcdf/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\"\nfilepath = \"data/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\"\nhypercoast.download_file(url, filepath)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/netcdf/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\" filepath = \"data/EMIT_L2A_RFL_001_20240404T161230_2409511_009.nc\" hypercoast.download_file(url, filepath) <p>Load the dataset as a <code>xarray.Dataset</code> object.</p> In\u00a0[\u00a0]: Copied! <pre>dataset = hypercoast.read_emit(filepath)\ndataset\n</pre> dataset = hypercoast.read_emit(filepath) dataset <p>Select a subset of the data for demonstration purposes.</p> In\u00a0[\u00a0]: Copied! <pre>ds = dataset.sel(longitude=slice(-90.05, -89.99), latitude=slice(30.00, 29.93))\nds\n</pre> ds = dataset.sel(longitude=slice(-90.05, -89.99), latitude=slice(30.00, 29.93)) ds <p>Interactive slicing along the z-axis (band).</p> In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    ds,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.5),\n    rgb_wavelengths=[1000, 700, 500],\n    rgb_gamma=2,\n    title=\"EMIT Reflectance\",\n    widget=\"plane\",\n)\np.add_text(\"Band slicing\", position=\"upper_right\", font_size=14)\np.show()\n</pre> p = hypercoast.image_cube(     ds,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.5),     rgb_wavelengths=[1000, 700, 500],     rgb_gamma=2,     title=\"EMIT Reflectance\",     widget=\"plane\", ) p.add_text(\"Band slicing\", position=\"upper_right\", font_size=14) p.show() <p></p> <p>Interactive thresholding.</p> In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    ds,\n    variable=\"reflectance\",\n    cmap=\"jet\",\n    clim=(0, 0.5),\n    rgb_wavelengths=[1000, 700, 500],\n    rgb_gamma=2,\n    title=\"EMIT Reflectance\",\n    widget=\"threshold\",\n)\np.add_text(\"Thresholding\", position=\"upper_right\", font_size=14)\np.show()\n</pre> p = hypercoast.image_cube(     ds,     variable=\"reflectance\",     cmap=\"jet\",     clim=(0, 0.5),     rgb_wavelengths=[1000, 700, 500],     rgb_gamma=2,     title=\"EMIT Reflectance\",     widget=\"threshold\", ) p.add_text(\"Thresholding\", position=\"upper_right\", font_size=14) p.show() <p></p>"},{"location":"examples/image_slicing/#interactive-slicing-and-thresholding-of-hyperspectral-data-with-hypercoast","title":"Interactive slicing and thresholding of hyperspectral data with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to perform interactive slicing and thresholding of hyperspectral data with HyperCoast using the PyVista plotting backend.</p>"},{"location":"examples/image_slicing/#neon-aop","title":"NEON AOP\u00b6","text":"<p>Download a sample NEON AOP hyperspectral dataset.</p>"},{"location":"examples/image_slicing/#nasa-emit","title":"NASA EMIT\u00b6","text":"<p>Download a sample NASA EMIT hyperspectral dataset from here.</p>"},{"location":"examples/neon/","title":"Neon","text":"In\u00a0[1]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[2]: Copied! <pre>import hypercoast\n</pre> import hypercoast In\u00a0[3]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/NEON_D02_SERC_DP3_368000_4306000_reflectance.h5\"\nfilepath = \"data/neon.h5\"\nhypercoast.download_file(url, filepath)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/NEON_D02_SERC_DP3_368000_4306000_reflectance.h5\" filepath = \"data/neon.h5\" hypercoast.download_file(url, filepath) <pre>Downloading...\nFrom: https://github.com/opengeos/datasets/releases/download/hypercoast/NEON_D02_SERC_DP3_368000_4306000_reflectance.h5\nTo: /home/runner/work/HyperCoast/HyperCoast/docs/examples/data/neon.h5\n</pre> <pre>\r  0%|          | 0.00/629M [00:00&lt;?, ?B/s]</pre> <pre>\r  4%|\u258d         | 25.7M/629M [00:00&lt;00:02, 255MB/s]</pre> <pre>\r 10%|\u2589         | 60.3M/629M [00:00&lt;00:01, 308MB/s]</pre> <pre>\r 15%|\u2588\u258c        | 94.9M/629M [00:00&lt;00:01, 325MB/s]</pre> <pre>\r 21%|\u2588\u2588        | 131M/629M [00:00&lt;00:01, 339MB/s] </pre> <pre>\r 27%|\u2588\u2588\u258b       | 167M/629M [00:00&lt;00:01, 344MB/s]</pre> <pre>\r 32%|\u2588\u2588\u2588\u258f      | 204M/629M [00:00&lt;00:01, 352MB/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 240M/629M [00:00&lt;00:01, 353MB/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258d     | 275M/629M [00:00&lt;00:01, 324MB/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 308M/629M [00:00&lt;00:01, 310MB/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258d    | 340M/629M [00:01&lt;00:00, 299MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 370M/629M [00:01&lt;00:00, 266MB/s]</pre> <pre>\r 63%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 398M/629M [00:01&lt;00:00, 245MB/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 423M/629M [00:01&lt;00:00, 208MB/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 445M/629M [00:01&lt;00:01, 145MB/s]</pre> <pre>\r 74%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 463M/629M [00:02&lt;00:01, 116MB/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 478M/629M [00:02&lt;00:01, 96.9MB/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 490M/629M [00:02&lt;00:01, 89.3MB/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589  | 500M/629M [00:02&lt;00:01, 84.6MB/s]</pre> <pre>\r 81%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 510M/629M [00:02&lt;00:01, 81.7MB/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 519M/629M [00:02&lt;00:01, 73.3MB/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 526M/629M [00:03&lt;00:01, 69.5MB/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d | 534M/629M [00:03&lt;00:01, 63.6MB/s]</pre> <pre>\r 86%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 541M/629M [00:03&lt;00:01, 58.4MB/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 547M/629M [00:03&lt;00:01, 55.5MB/s]</pre> <pre>\r 88%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a | 553M/629M [00:03&lt;00:01, 53.5MB/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 558M/629M [00:03&lt;00:01, 52.3MB/s]</pre> <pre>\r 90%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 564M/629M [00:03&lt;00:01, 53.2MB/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 570M/629M [00:03&lt;00:01, 54.5MB/s]</pre> <pre>\r 92%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f| 577M/629M [00:04&lt;00:00, 55.9MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 583M/629M [00:04&lt;00:00, 57.0MB/s]</pre> <pre>\r 94%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 589M/629M [00:04&lt;00:00, 57.6MB/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 596M/629M [00:04&lt;00:00, 60.5MB/s]</pre> <pre>\r 96%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c| 603M/629M [00:04&lt;00:00, 63.6MB/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 611M/629M [00:04&lt;00:00, 65.8MB/s]</pre> <pre>\r 98%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a| 618M/629M [00:04&lt;00:00, 67.7MB/s]</pre> <pre>\r 99%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589| 625M/629M [00:04&lt;00:00, 68.8MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 629M/629M [00:04&lt;00:00, 130MB/s] </pre> <pre>\n</pre> Out[3]: <pre>'/home/runner/work/HyperCoast/HyperCoast/docs/examples/data/neon.h5'</pre> <p>Load the dataset as a <code>xarray.Dataset</code> object.</p> In\u00a0[4]: Copied! <pre>dataset = hypercoast.read_neon(filepath)\ndataset\n</pre> dataset = hypercoast.read_neon(filepath) dataset Out[4]: <pre>&lt;xarray.Dataset&gt; Size: 3GB\nDimensions:      (y: 1000, x: 1000, wavelength: 426)\nCoordinates:\n  * y            (y) float64 8kB 4.307e+06 4.307e+06 ... 4.306e+06 4.306e+06\n  * x            (x) float64 8kB 3.68e+05 3.68e+05 ... 3.69e+05 3.69e+05\n  * wavelength   (wavelength) float64 3kB 383.9 388.9 ... 2.507e+03 2.512e+03\nData variables:\n    reflectance  (y, x, wavelength) float64 3GB 0.1569 0.1206 0.1034 ... nan nan\nAttributes:\n    scale_factor:   10000.0\n    no_data_value:  -9999.0\n    crs:            EPSG:32618\n    transform:      (1.0, 0.0, 368000.0, 0.0, -1.0, 4307000.0)</pre>xarray.Dataset<ul><li>Dimensions:<ul><li>y: 1000</li><li>x: 1000</li><li>wavelength: 426</li></ul></li><li>Coordinates: (3)<ul><li>y(y)float644.307e+06 4.307e+06 ... 4.306e+06<pre>array([4307000.      , 4306998.998999, 4306997.997998, ..., 4306002.002002,\n       4306001.001001, 4306000.      ])</pre></li><li>x(x)float643.68e+05 3.68e+05 ... 3.69e+05<pre>array([368000.      , 368001.001001, 368002.002002, ..., 368997.997998,\n       368998.998999, 369000.      ])</pre></li><li>wavelength(wavelength)float64383.9 388.9 ... 2.507e+03 2.512e+03<pre>array([ 383.88,  388.89,  393.9 , ..., 2502.17, 2507.17, 2512.18])</pre></li></ul></li><li>Data variables: (1)<ul><li>reflectance(y, x, wavelength)float640.1569 0.1206 0.1034 ... nan nanscale_factor :10000.0no_data_value :-9999.0crs :EPSG:32618transform :(1.0, 0.0, 368000.0, 0.0, -1.0, 4307000.0)<pre>array([[[0.1569, 0.1206, 0.1034, ..., 0.1512,    nan,    nan],\n        [0.1593, 0.118 , 0.105 , ...,    nan,    nan,    nan],\n        [0.1415, 0.1147, 0.1061, ..., 0.    , 0.    ,    nan],\n        ...,\n        [0.056 , 0.0319, 0.0292, ...,    nan,    nan,    nan],\n        [0.0604, 0.0412, 0.0257, ...,    nan,    nan,    nan],\n        [0.0723, 0.0444, 0.0366, ..., 0.7853,    nan,    nan]],\n\n       [[0.13  , 0.0988, 0.0842, ...,    nan,    nan,    nan],\n        [0.1515, 0.0961, 0.0826, ...,    nan,    nan,    nan],\n        [0.1431, 0.1253, 0.1069, ...,    nan,    nan,    nan],\n        ...,\n        [0.0586, 0.0411, 0.0224, ...,    nan,    nan,    nan],\n        [0.0467, 0.0424, 0.0289, ..., 0.4019,    nan,    nan],\n        [0.074 , 0.0453, 0.0301, ..., 0.7002,    nan,    nan]],\n\n       [[0.1026, 0.0716, 0.0623, ...,    nan,    nan,    nan],\n        [0.127 , 0.1103, 0.0986, ..., 0.7747,    nan,    nan],\n        [0.168 , 0.1335, 0.1359, ...,    nan,    nan,    nan],\n        ...,\n...\n        ...,\n        [0.0578, 0.0493, 0.0418, ...,    nan,    nan,    nan],\n        [0.1047, 0.0788, 0.057 , ...,    nan,    nan,    nan],\n        [0.0958, 0.0785, 0.0693, ...,    nan,    nan,    nan]],\n\n       [[0.0747, 0.0397, 0.0314, ...,    nan,    nan,    nan],\n        [0.065 , 0.041 , 0.0322, ..., 0.9747,    nan,    nan],\n        [0.0667, 0.0424, 0.0274, ...,    nan,    nan,    nan],\n        ...,\n        [0.1335, 0.1008, 0.0878, ..., 0.    ,    nan,    nan],\n        [0.1369, 0.0864, 0.0771, ...,    nan,    nan,    nan],\n        [0.1144, 0.0958, 0.0857, ...,    nan,    nan,    nan]],\n\n       [[0.0738, 0.0392, 0.031 , ...,    nan,    nan,    nan],\n        [0.0541, 0.0421, 0.0272, ...,    nan,    nan,    nan],\n        [0.0513, 0.0406, 0.0276, ...,    nan,    nan,    nan],\n        ...,\n        [0.082 , 0.0593, 0.0511, ...,    nan,    nan,    nan],\n        [0.0883, 0.0693, 0.0518, ...,    nan,    nan,    nan],\n        [0.1128, 0.1   , 0.0844, ..., 0.5833,    nan,    nan]]])</pre></li></ul></li><li>Indexes: (3)<ul><li>yPandasIndex<pre>PandasIndex(Index([        4307000.0, 4306998.998998999, 4306997.997997998,\n       4306996.996996997, 4306995.995995996, 4306994.994994995,\n       4306993.993993994, 4306992.992992993, 4306991.991991992,\n       4306990.990990991,\n       ...\n       4306009.009009009, 4306008.008008008, 4306007.007007007,\n       4306006.006006006, 4306005.005005005, 4306004.004004004,\n       4306003.003003003, 4306002.002002002, 4306001.001001001,\n               4306000.0],\n      dtype='float64', name='y', length=1000))</pre></li><li>xPandasIndex<pre>PandasIndex(Index([          368000.0,   368001.001001001, 368002.00200200203,\n         368003.003003003,   368004.004004004,   368005.005005005,\n       368006.00600600604,   368007.007007007,   368008.008008008,\n         368009.009009009,\n       ...\n         368990.990990991,   368991.991991992,   368992.992992993,\n       368993.99399399396,   368994.994994995,   368995.995995996,\n         368996.996996997,   368997.997997998,   368998.998998999,\n                 369000.0],\n      dtype='float64', name='x', length=1000))</pre></li><li>wavelengthPandasIndex<pre>PandasIndex(Index([ 383.88,  388.89,   393.9,  398.91,  403.92,  408.92,  413.93,  418.94,\n        423.95,  428.95,\n       ...\n       2467.11, 2472.12, 2477.13, 2482.13, 2487.14, 2492.15, 2497.16, 2502.17,\n       2507.17, 2512.18],\n      dtype='float64', name='wavelength', length=426))</pre></li></ul></li><li>Attributes: (4)scale_factor :10000.0no_data_value :-9999.0crs :EPSG:32618transform :(1.0, 0.0, 368000.0, 0.0, -1.0, 4307000.0)</li></ul> <p>Visualize the data interactively with HyperCoast.</p> In\u00a0[5]: Copied! <pre>m = hypercoast.Map()\nm.add_neon(filepath, wavelengths=[1000, 700, 500], vmin=0, vmax=0.5)\nm\n</pre> m = hypercoast.Map() m.add_neon(filepath, wavelengths=[1000, 700, 500], vmin=0, vmax=0.5) m Out[5]: In\u00a0[6]: Copied! <pre>m.set_center(-76.5134, 38.8973, 16)\n</pre> m.set_center(-76.5134, 38.8973, 16) In\u00a0[7]: Copied! <pre>m.add(\"spectral\")\n</pre> m.add(\"spectral\") <p></p>"},{"location":"examples/neon/#visualizing-neon-aop-hyperspectral-data-interactively-with-hypercoast","title":"Visualizing NEON AOP hyperspectral data interactively with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to visualize NEON AOP hyperspectral data interactively with HyperCoast.</p>"},{"location":"examples/pace/","title":"Pace","text":"In\u00a0[1]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[2]: Copied! <pre>import hypercoast\n</pre> import hypercoast <p>Download a sample PACE data file from here.</p> In\u00a0[3]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/netcdf/PACE_OCI.20240423T184658.L2.OC_AOP.V1_0_0.NRT.nc\"\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/netcdf/PACE_OCI.20240423T184658.L2.OC_AOP.V1_0_0.NRT.nc\" In\u00a0[4]: Copied! <pre>filepath = \"data/PACE_OCI.20240423T184658.L2.OC_AOP.V1_0_0.NRT.nc\"\nhypercoast.download_file(url, filepath)\n</pre> filepath = \"data/PACE_OCI.20240423T184658.L2.OC_AOP.V1_0_0.NRT.nc\" hypercoast.download_file(url, filepath) <pre>Downloading...\nFrom: https://github.com/opengeos/datasets/releases/download/netcdf/PACE_OCI.20240423T184658.L2.OC_AOP.V1_0_0.NRT.nc\nTo: /home/runner/work/HyperCoast/HyperCoast/docs/examples/data/PACE_OCI.20240423T184658.L2.OC_AOP.V1_0_0.NRT.nc\n</pre> <pre>\r  0%|          | 0.00/192M [00:00&lt;?, ?B/s]</pre> <pre>\r 10%|\u2588         | 19.4M/192M [00:00&lt;00:00, 193MB/s]</pre> <pre>\r 26%|\u2588\u2588\u258c       | 50.3M/192M [00:00&lt;00:00, 260MB/s]</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 81.3M/192M [00:00&lt;00:00, 282MB/s]</pre> <pre>\r 59%|\u2588\u2588\u2588\u2588\u2588\u2589    | 114M/192M [00:00&lt;00:00, 299MB/s] </pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  | 146M/192M [00:00&lt;00:00, 306MB/s]</pre> <pre>\r 93%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e| 180M/192M [00:00&lt;00:00, 316MB/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 192M/192M [00:00&lt;00:00, 298MB/s]</pre> <pre>\n</pre> Out[4]: <pre>'/home/runner/work/HyperCoast/HyperCoast/docs/examples/data/PACE_OCI.20240423T184658.L2.OC_AOP.V1_0_0.NRT.nc'</pre> <p>Let's make a scatter plot of the pixel locations so we can see the irregular spacing.</p> In\u00a0[5]: Copied! <pre>plot = hypercoast.view_pace_pixel_locations(filepath, step=20)\n</pre> plot = hypercoast.view_pace_pixel_locations(filepath, step=20) <p>Load the dataset as a <code>xarray.Dataset</code> object.</p> In\u00a0[6]: Copied! <pre>dataset = hypercoast.read_pace(filepath)\n</pre> dataset = hypercoast.read_pace(filepath) <p>Visualize selected bands of the dataset.</p> In\u00a0[7]: Copied! <pre>hypercoast.viz_pace(dataset, wavelengths=[500, 510, 520, 530], ncols=2)\n</pre> hypercoast.viz_pace(dataset, wavelengths=[500, 510, 520, 530], ncols=2) <p>Add projection.</p> In\u00a0[8]: Copied! <pre>hypercoast.viz_pace(dataset, wavelengths=[500, 510, 520, 530], ncols=2, crs=\"default\")\n</pre> hypercoast.viz_pace(dataset, wavelengths=[500, 510, 520, 530], ncols=2, crs=\"default\") <p>Plot a spectral signature.</p> In\u00a0[9]: Copied! <pre>latitude = 25.493961\nlongitude = -91.25617\nhypercoast.filter_pace(dataset, latitude, longitude, return_plot=True)\n</pre> latitude = 25.493961 longitude = -91.25617 hypercoast.filter_pace(dataset, latitude, longitude, return_plot=True) <p>Plot multiple spectral signatures.</p> In\u00a0[10]: Copied! <pre>latitude = (25.49, 25.50)\nlongitude = (-92, -91.055)\nhypercoast.filter_pace(dataset, latitude, longitude, return_plot=True)\n</pre> latitude = (25.49, 25.50) longitude = (-92, -91.055) hypercoast.filter_pace(dataset, latitude, longitude, return_plot=True) <p>Single-band visualization.</p> In\u00a0[11]: Copied! <pre>m = hypercoast.Map()\nm.add_basemap(\"Hybrid\")\nwavelengths = [450]\nm.add_pace(dataset, wavelengths, colormap=\"jet\", vmin=0, vmax=0.02, layer_name=\"PACE\")\nm.add_colormap(cmap=\"jet\", vmin=0, vmax=0.02, label=\"Reflectance\")\nm.add(\"spectral\")\nm\n</pre> m = hypercoast.Map() m.add_basemap(\"Hybrid\") wavelengths = [450] m.add_pace(dataset, wavelengths, colormap=\"jet\", vmin=0, vmax=0.02, layer_name=\"PACE\") m.add_colormap(cmap=\"jet\", vmin=0, vmax=0.02, label=\"Reflectance\") m.add(\"spectral\") m Out[11]: <p></p> <p>Multiple-band visualization.</p> In\u00a0[12]: Copied! <pre>m = hypercoast.Map()\nm.add_basemap(\"Hybrid\")\nwavelengths = [450, 550, 650]\nm.add_pace(\n    dataset, wavelengths, indexes=[3, 2, 1], vmin=0, vmax=0.02, layer_name=\"PACE\"\n)\nm.add(\"spectral\")\nm\n</pre> m = hypercoast.Map() m.add_basemap(\"Hybrid\") wavelengths = [450, 550, 650] m.add_pace(     dataset, wavelengths, indexes=[3, 2, 1], vmin=0, vmax=0.02, layer_name=\"PACE\" ) m.add(\"spectral\") m Out[12]: <p></p>"},{"location":"examples/pace/#visualizing-pace-data-interactively-with-hypercoast","title":"Visualizing PACE data interactively with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to visualize Plankton, Aerosol, Cloud, ocean Ecosystem (PACE) data interactively with HyperCoast.</p>"},{"location":"examples/pace_oci_l1/","title":"Pace oci l1","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[\u00a0]: Copied! <pre>import hypercoast\nimport xarray as xr\n</pre> import hypercoast import xarray as xr <p>To download and access the data, you will need to create an Earthdata login. You can register for an account at urs.earthdata.nasa.gov. Once you have an account, you can run the following cell to search and download PACE OCI L1 data products.</p> In\u00a0[\u00a0]: Copied! <pre>hypercoast.nasa_earth_login()\n</pre> hypercoast.nasa_earth_login() In\u00a0[\u00a0]: Copied! <pre>hypercoast.nasa_earth_login()\n\nshort_name = \"PACE_OCI_L1B_SCI\"\nresults, gdf = hypercoast.search_nasa_data(\n    short_name=short_name,\n    bbox=(-90.5642, 29.9749, -89.7143, 30.42),\n    temporal=(\"2024-06-15\", \"2024-06-16\"),\n    return_gdf=True,\n)\n</pre> hypercoast.nasa_earth_login()  short_name = \"PACE_OCI_L1B_SCI\" results, gdf = hypercoast.search_nasa_data(     short_name=short_name,     bbox=(-90.5642, 29.9749, -89.7143, 30.42),     temporal=(\"2024-06-15\", \"2024-06-16\"),     return_gdf=True, ) In\u00a0[\u00a0]: Copied! <pre>gdf.explore()\n</pre> gdf.explore() <p></p> In\u00a0[\u00a0]: Copied! <pre>hypercoast.download_nasa_data(results[0], out_dir=\"data\")\n</pre> hypercoast.download_nasa_data(results[0], out_dir=\"data\") <p>Alternatively, use the following code block to download a sample dataset from here.</p> In\u00a0[\u00a0]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/PACE_OCI.20240615T182549.L1B.nc\"\nfilepath = \"data/PACE_OCI.20240615T182549.L1B.nc\"\nhypercoast.download_file(url, filepath)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/PACE_OCI.20240615T182549.L1B.nc\" filepath = \"data/PACE_OCI.20240615T182549.L1B.nc\" hypercoast.download_file(url, filepath) <p>Let's check the top-level groups in the sample dataset.</p> In\u00a0[\u00a0]: Copied! <pre>hypercoast.netcdf_groups(filepath)\n</pre> hypercoast.netcdf_groups(filepath) <p>The top-level groups in the sample dataset are:</p> <pre>['sensor_band_parameters',\n 'scan_line_attributes',\n 'geolocation_data',\n 'navigation_data',\n 'observation_data']\n</pre> <p>Let's open the <code>observation_data</code> group, which contains the core science variables.</p> In\u00a0[\u00a0]: Copied! <pre>dataset = xr.open_dataset(filepath, group=\"observation_data\")\nprint(list(dataset.variables))\n</pre> dataset = xr.open_dataset(filepath, group=\"observation_data\") print(list(dataset.variables)) <p>The data variables include:</p> <pre>['rhot_blue', 'qual_blue', 'rhot_red', 'qual_red', 'rhot_SWIR', 'qual_SWIR']\n</pre> <p>The dimensions of the <code>rhot_blue</code> variable are <code>(\"blue_bands\", \"number_of_scans\", \"ccd_pixels\")</code>, and it has shape <code>(119, 1710, 1272)</code>. The sizes attribute of a variable gives us that information as a dictionary.</p> In\u00a0[\u00a0]: Copied! <pre>dataset[\"rhot_blue\"].sizes\n</pre> dataset[\"rhot_blue\"].sizes <p>The dimensions of the <code>rhot_red</code> variable are <code>(\"red_bands\", \"number_of_scans\", \"ccd_pixels\")</code>, and it has shape <code>(163, 1710, 1272)</code></p> In\u00a0[\u00a0]: Copied! <pre>dataset[\"rhot_red\"].sizes\n</pre> dataset[\"rhot_red\"].sizes <p>The dimensions of the <code>rhot_SWIR</code> variable are <code>(\"SWIR_bands\", \"number_of_scans\", \"SWIR_pixels\")</code>, and it has shape <code>(9, 1710, 1272)</code></p> In\u00a0[\u00a0]: Copied! <pre>dataset[\"rhot_SWIR\"].sizes\n</pre> dataset[\"rhot_SWIR\"].sizes <p>Let's plot the reflectance at position <code>100</code> in the <code>blue_bands</code> dimension.</p> In\u00a0[\u00a0]: Copied! <pre>plot = dataset[\"rhot_blue\"].sel({\"blue_bands\": 100}).plot()\n</pre> plot = dataset[\"rhot_blue\"].sel({\"blue_bands\": 100}).plot() <p></p>"},{"location":"examples/pace_oci_l1/#visualizing-pace-oci-l1-data-products-with-hypercoast","title":"Visualizing PACE OCI L1 data products with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to visualize Plankton, Aerosol, Cloud, ocean Ecosystem (PACE) OCI L1 data products. Part of the notebook is adapted from the NASA OB.DAAC tutorial - File Structure at Three Processing Levels for the Ocean Color Instrument (OCI). Credits to the NASA OB.DAAC team for the tutorial.</p>"},{"location":"examples/pace_oci_l2/","title":"Pace oci l2","text":"In\u00a0[1]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[2]: Copied! <pre>import hypercoast\n</pre> import hypercoast <p>To download and access the data, you will need to create an Earthdata login. You can register for an account at urs.earthdata.nasa.gov. Once you have an account, you can uncomment and run the following cell to search and download PACE OCI L2 data products.</p> In\u00a0[3]: Copied! <pre># hypercoast.nasa_earth_login()\n\n# short_name = \"PACE_OCI_L2_BGC_NRT\"\n# results, gdf = hypercoast.search_nasa_data(\n#     short_name=short_name,\n#     bbox=(-90.5642, 29.9749, -89.7143, 30.42),\n#     temporal=(\"2024-06-15\", \"2024-06-16\"),\n#     return_gdf=True\n#     )\n# hypercoast.download_nasa_data(results, out_dir=\"bgc\")\n</pre> # hypercoast.nasa_earth_login()  # short_name = \"PACE_OCI_L2_BGC_NRT\" # results, gdf = hypercoast.search_nasa_data( #     short_name=short_name, #     bbox=(-90.5642, 29.9749, -89.7143, 30.42), #     temporal=(\"2024-06-15\", \"2024-06-16\"), #     return_gdf=True #     ) # hypercoast.download_nasa_data(results, out_dir=\"bgc\") <p>Alternatively, use the following code block to download a sample dataset from here.</p> In\u00a0[4]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/PACE_OCI.20240615T182549.L2.OC_BGC.V1_0_0.NRT.nc\"\nfilepath = \"data/PACE_OCI.20240615T182549.L2.OC_BGC.V1_0_0.NRT.nc\"\nhypercoast.download_file(url, filepath)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/PACE_OCI.20240615T182549.L2.OC_BGC.V1_0_0.NRT.nc\" filepath = \"data/PACE_OCI.20240615T182549.L2.OC_BGC.V1_0_0.NRT.nc\" hypercoast.download_file(url, filepath) <pre>Downloading...\nFrom: https://github.com/opengeos/datasets/releases/download/hypercoast/PACE_OCI.20240615T182549.L2.OC_BGC.V1_0_0.NRT.nc\nTo: /home/runner/work/HyperCoast/HyperCoast/docs/examples/data/PACE_OCI.20240615T182549.L2.OC_BGC.V1_0_0.NRT.nc\n</pre> <pre>\r  0%|          | 0.00/9.82M [00:00&lt;?, ?B/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 9.82M/9.82M [00:00&lt;00:00, 184MB/s]</pre> <pre>\n</pre> Out[4]: <pre>'/home/runner/work/HyperCoast/HyperCoast/docs/examples/data/PACE_OCI.20240615T182549.L2.OC_BGC.V1_0_0.NRT.nc'</pre> <p>Load the downloaded dataset as an <code>xarray.Dataset</code>:</p> In\u00a0[5]: Copied! <pre>dataset = hypercoast.read_pace_bgc(filepath)\n</pre> dataset = hypercoast.read_pace_bgc(filepath) <p>Let's inspect the data variables contained in the dataset:</p> In\u00a0[6]: Copied! <pre>dataset.variables\n</pre> dataset.variables Out[6]: <pre>Frozen({'chlor_a': &lt;xarray.Variable (latitude: 1710, longitude: 1272)&gt; Size: 9MB\n[2175120 values with dtype=float32]\nAttributes:\n    long_name:      Chlorophyll Concentration, OCI Algorithm\n    units:          mg m^-3\n    standard_name:  mass_concentration_of_chlorophyll_in_sea_water\n    valid_min:      0.001\n    valid_max:      100.0\n    reference:      Hu, C., Lee Z., and Franz, B.A. (2012). Chlorophyll-a alg..., 'carbon_phyto': &lt;xarray.Variable (latitude: 1710, longitude: 1272)&gt; Size: 9MB\n[2175120 values with dtype=float32]\nAttributes:\n    long_name:  Phytoplankton Carbon\n    units:      mg m^-3\n    valid_min:  0.0\n    valid_max:  1000.0\n    reference:  Graff, J.R., Westberry, T.K., Milligan, A.J., Brown, M.B., Da..., 'poc': &lt;xarray.Variable (latitude: 1710, longitude: 1272)&gt; Size: 9MB\n[2175120 values with dtype=float32]\nAttributes:\n    long_name:  Particulate Organic Carbon, D. Stramski, 2022 (hybrid version)\n    units:      mg m^-3\n    valid_min:  -32000\n    valid_max:  -22000\n    reference:  Stramski, D., et al. \"Ocean color algorithms to estimate the ..., 'chlor_a_unc': &lt;xarray.Variable (latitude: 1710, longitude: 1272)&gt; Size: 9MB\n[2175120 values with dtype=float32]\nAttributes:\n    long_name:      Uncertainty in chlorophyll a concentration\n    units:          mg m^-3\n    standard_name:  chlorophyll_concentration_in_sea_water standard_error\n    valid_min:      0.001\n    valid_max:      100.0, 'carbon_phyto_unc': &lt;xarray.Variable (latitude: 1710, longitude: 1272)&gt; Size: 9MB\n[2175120 values with dtype=float32]\nAttributes:\n    long_name:  Phytoplankton Carbon standard uncertainty\n    units:      mg m^-3\n    valid_min:  0.0\n    valid_max:  1000.0\n    reference:  Graff, J.R., Westberry, T.K., Milligan, A.J., Brown, M.B., Da..., 'l2_flags': &lt;xarray.Variable (latitude: 1710, longitude: 1272)&gt; Size: 9MB\n[2175120 values with dtype=int32]\nAttributes:\n    long_name:      Level-2 Processing Flags\n    valid_min:      -2147483648\n    valid_max:      2147483647\n    flag_masks:     [          1           2           4           8         ...\n    flag_meanings:  ATMFAIL LAND PRODWARN HIGLINT HILT HISATZEN COASTZ SPARE ..., 'longitude': &lt;xarray.Variable (latitude: 1710, longitude: 1272)&gt; Size: 9MB\n[2175120 values with dtype=float32]\nAttributes:\n    long_name:      Longitude\n    units:          degrees_east\n    standard_name:  longitude\n    valid_min:      -180.0\n    valid_max:      180.0, 'latitude': &lt;xarray.Variable (latitude: 1710, longitude: 1272)&gt; Size: 9MB\n[2175120 values with dtype=float32]\nAttributes:\n    long_name:      Latitude\n    units:          degrees_north\n    standard_name:  latitude\n    valid_min:      -90.0\n    valid_max:      90.0})</pre> <p>We can see that the dataset contains the following variables:</p> <ul> <li>Chlorophyll Concentration</li> <li>Phytoplankton Carbon</li> <li>Particulate Organic Carbon</li> </ul> <p>Transform the xarray dataset into gridded data.</p> <p>Plot the Chlorophyll Concentration.</p> In\u00a0[7]: Copied! <pre>chlor_a = hypercoast.grid_pace_bgc(dataset, variable=\"chlor_a\", method=\"linear\")\nchlor_a.plot(vmin=0, vmax=20, cmap=\"jet\", size=6)\n</pre> chlor_a = hypercoast.grid_pace_bgc(dataset, variable=\"chlor_a\", method=\"linear\") chlor_a.plot(vmin=0, vmax=20, cmap=\"jet\", size=6) Out[7]: <pre>&lt;matplotlib.collections.QuadMesh at 0x7f528318e310&gt;</pre> <p>Plot the Phytoplankton Carbon.</p> In\u00a0[8]: Copied! <pre>carbon_phyto = hypercoast.grid_pace_bgc(\n    dataset, variable=\"carbon_phyto\", method=\"linear\"\n)\ncarbon_phyto.plot(vmin=0, vmax=120, cmap=\"jet\", size=6)\n</pre> carbon_phyto = hypercoast.grid_pace_bgc(     dataset, variable=\"carbon_phyto\", method=\"linear\" ) carbon_phyto.plot(vmin=0, vmax=120, cmap=\"jet\", size=6) Out[8]: <pre>&lt;matplotlib.collections.QuadMesh at 0x7f5282ef5790&gt;</pre> <p>Particulate Organic Carbon.</p> In\u00a0[9]: Copied! <pre>poc = hypercoast.grid_pace_bgc(dataset, variable=\"poc\", method=\"linear\")\npoc.plot(vmin=0, vmax=1000, cmap=\"jet\")\n</pre> poc = hypercoast.grid_pace_bgc(dataset, variable=\"poc\", method=\"linear\") poc.plot(vmin=0, vmax=1000, cmap=\"jet\") Out[9]: <pre>&lt;matplotlib.collections.QuadMesh at 0x7f5282dc3210&gt;</pre> <p>Plot the data on an interactive map.</p> In\u00a0[10]: Copied! <pre>m = hypercoast.Map()\nm.add_basemap(\"Hybrid\")\nm.add_raster(chlor_a, layer_name=\"Chlorophyll-a\", colormap=\"jet\", vmin=0, vmax=20)\nm.add_raster(\n    carbon_phyto, layer_name=\"Phytoplankton Carbon\", colormap=\"plasma\", vmin=0, vmax=120\n)\nm.add_raster(\n    poc, layer_name=\"Particulate Organic Carbon\", colormap=\"coolwarm\", vmin=0, vmax=1000\n)\nm.add_layer_manager()\n\nm.add_colormap(cmap=\"jet\", vmin=0, vmax=20, label=\"Chlorophyll-a (mg/m3)\")\nm.add_colormap(cmap=\"plasma\", vmin=0, vmax=120, label=\"Phytoplankton Carbon (mg/m3)\")\nm.add_colormap(\n    cmap=\"coolwarm\", vmin=0, vmax=1000, label=\"Particulate Organic Carbon (mg/m3)\"\n)\nm\n</pre> m = hypercoast.Map() m.add_basemap(\"Hybrid\") m.add_raster(chlor_a, layer_name=\"Chlorophyll-a\", colormap=\"jet\", vmin=0, vmax=20) m.add_raster(     carbon_phyto, layer_name=\"Phytoplankton Carbon\", colormap=\"plasma\", vmin=0, vmax=120 ) m.add_raster(     poc, layer_name=\"Particulate Organic Carbon\", colormap=\"coolwarm\", vmin=0, vmax=1000 ) m.add_layer_manager()  m.add_colormap(cmap=\"jet\", vmin=0, vmax=20, label=\"Chlorophyll-a (mg/m3)\") m.add_colormap(cmap=\"plasma\", vmin=0, vmax=120, label=\"Phytoplankton Carbon (mg/m3)\") m.add_colormap(     cmap=\"coolwarm\", vmin=0, vmax=1000, label=\"Particulate Organic Carbon (mg/m3)\" ) m Out[10]: <p></p>"},{"location":"examples/pace_oci_l2/#visualizing-pace-oci-l2-data-products-with-hypercoast","title":"Visualizing PACE OCI L2 data products with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to visualize Plankton, Aerosol, Cloud, ocean Ecosystem (PACE) OCI L2 data products, including the concentration of chlorophyll-a, concentration of phytoplankton carbon, and concentration of particulate organic carbon.</p>"},{"location":"examples/search_data/","title":"Search data","text":"In\u00a0[\u00a0]: Copied! <pre># %pip install \"hypercoast[extra]\"\n</pre> # %pip install \"hypercoast[extra]\" In\u00a0[\u00a0]: Copied! <pre>import hypercoast\n</pre> import hypercoast In\u00a0[\u00a0]: Copied! <pre>hypercoast.nasa_earth_login()\n</pre> hypercoast.nasa_earth_login() In\u00a0[\u00a0]: Copied! <pre>results = hypercoast.search_datasets(instrument=\"oci\")\n</pre> results = hypercoast.search_datasets(instrument=\"oci\") In\u00a0[\u00a0]: Copied! <pre>datasets = set()\nfor item in results:\n    summary = item.summary()\n    short_name = summary[\"short-name\"]\n    if short_name not in datasets:\n        print(short_name)\n    datasets.add(short_name)\nprint(f\"\\nFound {len(datasets)} unique datasets\")\n</pre> datasets = set() for item in results:     summary = item.summary()     short_name = summary[\"short-name\"]     if short_name not in datasets:         print(short_name)     datasets.add(short_name) print(f\"\\nFound {len(datasets)} unique datasets\") In\u00a0[\u00a0]: Copied! <pre>results = hypercoast.search_nasa_data(\n    short_name=\"PACE_OCI_L2_BGC_NRT\",\n    count=1,\n)\n</pre> results = hypercoast.search_nasa_data(     short_name=\"PACE_OCI_L2_BGC_NRT\",     count=1, ) <p>We can refine our search by passing more parameters that describe the spatiotemporal domain of our use case. Here, we use the temporal parameter to request a date range and the bounding_box parameter to request granules that intersect with a bounding box. We can even provide a cloud_cover threshold to limit files that have a lower percetnage of cloud cover. We do not provide a count, so we'll get all granules that satisfy the constraints.</p> In\u00a0[\u00a0]: Copied! <pre>tspan = (\"2024-04-01\", \"2024-04-16\")\nbbox = (-76.75, 36.97, -75.74, 39.01)\nclouds = (0, 50)\n\nresults, gdf = hypercoast.search_nasa_data(\n    short_name=\"PACE_OCI_L2_BGC_NRT\",\n    temporal=tspan,\n    bounding_box=bbox,\n    cloud_cover=clouds,\n    return_gdf=True,\n)\n</pre> tspan = (\"2024-04-01\", \"2024-04-16\") bbox = (-76.75, 36.97, -75.74, 39.01) clouds = (0, 50)  results, gdf = hypercoast.search_nasa_data(     short_name=\"PACE_OCI_L2_BGC_NRT\",     temporal=tspan,     bounding_box=bbox,     cloud_cover=clouds,     return_gdf=True, ) <p>Display the footprints of the granules that match the search criteria.</p> In\u00a0[\u00a0]: Copied! <pre>gdf.explore()\n</pre> gdf.explore() <p>Displaying a single result shows a direct download link: try it! The link will download the granule to your local machine, which may or may not be what you want to do. Even if you are running the notebook on a remote host, this download link will open a new browser tab or window and offer to save a file to your local machine. If you are running the notebook locally, this may be of use.</p> In\u00a0[\u00a0]: Copied! <pre>results[0]\n</pre> results[0] <p>We can also download all the results with one command.</p> In\u00a0[\u00a0]: Copied! <pre>hypercoast.download_nasa_data(results, out_dir=\"data\")\n</pre> hypercoast.download_nasa_data(results, out_dir=\"data\") In\u00a0[\u00a0]: Copied! <pre>hypercoast.nasa_earth_login()\n</pre> hypercoast.nasa_earth_login() In\u00a0[\u00a0]: Copied! <pre>results, gdf = hypercoast.search_pace(\n    bounding_box=(-83, 25, -81, 28),\n    temporal=(\"2024-05-10\", \"2024-05-16\"),\n    count=10,  # use -1 to return all datasets\n    return_gdf=True,\n)\n</pre> results, gdf = hypercoast.search_pace(     bounding_box=(-83, 25, -81, 28),     temporal=(\"2024-05-10\", \"2024-05-16\"),     count=10,  # use -1 to return all datasets     return_gdf=True, ) In\u00a0[\u00a0]: Copied! <pre>gdf.explore()\n</pre> gdf.explore() <p></p> In\u00a0[\u00a0]: Copied! <pre>hypercoast.download_pace(results[:2], out_dir=\"data\")\n</pre> hypercoast.download_pace(results[:2], out_dir=\"data\") In\u00a0[\u00a0]: Copied! <pre>results, gdf = hypercoast.search_emit(\n    bounding_box=(-83, 25, -81, 28),\n    temporal=(\"2024-04-01\", \"2024-05-16\"),\n    count=10,  # use -1 to return all datasets\n    return_gdf=True,\n)\n</pre> results, gdf = hypercoast.search_emit(     bounding_box=(-83, 25, -81, 28),     temporal=(\"2024-04-01\", \"2024-05-16\"),     count=10,  # use -1 to return all datasets     return_gdf=True, ) In\u00a0[\u00a0]: Copied! <pre>gdf.explore()\n</pre> gdf.explore() <p></p> In\u00a0[\u00a0]: Copied! <pre>hypercoast.download_emit(results[:2], out_dir=\"data\")\n</pre> hypercoast.download_emit(results[:2], out_dir=\"data\") In\u00a0[\u00a0]: Copied! <pre>results, gdf = hypercoast.search_ecostress(\n    bbox=(-120.522, 34.4266, -120.2665, 34.5653),\n    temporal=(\"2023-04-01\", \"2023-04-02\"),\n    count=-1,  # use -1 to return all datasets\n    return_gdf=True,\n)\n</pre> results, gdf = hypercoast.search_ecostress(     bbox=(-120.522, 34.4266, -120.2665, 34.5653),     temporal=(\"2023-04-01\", \"2023-04-02\"),     count=-1,  # use -1 to return all datasets     return_gdf=True, ) In\u00a0[\u00a0]: Copied! <pre>gdf.explore()\n</pre> gdf.explore() In\u00a0[\u00a0]: Copied! <pre>hypercoast.download_ecostress(results[:5], out_dir=\"data\")\n</pre> hypercoast.download_ecostress(results[:5], out_dir=\"data\") In\u00a0[\u00a0]: Copied! <pre>m = hypercoast.Map(center=[27.25, -83.05], zoom=6)\nm.search_pace()\nm\n</pre> m = hypercoast.Map(center=[27.25, -83.05], zoom=6) m.search_pace() m In\u00a0[\u00a0]: Copied! <pre># m._NASA_DATA_GDF.head()\n</pre> # m._NASA_DATA_GDF.head() In\u00a0[\u00a0]: Copied! <pre># hypercoast.download_pace(m._NASA_DATA_RESULTS[:2], out_dir=\"data\")\n</pre> # hypercoast.download_pace(m._NASA_DATA_RESULTS[:2], out_dir=\"data\") <p>Search for EMIT data interactively.</p> In\u00a0[\u00a0]: Copied! <pre>m = hypercoast.Map(center=[27.25, -83.05], zoom=6)\nm.search_emit()\nm\n</pre> m = hypercoast.Map(center=[27.25, -83.05], zoom=6) m.search_emit() m In\u00a0[\u00a0]: Copied! <pre># m._NASA_DATA_GDF.head()\n</pre> # m._NASA_DATA_GDF.head() In\u00a0[\u00a0]: Copied! <pre># hypercoast.download_emit(m._NASA_DATA_RESULTS[:2], out_dir=\"data\")\n</pre> # hypercoast.download_emit(m._NASA_DATA_RESULTS[:2], out_dir=\"data\") <p>Search for ECOSTRESS data interactively.</p> In\u00a0[\u00a0]: Copied! <pre>m = hypercoast.Map(center=[34.5014, -120.4032], zoom=11)\nm.search_ecostress()\nm\n</pre> m = hypercoast.Map(center=[34.5014, -120.4032], zoom=11) m.search_ecostress() m In\u00a0[\u00a0]: Copied! <pre># m._NASA_DATA_GDF.head()\n</pre> # m._NASA_DATA_GDF.head() In\u00a0[\u00a0]: Copied! <pre># hypercoast.download_ecostress(m._NASA_DATA_RESULTS[:2], out_dir=\"data\")\n</pre> # hypercoast.download_ecostress(m._NASA_DATA_RESULTS[:2], out_dir=\"data\")"},{"location":"examples/search_data/#search-and-download-nasa-hyperspectral-data-with-hypercoast","title":"Search and download NASA hyperspectral data with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to search and download NASA hyperspectral data (e.g., EMIT, PACE) and ECOSTRESS temperature data with HyperCoast. Part of the source code is adapted from the NASA OB.DAAC tutorial - Access Data from the Ocean Color Instrument (OCI). Credits to the NASA OB.DAAC team.</p>"},{"location":"examples/search_data/#import-library","title":"Import library\u00b6","text":""},{"location":"examples/search_data/#login-to-earthdata","title":"Login to Earthdata\u00b6","text":"<p>To download and access the data, you will need to create an Earthdata login. You can register for an account at urs.earthdata.nasa.gov.</p>"},{"location":"examples/search_data/#search-for-datasets","title":"Search for datasets\u00b6","text":"<p>Collections on NASA Earthdata are discovered with the search_datasets function, which accepts an instrument filter as an easy way to get started. Each of the items in the list of collections returned has a \"short-name\".</p>"},{"location":"examples/search_data/#search-for-data-by-short-name","title":"Search for data by short name\u00b6","text":"<p>Next, we use the <code>search_nasa_data</code> function to find granules within a collection. Let's use the <code>short_name</code> for the PACE/OCI Level-2 data product for bio-optical and biogeochemical properties.</p>"},{"location":"examples/search_data/#search-for-pace-data","title":"Search for PACE data\u00b6","text":""},{"location":"examples/search_data/#download-pace-data","title":"Download PACE data\u00b6","text":"<p>Download the first 2 files</p>"},{"location":"examples/search_data/#search-for-emit-data","title":"Search for EMIT data\u00b6","text":""},{"location":"examples/search_data/#download-emit-data","title":"Download EMIT data\u00b6","text":"<p>Download the first 2 files</p>"},{"location":"examples/search_data/#download-ecostress-data","title":"Download ECOSTRESS data\u00b6","text":""},{"location":"examples/search_data/#interactive-search","title":"Interactive search\u00b6","text":"<p>Search for PACE data interactively.</p>"},{"location":"examples/temperature/","title":"Temperature","text":"In\u00a0[\u00a0]: Copied! <pre>import hypercoast\n</pre> import hypercoast In\u00a0[\u00a0]: Copied! <pre>url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/ERA5_temperature_2023.nc\"\nfilepath = \"data/ERA5_temperature_2023.nc\"\nhypercoast.download_file(url, filepath)\n</pre> url = \"https://github.com/opengeos/datasets/releases/download/hypercoast/ERA5_temperature_2023.nc\" filepath = \"data/ERA5_temperature_2023.nc\" hypercoast.download_file(url, filepath) In\u00a0[\u00a0]: Copied! <pre>dataset = hypercoast.open_dataset(filepath)\ndataset\n</pre> dataset = hypercoast.open_dataset(filepath) dataset In\u00a0[\u00a0]: Copied! <pre>camera_position = [(-479.09, -82.89, -444.45), (89.5, 179.5, 16.5), (0.58, 0.14, -0.80)]\n</pre> camera_position = [(-479.09, -82.89, -444.45), (89.5, 179.5, 16.5), (0.58, 0.14, -0.80)] In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    dataset,\n    variable=\"temperature_2m\",\n    clim=(270, 310),\n    title=\"Temperature\",\n    cmap=\"coolwarm\",\n    widget=\"plane\",\n    invert=False,\n    grid_spacing=(1, 1, 3),\n)\np.camera_position = camera_position\np.show()\n</pre> p = hypercoast.image_cube(     dataset,     variable=\"temperature_2m\",     clim=(270, 310),     title=\"Temperature\",     cmap=\"coolwarm\",     widget=\"plane\",     invert=False,     grid_spacing=(1, 1, 3), ) p.camera_position = camera_position p.show() In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    dataset,\n    variable=\"temperature_2m\",\n    clim=(270, 310),\n    title=\"Temperature\",\n    cmap=\"coolwarm\",\n    widget=\"slice\",\n    grid_spacing=(1, 1, 3),\n)\np.camera_position = camera_position\np.show()\n</pre> p = hypercoast.image_cube(     dataset,     variable=\"temperature_2m\",     clim=(270, 310),     title=\"Temperature\",     cmap=\"coolwarm\",     widget=\"slice\",     grid_spacing=(1, 1, 3), ) p.camera_position = camera_position p.show() In\u00a0[\u00a0]: Copied! <pre>p = hypercoast.image_cube(\n    dataset,\n    variable=\"temperature_2m\",\n    clim=(270, 310),\n    title=\"Temperature\",\n    cmap=\"coolwarm\",\n    widget=\"threshold\",\n)\np.camera_position = camera_position\np.show()\n</pre> p = hypercoast.image_cube(     dataset,     variable=\"temperature_2m\",     clim=(270, 310),     title=\"Temperature\",     cmap=\"coolwarm\",     widget=\"threshold\", ) p.camera_position = camera_position p.show()"},{"location":"examples/temperature/#visualizing-era5-temperature-data-interactively-with-hypercoast","title":"Visualizing ERA5 temperature data interactively with HyperCoast\u00b6","text":"<p>This notebook demonstrates how to visualize ERA5 temperature data interactively with HyperCoast.</p>"}]}